"""
Liquidation Guard –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Ä–∏—Å–∫–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
- –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—å
"""

import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

from loguru import logger

from .margin_calculator import MarginCalculator


class LiquidationGuard:
    """
    –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏

    –§—É–Ω–∫—Ü–∏–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MarginCalculator
    """

    def __init__(
        self,
        margin_calculator: MarginCalculator,
        warning_threshold: float = 1.8,
        danger_threshold: float = 1.3,
        critical_threshold: float = 1.1,
        auto_close_threshold: float = 1.05,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Liquidation Guard

        Args:
            margin_calculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏
            warning_threshold: –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (180%)
            danger_threshold: –ü–æ—Ä–æ–≥ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (130%)
            critical_threshold: –ü–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (110%)
            auto_close_threshold: –ü–æ—Ä–æ–≥ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è (105%)
        """
        self.margin_calculator = margin_calculator
        self.warning_threshold = warning_threshold
        self.danger_threshold = danger_threshold
        self.critical_threshold = critical_threshold
        self.auto_close_threshold = auto_close_threshold

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring = False
        self.monitoring_task = None
        self.last_warning_time = {}

        logger.info(
            f"LiquidationGuard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: warning={warning_threshold:.1f}, "
            f"danger={danger_threshold:.1f}, critical={critical_threshold:.1f}, "
            f"auto_close={auto_close_threshold:.1f}"
        )

    async def start_monitoring(
        self, client, check_interval: float = 5.0, callback: Optional[callable] = None
    ):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä–∂–∏

        Args:
            client: Futures –∫–ª–∏–µ–Ω—Ç
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if self.is_monitoring:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_monitoring = True
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval}—Å)")

        self.monitoring_task = asyncio.create_task(
            self._monitoring_loop(client, check_interval, callback)
        )

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring:
            return

        self.is_monitoring = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass

        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _monitoring_loop(
        self, client, check_interval: float, callback: Optional[callable]
    ):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                await self._check_margin_health(client, callback)
                await asyncio.sleep(check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(check_interval)

    async def _check_margin_health(self, client, callback: Optional[callable]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            equity = await client.get_balance()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await client.get_positions()

            if not positions:
                return  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            # ‚ö†Ô∏è –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ –∫–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–µ—Ç —Å–≤–æ–π equity (eq)
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback
            for position in positions:
                await self._analyze_position(position, equity, client, callback)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∂–∏: {e}")

    async def _analyze_position(
        self,
        position: Dict[str, Any],
        fallback_equity: float,
        client,
        callback: Optional[callable],
    ):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            side = position.get("posSide", "long")
            size = float(position.get("pos", "0"))
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            leverage = int(position.get("lever", "3"))

            if size == 0:
                return  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ –ø–æ–ª—É—á–∞–µ–º equity —á–µ—Ä–µ–∑ get_margin_info!
            # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                margin_info = await client.get_margin_info(symbol)
                equity = margin_info.get("equity", 0)
                if equity == 0:
                    equity = fallback_equity
                    logger.warning(
                        f"‚ö†Ô∏è equity –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ get_margin_info –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–∞–ª–∞–Ω—Å: {equity:.2f}"
                    )
            except Exception as e:
                # Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
                equity = fallback_equity
                logger.debug(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è equity –¥–ª—è {symbol}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–∞–ª–∞–Ω—Å: {equity:.2f}"
                )

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size –∏–∑ API –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö!
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            try:
                instrument_details = await client.get_instrument_details(symbol)
                ct_val = instrument_details.get(
                    "ctVal", 0.01
                )  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC/ETH
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
                size_in_coins = abs(size) * ct_val
                # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
                position_value = size_in_coins * current_price
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ctVal –¥–ª—è {symbol} –≤ liquidation_guard, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}"
                )
                # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ size —É–∂–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                position_value = abs(size) * current_price

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º equity –∏–∑ –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å!
            is_safe, details = self.margin_calculator.is_position_safe(
                position_value,
                equity,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º equity –∏–∑ –ø–æ–∑–∏—Ü–∏–∏!
                current_price,
                entry_price,
                side,
                leverage,
                self.warning_threshold,
            )

            margin_ratio = details["margin_ratio"]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            risk_level = self._get_risk_level(margin_ratio)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            await self._handle_risk_level(
                risk_level, symbol, side, margin_ratio, details, client, callback
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _get_risk_level(self, margin_ratio: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª—ã–µ margin_ratio
        # –ï—Å–ª–∏ margin_ratio <= 0, —ç—Ç–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
        if margin_ratio <= 0:
            logger.debug(
                f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π margin_ratio={margin_ratio:.2f} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É —Ä–∞—Å—á–µ—Ç–∞"
            )
            return "safe"  # –ù–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞

        if margin_ratio >= self.warning_threshold:
            return "safe"
        elif margin_ratio >= self.danger_threshold:
            return "warning"
        elif margin_ratio >= self.critical_threshold:
            return "danger"
        else:
            return "critical"

    async def _handle_risk_level(
        self,
        risk_level: str,
        symbol: str,
        side: str,
        margin_ratio: float,
        details: Dict[str, Any],
        client,
        callback: Optional[callable],
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""

        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        warning_key = f"{symbol}_{side}"
        now = datetime.now()

        if risk_level == "safe":
            # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if warning_key in self.last_warning_time:
                del self.last_warning_time[warning_key]
            return

        elif risk_level == "warning":
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç)
            if (
                warning_key not in self.last_warning_time
                or now - self.last_warning_time[warning_key] > timedelta(minutes=5)
            ):
                message = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {symbol} {side} - –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                logger.warning(message)

                if callback:
                    await callback("warning", symbol, side, margin_ratio, details)

                self.last_warning_time[warning_key] = now

        elif risk_level == "danger":
            # –û–ø–∞—Å–Ω–æ—Å—Ç—å (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 2 –º–∏–Ω—É—Ç—ã)
            if (
                warning_key not in self.last_warning_time
                or now - self.last_warning_time[warning_key] > timedelta(minutes=2)
            ):
                message = f"üö® –û–ü–ê–°–ù–û–°–¢–¨: {symbol} {side} - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                logger.error(message)

                if callback:
                    await callback("danger", symbol, side, margin_ratio, details)

                self.last_warning_time[warning_key] = now

        elif risk_level == "critical":
            # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ margin_ratio —Ä–µ–∞–ª—å–Ω—ã–π, –∞ –Ω–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
            # –ï—Å–ª–∏ PnL –Ω–µ–±–æ–ª—å—à–æ–π (< 10% –æ—Ç equity), –∞ margin_ratio –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –≤–µ—Ä–æ—è—Ç–Ω–∞ –æ—à–∏–±–∫–∞
            pnl = details.get("pnl", 0)
            available_margin = details.get("available_margin", 0)
            margin_used = details.get("margin_used", 0)
            equity = details.get("equity", 0)

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê 1: –ï—Å–ª–∏ margin_ratio <= 1.0 –∏–ª–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π, –Ω–æ PnL –ø–æ—á—Ç–∏ –Ω—É–ª–µ–≤–æ–π - —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
            # –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            if margin_ratio <= 1.5 and abs(pnl) < 10:
                logger.warning(
                    f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} {side}: "
                    f"margin_ratio={margin_ratio:.2f}, available_margin={available_margin:.2f}, "
                    f"pnl={pnl:.2f}, equity={equity:.2f}. "
                    f"–í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞?), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                if callback:
                    await callback("warning", symbol, side, margin_ratio, details)
                return

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê 2: –ï—Å–ª–∏ available_margin —Å–∏–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ PnL –Ω–µ–±–æ–ª—å—à–æ–π - –æ—à–∏–±–∫–∞
            if available_margin < -1000 and abs(pnl) < 100:
                logger.warning(
                    f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} {side}: "
                    f"margin_ratio={margin_ratio:.2f}, available_margin={available_margin:.2f}, "
                    f"pnl={pnl:.2f}. –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                if callback:
                    await callback("warning", symbol, side, margin_ratio, details)
                return

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê 3: –ï—Å–ª–∏ margin_ratio = 0.0 –∏–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫ –∫ –Ω—É–ª—é - —ç—Ç–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞
            if margin_ratio <= 0.5 and equity > 0:
                logger.warning(
                    f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} {side}: "
                    f"margin_ratio={margin_ratio:.2f} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. "
                    f"–í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (equity={equity:.2f}, margin_used={margin_used:.2f}), "
                    f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                )
                if callback:
                    await callback("warning", symbol, side, margin_ratio, details)
                return

            # –ö—Ä–∏—Ç–∏—á–Ω–æ - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
            message = f"üíÄ –ö–†–ò–¢–ò–ß–ù–û: {symbol} {side} - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏! –ú–∞—Ä–∂–∞: {margin_ratio:.1f}%"
            logger.critical(message)

            if callback:
                await callback("critical", symbol, side, margin_ratio, details)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._auto_close_position(symbol, side, client)

    async def _auto_close_position(self, symbol: str, side: str, client):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            logger.critical(f"üõë –ê–í–¢–û–ó–ê–ö–†–´–¢–ò–ï: {symbol} {side}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions = await client.get_positions(symbol)
            if not positions:
                logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è")
                return

            position = positions[0]
            size = float(position.get("pos", "0"))

            if size == 0:
                logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol} —Ä–∞–≤–µ–Ω 0")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é)
            close_side = "sell" if side.lower() == "long" else "buy"

            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            # ‚ö†Ô∏è –í–ê–ñ–ù–û: size –∏–∑ API —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö, –ø–æ—ç—Ç–æ–º—É size_in_contracts=True
            result = await client.place_futures_order(
                symbol=symbol,
                side=close_side,
                size=abs(size),
                order_type="market",
                size_in_contracts=True,  # ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö!
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å dict –∏–ª–∏ awaitable –≤ —Ç–µ—Å—Ç–∞—Ö)
            code = result.get("code") if isinstance(result, dict) else None
            if code == "0":
                logger.critical(
                    f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} {side} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {result}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")

    async def get_margin_status(self, client) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä–∂–∏"""
        try:
            try:
                equity = await client.get_balance()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                return {
                    "equity": 0.0,
                    "total_margin_used": 0.0,
                    "positions": [],
                    "health_status": "error",
                    "error": str(e),
                }

            try:
                positions = await client.get_positions()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —Å –±–∞–ª–∞–Ω—Å–æ–º
                return {
                    "equity": equity,
                    "total_margin_used": 0.0,
                    "positions": [],
                    "health_status": "error",
                    "error": f"Failed to get positions: {e}",
                }

            total_margin_used = 0
            position_details = []

            for position in positions:
                size = float(position.get("pos", "0"))
                if size == 0:
                    continue

                symbol = position.get("instId", "").replace("-SWAP", "")
                side = position.get("posSide", "long")
                current_price = float(position.get("markPx", "0"))
                leverage = int(position.get("lever", "3"))

                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size –∏–∑ API –≤ –ö–û–ù–¢–†–ê–ö–¢–ê–•!
                # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                try:
                    instrument_details = await client.get_instrument_details(symbol)
                    ct_val = instrument_details.get(
                        "ctVal", 0.01
                    )  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC/ETH
                    # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
                    size_in_coins = abs(size) * ct_val
                    # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
                    position_value = size_in_coins * current_price
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ctVal –¥–ª—è {symbol} –≤ get_margin_status, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}"
                    )
                    # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ size —É–∂–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    position_value = abs(size) * current_price

                margin_used = position_value / leverage
                total_margin_used += margin_used

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                is_safe, details = self.margin_calculator.is_position_safe(
                    position_value,
                    equity,
                    current_price,
                    float(position.get("avgPx", "0")),
                    side,
                    leverage,
                )

                position_details.append(
                    {
                        "symbol": symbol,
                        "side": side,
                        "size": size,
                        "value": position_value,
                        "margin_used": margin_used,
                        "margin_ratio": details["margin_ratio"],
                        "is_safe": is_safe,
                        "liquidation_price": details["liquidation_price"],
                    }
                )

            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            health_status = self.margin_calculator.get_margin_health_status(
                equity, total_margin_used
            )

            return {
                "equity": equity,
                "total_margin_used": total_margin_used,
                "available_margin": equity - total_margin_used,
                "health_status": health_status,
                "positions": position_details,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä–∂–∏: {e}")
            return {"error": str(e), "timestamp": datetime.now().isoformat()}

    def set_thresholds(
        self,
        warning: Optional[float] = None,
        danger: Optional[float] = None,
        critical: Optional[float] = None,
        auto_close: Optional[float] = None,
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤"""
        if warning is not None:
            self.warning_threshold = warning
        if danger is not None:
            self.danger_threshold = danger
        if critical is not None:
            self.critical_threshold = critical
        if auto_close is not None:
            self.auto_close_threshold = auto_close

        logger.info(
            f"–ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: warning={self.warning_threshold:.1f}, "
            f"danger={self.danger_threshold:.1f}, critical={self.critical_threshold:.1f}, "
            f"auto_close={self.auto_close_threshold:.1f}"
        )


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ guard
    calculator = MarginCalculator()
    guard = LiquidationGuard(calculator)

    # –ü—Ä–∏–º–µ—Ä callback —Ñ—É–Ω–∫—Ü–∏–∏
    async def risk_callback(level, symbol, side, margin_ratio, details):
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {level} - {symbol} {side} - –º–∞—Ä–∂–∞: {margin_ratio:.1f}%")

    print("LiquidationGuard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
