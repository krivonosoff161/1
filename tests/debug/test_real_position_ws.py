#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢: –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è + WebSocket + PH
–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ OKX DEMO!
"""

import asyncio
import json
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Optional

import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.config import load_config
from src.okx_client import OKXClient


class RealPositionWebSocketTest:
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""

    def __init__(self):
        self.config = None
        self.client = None
        self.ws = None
        self.ws_session = None

        # –ü–æ–∑–∏—Ü–∏—è
        self.position = None
        self.entry_price = None
        self.position_size = None
        self.order_id = None
        self.oco_id = None
        self.tp_price = None
        self.sl_price = None
        self.open_time = None

        # PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.ph_threshold = 0.03  # $0.03 –¥–ª—è —Ç–µ—Å—Ç–∞
        self.ph_time_limit = 90  # 90 —Å–µ–∫—É–Ω–¥

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.ph_checks = 0
        self.price_updates = 0
        self.position_closed = False

    async def setup(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX REST + WebSocket"""
        print("\n" + "=" * 100)
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–ê")
        print("=" * 100 + "\n")

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        self.config = load_config("config.yaml")
        okx_config = self.config.get_okx_config()

        # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º REST API –∫–ª–∏–µ–Ω—Ç
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX REST API...")
        self.client = OKXClient(okx_config)
        await self.client.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await self.client.get_balance("USDT")
        print(f"‚úÖ REST API –ø–æ–¥–∫–ª—é—á–µ–Ω | –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")

        if balance < 100:
            print(f"‚ö†Ô∏è  –ù–ò–ó–ö–ò–ô –ë–ê–õ–ê–ù–°: ${balance:.2f}")
            return False

        # 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX WebSocket...")
        self.ws_session = aiohttp.ClientSession()

        ws_url = "wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999"
        self.ws = await self.ws_session.ws_connect(ws_url, heartbeat=20)

        print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {ws_url}")
        print()

        return True

    async def open_position(self, symbol: str, side: str, size_usd: float = 70.0):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ –ø–æ–∑–∏—Ü–∏—é"""
        print("=" * 100)
        print(f"üìà –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò: {symbol} {side}")
        print("=" * 100 + "\n")

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (get_ticker —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç!)
            ticker = await self.client.get_ticker(symbol)

            if not ticker or "last" not in ticker:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä: {ticker}")
                return False

            current_price = float(ticker["last"])

            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            if "BTC" in symbol:
                position_size = size_usd / current_price
            else:  # ETH
                position_size = size_usd / current_price

            print(f"üì¶ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.6f} (${size_usd})")

            # 3. –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            print(f"üîÑ –†–∞–∑–º–µ—â–∞—é {side} –æ—Ä–¥–µ—Ä...")

            from src.models import OrderSide, OrderType

            order_side = OrderSide.BUY if side == "LONG" else OrderSide.SELL

            order_result = await self.client.place_order(
                symbol=symbol,
                side=order_side,
                order_type=OrderType.MARKET,
                quantity=position_size,
            )

            if not order_result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                return False

            self.order_id = order_result.id
            self.entry_price = current_price
            self.position_size = position_size
            self.open_time = datetime.utcnow()

            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!")
            print(f"   Order ID: {self.order_id}")
            print(f"   Entry: ${self.entry_price:.2f}")
            print(f"   Size: {self.position_size:.6f}")

            # 4. –°—Ç–∞–≤–∏–º OCO (TP/SL)
            print(f"\nüéØ –†–∞–∑–º–µ—â–∞—é OCO –æ—Ä–¥–µ—Ä...")

            # –ü—Ä–æ—Å—Ç—ã–µ TP/SL –¥–ª—è —Ç–µ—Å—Ç–∞
            if side == "LONG":
                self.tp_price = current_price * 1.005  # +0.5%
                self.sl_price = current_price * 0.995  # -0.5%
            else:  # SHORT
                self.tp_price = current_price * 0.995  # -0.5%
                self.sl_price = current_price * 1.005  # +0.5%

            print(
                f"   TP: ${self.tp_price:.2f} ({((self.tp_price/current_price-1)*100):+.2f}%)"
            )
            print(
                f"   SL: ${self.sl_price:.2f} ({((self.sl_price/current_price-1)*100):+.2f}%)"
            )

            # –†–∞–∑–º–µ—â–∞–µ–º OCO
            oco_side = OrderSide.SELL if side == "LONG" else OrderSide.BUY

            oco_result = await self.client.place_oco_order(
                symbol=symbol,
                side=oco_side,
                quantity=position_size,
                tp_trigger_price=self.tp_price,
                sl_trigger_price=self.sl_price,
            )

            if oco_result:  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç algo_id –Ω–∞–ø—Ä—è–º—É—é
                self.oco_id = oco_result
                print(f"‚úÖ OCO —Ä–∞–∑–º–µ—â–µ–Ω: {self.oco_id}")
            else:
                print(f"‚ö†Ô∏è  OCO –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω")

            print()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            import traceback

            traceback.print_exc()
            return False

    async def monitor_position_ws(self, symbol: str, duration: int = 90):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ WebSocket"""
        print("=" * 100)
        print(f"üëÅÔ∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–ò–ò –ß–ï–†–ï–ó WEBSOCKET")
        print(f"   –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}s")
        print(f"   PH Threshold: ${self.ph_threshold}")
        print(f"   PH Time Limit: {self.ph_time_limit}s")
        print("=" * 100 + "\n")

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä
        subscribe_msg = {
            "op": "subscribe",
            "args": [{"channel": "tickers", "instId": symbol}],
        }
        await self.ws.send_json(subscribe_msg)

        start_time = time.time()
        last_print = time.time()

        try:
            async for msg in self.ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = json.loads(msg.data)

                    if "event" in data and data["event"] == "subscribe":
                        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n")
                        continue

                    if "data" in data:
                        for ticker in data["data"]:
                            current_price = float(ticker.get("last", 0))

                            if current_price > 0:
                                self.price_updates += 1

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PH
                                should_close, reason = await self.check_ph(
                                    current_price
                                )

                                # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
                                now = time.time()
                                if now - last_print >= 1.0:
                                    elapsed = now - start_time
                                    self.print_status(current_price, elapsed)
                                    last_print = now

                                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ PH —Å—Ä–∞–±–æ—Ç–∞–ª
                                if should_close:
                                    await self.close_position(
                                        symbol, current_price, reason
                                    )
                                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                if time.time() - start_time >= duration:
                    print(f"\n‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ ({duration}s)")

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é
                    current_price = float(ticker.get("last", self.entry_price))
                    await self.close_position(symbol, current_price, "timeout")
                    return False

        except asyncio.CancelledError:
            print("\n‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω")
            return False

    async def check_ph(self, current_price: float) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è Profit Harvesting"""
        self.ph_checks += 1

        if not self.entry_price:
            return False, ""

        # –í—Ä–µ–º—è —Å –æ—Ç–∫—Ä—ã—Ç–∏—è
        time_since_open = (datetime.utcnow() - self.open_time).total_seconds()

        # –†–∞—Å—á–µ—Ç PnL (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ!)
        pnl_usd = (current_price - self.entry_price) * self.position_size

        # –£—Å–ª–æ–≤–∏—è PH
        if pnl_usd >= self.ph_threshold and time_since_open < self.ph_time_limit:
            return True, "PROFIT_HARVESTING"

        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º OCO
        if current_price >= self.tp_price:
            return True, "TAKE_PROFIT"

        if current_price <= self.sl_price:
            return True, "STOP_LOSS"

        return False, ""

    def print_status(self, current_price: float, elapsed: float):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏"""
        time_since_open = (datetime.utcnow() - self.open_time).total_seconds()
        pnl_usd = (current_price - self.entry_price) * self.position_size
        pnl_pct = ((current_price - self.entry_price) / self.entry_price) * 100

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ TP/SL
        dist_to_tp = self.tp_price - current_price
        dist_to_sl = current_price - self.sl_price

        # –ü—Ä–æ–≥—Ä–µ—Å—Å PH
        ph_progress = (pnl_usd / self.ph_threshold * 100) if pnl_usd > 0 else 0
        ph_bar = "‚ñà" * int(ph_progress / 10)

        status = "üìà" if pnl_usd > 0 else "üìâ"

        print(
            f"\n{status} [{elapsed:.0f}s] Price: ${current_price:.2f} | "
            f"PnL: ${pnl_usd:.4f} ({pnl_pct:+.3f}%)"
        )
        print(f"   üéØ PH: {ph_bar:<10} {ph_progress:.0f}% (–ø–æ—Ä–æ–≥ ${self.ph_threshold})")
        print(f"   ‚¨ÜÔ∏è  TP: ${dist_to_tp:+.2f} –¥–æ ${self.tp_price:.2f}")
        print(f"   ‚¨áÔ∏è  SL: ${dist_to_sl:+.2f} –¥–æ ${self.sl_price:.2f}")
        print(f"   ‚è±Ô∏è  Time: {time_since_open:.0f}s / {self.ph_time_limit}s")

    async def close_position(self, symbol: str, current_price: float, reason: str):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        print("\n" + "üî•" * 50)
        print("üèÅ –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("üî•" * 50 + "\n")

        # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ PnL
        gross_pnl = (current_price - self.entry_price) * self.position_size
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        commission = (self.entry_price * self.position_size * 0.001) + (
            current_price * self.position_size * 0.001
        )
        net_pnl = gross_pnl - commission

        time_held = (datetime.utcnow() - self.open_time).total_seconds()

        print(f"üìä –î–ï–¢–ê–õ–ò:")
        print(f"   –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   Entry: ${self.entry_price:.2f}")
        print(f"   Exit: ${current_price:.2f}")
        print(f"   Size: {self.position_size:.6f}")
        print(f"   –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {time_held:.0f}s ({time_held/60:.1f}min)")
        print(f"\nüí∞ PnL:")
        print(f"   Gross: ${gross_pnl:.4f}")
        print(f"   Commission: ${commission:.4f}")
        print(f"   Net: ${net_pnl:.4f}")
        print(f"\nüéØ –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º MARKET –æ—Ä–¥–µ—Ä–æ–º
            print(f"\nüîÑ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é MARKET –æ—Ä–¥–µ—Ä–æ–º...")

            from src.models import OrderSide, OrderType

            close_result = await self.client.place_order(
                symbol=symbol,
                side=OrderSide.SELL,  # –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG
                order_type=OrderType.MARKET,
                quantity=self.position_size,
            )

            if close_result:
                print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞! Order ID: {close_result.id}")
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è")

            # –û—Ç–º–µ–Ω—è–µ–º OCO –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.oco_id:
                print(f"\nüîÑ –û—Ç–º–µ–Ω—è—é OCO –æ—Ä–¥–µ—Ä {self.oco_id}...")

                cancel_result = await self.client._make_request(
                    "POST",
                    "/trade/cancel-algos",
                    data=[{"algoId": self.oco_id, "instId": symbol}],
                )

                if cancel_result and cancel_result.get("code") == "0":
                    print(f"‚úÖ OCO –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    print(
                        f"‚ö†Ô∏è  OCO –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª): {cancel_result}"
                    )

            self.position_closed = True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            import traceback

            traceback.print_exc()

        print("\n" + "=" * 100)

    async def run_test(self, symbol: str = "ETH-USDT"):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""

        print("\n" + "=" * 100)
        print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ü–û–ó–ò–¶–ò–ò")
        print("=" * 100)
        print(f"\n–°–∏–º–≤–æ–ª: {symbol}")
        print(f"PH Threshold: ${self.ph_threshold}")
        print(f"PH Time Limit: {self.ph_time_limit}s")
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –†–ï–ê–õ–¨–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX DEMO!")
        print("‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ PH, TP/SL –∏–ª–∏ timeout")
        print("=" * 100 + "\n")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        if not await self.setup():
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if not await self.open_position(symbol, "LONG", size_usd=70.0):
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            return

        # –î–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
        await asyncio.sleep(2)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —á–µ—Ä–µ–∑ WebSocket
        print("\nüé¨ –ù–ê–ß–ò–ù–ê–Æ –ú–û–ù–ò–¢–û–†–ò–ù–ì...\n")

        await self.monitor_position_ws(symbol, duration=self.ph_time_limit + 30)

        # –ò—Ç–æ–≥–∏
        self.print_final_stats()

    def print_final_stats(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 100)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê")
        print("=" * 100 + "\n")

        print(f"üì° WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.price_updates}")
        print(f"üîç PH –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.ph_checks}")
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {'–î–ê' if self.position_closed else '–ù–ï–¢'}")

        print("\nüí° –í–´–í–û–î–´:")
        print("=" * 100)

        if self.price_updates > 0:
            avg_freq = self.price_updates / self.ph_time_limit
            print(f"‚Ä¢ WebSocket –¥–∞–µ—Ç {avg_freq:.2f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
            print(f"‚Ä¢ –≠—Ç–æ –≤ {avg_freq / 0.2:.0f}x –ë–´–°–¢–†–ï–ï —á–µ–º REST (0.2 –æ–±–Ω–æ–≤–ª/—Å–µ–∫)")

        print(f"‚Ä¢ PH –∏–º–µ–ª {self.ph_checks} —à–∞–Ω—Å–æ–≤ —Å—Ä–∞–±–æ—Ç–∞—Ç—å")
        print(f"‚Ä¢ –° REST –±—ã–ª–æ –±—ã —Ç–æ–ª—å–∫–æ {self.ph_time_limit // 5} —à–∞–Ω—Å–æ–≤")

        if self.position_closed:
            print("\n‚úÖ –ü–û–ó–ò–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–ê –ò –ó–ê–ö–†–´–¢–ê!")
        else:
            print("\n‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—å –Ω–∞ –±–∏—Ä–∂–µ –≤—Ä—É—á–Ω—É—é!")

        print("=" * 100 + "\n")

    async def cleanup(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.ws:
            await self.ws.close()
        if self.ws_session:
            await self.ws_session.close()
        if self.client:
            await self.client.session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    tester = RealPositionWebSocketTest()

    try:
        await tester.run_test(symbol="ETH-USDT")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–ï–°–¢ –ü–†–ï–†–í–ê–ù! –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é...")

        if tester.position and not tester.position_closed:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            try:
                ticker = await tester.client.get_ticker("ETH-USDT")
                current_price = float(ticker["data"][0]["last"])
                await tester.close_position("ETH-USDT", current_price, "interrupted")
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ó–ê–ö–†–û–ô –í–†–£–ß–ù–£–Æ –ù–ê –ë–ò–†–ñ–ï!")

    finally:
        await tester.cleanup()

    print("\nüëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –í—ã—Ö–æ–¥...")
