"""
üö® EMERGENCY CLOSE - –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/emergency_close.py

–í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∏ –±–æ—Ç–∞ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞!
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger

from src.config import load_config
from src.models import OrderSide, OrderType, Position, PositionSide
from src.okx_client import OKXClient


async def main():
    print("=" * 60)
    print("üö® EMERGENCY CLOSE ALL POSITIONS")
    print("=" * 60)
    print()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("‚ö†Ô∏è  Are you sure? This will close ALL open positions! (yes/no): ")
    if confirm.lower() != "yes":
        print("‚ùå Cancelled.")
        return

    print()
    print("üîÑ Loading configuration...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        config = load_config()
        okx_config = config.get_okx_config()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OKX
        async with OKXClient(okx_config) as client:
            print("‚úÖ Connected to OKX")
            print()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            print("üìä Fetching positions from exchange...")
            exchange_positions = await client.get_positions()

            if not exchange_positions:
                print("‚ö™ No open positions found on exchange")
                return

            print(f"üìä Found {len(exchange_positions)} open positions:")
            print()

            for pos in exchange_positions:
                print(
                    f"  ‚Ä¢ {pos.symbol} {pos.side.value.upper()}: {pos.size:.8f} @ ${pos.entry_price:.2f}"
                )

            print()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            for pos in exchange_positions:
                try:
                    print(f"üî¥ Closing {pos.symbol} {pos.side.value.upper()}...")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
                    close_side = (
                        OrderSide.SELL
                        if pos.side == PositionSide.LONG
                        else OrderSide.BUY
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    ticker = await client.get_ticker(pos.symbol)
                    current_price = float(ticker.get("last", pos.entry_price))

                    # –†–∞–∑–º–µ—â–∞–µ–º MARKET –æ—Ä–¥–µ—Ä
                    order = await client.place_order(
                        symbol=pos.symbol,
                        side=close_side,
                        order_type=OrderType.MARKET,
                        quantity=pos.size,
                    )

                    if order:
                        # –†–∞—Å—á–µ—Ç PnL
                        if pos.side == PositionSide.LONG:
                            pnl = (current_price - pos.entry_price) * pos.size
                        else:
                            pnl = (pos.entry_price - current_price) * pos.size

                        print(f"  ‚úÖ Closed @ ${current_price:.2f} | PnL: ${pnl:.2f}")
                    else:
                        print(f"  ‚ùå Failed to close")

                except Exception as e:
                    print(f"  ‚ùå Error: {e}")

            print()
            print("=" * 60)
            print("üö® EMERGENCY CLOSE COMPLETED")
            print("=" * 60)

    except Exception as e:
        print(f"‚ùå CRITICAL ERROR: {e}")
        logger.error(f"Emergency close failed: {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(main())
