import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def emergency_borrowed_check():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–æ–≤"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í")
    print("=" * 50)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–π–º—ã
            print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í:")
            print("-" * 30)
            btc_borrowed = await client.get_borrowed_balance("BTC")
            usdt_borrowed = await client.get_borrowed_balance("USDT")
            print(f"   BTC –∑–∞–π–º: {btc_borrowed}")
            print(f"   USDT –∑–∞–π–º: {usdt_borrowed}")

            if float(btc_borrowed) > 0 or float(usdt_borrowed) > 0:
                print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ï–°–¢–¨ –ó–ê–ô–ú–´!")
                print("   –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!")
            else:
                print("‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
            print("\n2Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê:")
            print("-" * 30)
            account_config = await client.get_account_config()
            print(f"   Account Level: {account_config.get('acctLv')}")
            print(f"   Position Mode: {account_config.get('posMode')}")
            print(f"   Auto Loan: {account_config.get('autoLoan')}")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
            print("\n3Ô∏è‚É£ –õ–û–ì–ò–ö–ê –ë–û–¢–ê:")
            print("-" * 30)
            if (
                account_config.get("acctLv") == "1"
                and account_config.get("posMode") == "long_short_mode"
            ):
                print("‚úÖ –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç —Å MARGIN —Ä–µ–∂–∏–º–æ–º - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–æ–≤ –û–¢–ö–õ–Æ–ß–ï–ù–ê")
                print("   –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            else:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
                print("   –ù—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–π–º–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            print("\n4Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
                order_history = await client._make_request(
                    "GET",
                    "/trade/orders-history",
                    params={"instType": "SPOT", "instId": "BTC-USDT"},
                )
                if order_history.get("data"):
                    recent_orders = order_history["data"][:3]
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ä–¥–µ—Ä–∞:")
                    for order in recent_orders:
                        print(
                            f"   Order ID: {order.get('ordId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
                        print(
                            f"   Side: {order.get('side')}, Size: {order.get('sz')}, Price: {order.get('px')}"
                        )
                else:
                    print("   –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

            # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("-" * 30)

            if float(btc_borrowed) > 0 or float(usdt_borrowed) > 0:
                print("üö® –ü–†–û–ë–õ–ï–ú–ê: –ë–æ—Ç –±–µ—Ä–µ—Ç –∑–∞–π–º—ã!")
                print("   –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                print("   1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–µ–º–æ")
                print("   2. –ë–æ—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–π–º—ã –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–∞–º–∏")
                print("   3. API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print("   4. –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

                print("\nüîß –†–ï–®–ï–ù–ò–ï:")
                print("   1. –í–†–ï–ú–ï–ù–ù–û –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–π–º–æ–≤")
                print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –∫–æ–¥–µ")
                print("   3. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
            else:
                print("‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(emergency_borrowed_check())
