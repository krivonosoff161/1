import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ start() –º–µ—Ç–æ–¥–∞ WebSocket Orchestrator
–ë–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.config import load_config
from src.okx_client import OKXClient
from src.strategies.scalping.websocket_orchestrator import \
    WebSocketScalpingOrchestrator


async def test_orchestrator_start():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ start() –º–µ—Ç–æ–¥–∞"""
    print("üß™ Testing WebSocket Orchestrator start() method")
    print("=" * 60)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã Loading config...")
        config = load_config("config.yaml")

        # –°–æ–∑–¥–∞–µ–º OKX Client
        print("üîß Creating OKX Client...")
        okx_client = OKXClient(config.get_okx_config())

        # –°–æ–∑–¥–∞–µ–º WebSocket Orchestrator
        print("üîß Creating WebSocket Orchestrator...")
        orchestrator = WebSocketScalpingOrchestrator(config, okx_client)

        print("‚úÖ Orchestrator created successfully!")
        print(f"   WebSocket Manager: {orchestrator.websocket_manager}")
        print(f"   Is Running: {orchestrator.is_running}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ start() –º–µ—Ç–æ–¥
        print("üöÄ Testing start() method...")

        # –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è start()
        try:
            result = await asyncio.wait_for(orchestrator.start(), timeout=10.0)
            print(f"‚úÖ Start() completed: {result}")
        except asyncio.TimeoutError:
            print("‚è∞ Start() timed out after 10 seconds")
            print("   This means the method is hanging!")
            return False
        except Exception as e:
            print(f"‚ùå Start() failed: {e}")
            import traceback

            traceback.print_exc()
            return False

        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        print("üîå Shutting down...")
        await orchestrator.shutdown()

        return True

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_orchestrator_start())

    if result:
        print("üéâ Test PASSED!")
    else:
        print("üí• Test FAILED!")
        sys.exit(1)
