import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

"""
–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–û–°–¢–û–Ø–ù–ò–ô –û–†–î–ï–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–∏–ø—ã
"""

import asyncio
import base64
import hashlib
import hmac
import sys
from datetime import datetime

import aiohttp

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def emergency_check_all_states():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–û–°–¢–û–Ø–ù–ò–ô –û–†–î–ï–†–û–í")
    print("=" * 70)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–û–°–¢–û–Ø–ù–ò–ô –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
        print(f"\nü§ñ –í–°–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í:")
        print("-" * 60)

        states = ["live", "effective", "partially_filled", "filled", "cancelled", "all"]

        for state in states:
            try:
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

                # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
                timestamp = (
                    datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
                )
                request_path = f"/trade/orders-algo-pending?instType=SPOT&state={state}"

                message = timestamp + "GET" + request_path + ""
                signature = base64.b64encode(
                    hmac.new(
                        bot.client.api_secret.encode("utf-8"),
                        message.encode("utf-8"),
                        hashlib.sha256,
                    ).digest()
                ).decode("utf-8")

                headers = {
                    "OK-ACCESS-KEY": bot.client.api_key,
                    "OK-ACCESS-SIGN": signature,
                    "OK-ACCESS-TIMESTAMP": timestamp,
                    "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                    "Content-Type": "application/json",
                }

                if bot.client.sandbox:
                    headers["x-simulated-trading"] = "1"

                url = f"{bot.client.base_url}/api/v5{request_path}"

                async with aiohttp.ClientSession() as session:
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                        print(f"   Code: {result.get('code')}")
                        print(f"   Message: {result.get('msg')}")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(result.get('data', []))}")

                        if result.get("data"):
                            for order in result.get("data", []):
                                print(f"      {order}")
                        print()

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {state}: {e}")

        # 2. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ò–ü–û–í –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
        print(f"\nü§ñ –í–°–ï –¢–ò–ü–´ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í:")
        print("-" * 60)

        ord_types = [
            "oco",
            "conditional",
            "trigger",
            "move_order_stop",
            "iceberg",
            "twap",
        ]

        for ord_type in ord_types:
            try:
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø: {ord_type}")

                # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
                timestamp = (
                    datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
                )
                request_path = (
                    f"/trade/orders-algo-pending?instType=SPOT&ordType={ord_type}"
                )

                message = timestamp + "GET" + request_path + ""
                signature = base64.b64encode(
                    hmac.new(
                        bot.client.api_secret.encode("utf-8"),
                        message.encode("utf-8"),
                        hashlib.sha256,
                    ).digest()
                ).decode("utf-8")

                headers = {
                    "OK-ACCESS-KEY": bot.client.api_key,
                    "OK-ACCESS-SIGN": signature,
                    "OK-ACCESS-TIMESTAMP": timestamp,
                    "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                    "Content-Type": "application/json",
                }

                if bot.client.sandbox:
                    headers["x-simulated-trading"] = "1"

                url = f"{bot.client.base_url}/api/v5{request_path}"

                async with aiohttp.ClientSession() as session:
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                        print(f"   Code: {result.get('code')}")
                        print(f"   Message: {result.get('msg')}")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(result.get('data', []))}")

                        if result.get("data"):
                            for order in result.get("data", []):
                                print(f"      {order}")
                        print()

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {ord_type}: {e}")

        # 3. –ü–†–û–í–ï–†–ö–ê –û–ë–´–ß–ù–´–• –û–†–î–ï–†–û–í –° –†–ê–ó–ù–´–ú–ò –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò
        print(f"\nüìã –û–ë–´–ß–ù–´–ï –û–†–î–ï–†–ê –° –†–ê–ó–ù–´–ú–ò –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò:")
        print("-" * 60)

        order_states = ["live", "partially_filled", "filled", "cancelled", "all"]

        for state in order_states:
            try:
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

                # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                timestamp = (
                    datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
                )
                request_path = f"/trade/orders-pending?instType=SPOT&state={state}"

                message = timestamp + "GET" + request_path + ""
                signature = base64.b64encode(
                    hmac.new(
                        bot.client.api_secret.encode("utf-8"),
                        message.encode("utf-8"),
                        hashlib.sha256,
                    ).digest()
                ).decode("utf-8")

                headers = {
                    "OK-ACCESS-KEY": bot.client.api_key,
                    "OK-ACCESS-SIGN": signature,
                    "OK-ACCESS-TIMESTAMP": timestamp,
                    "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                    "Content-Type": "application/json",
                }

                if bot.client.sandbox:
                    headers["x-simulated-trading"] = "1"

                url = f"{bot.client.base_url}/api/v5{request_path}"

                async with aiohttp.ClientSession() as session:
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                        print(f"   Code: {result.get('code')}")
                        print(f"   Message: {result.get('msg')}")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(result.get('data', []))}")

                        if result.get("data"):
                            for order in result.get("data", []):
                                print(f"      {order}")
                        print()

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {state}: {e}")

        await bot.shutdown()
        print("\n‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(emergency_check_all_states())
