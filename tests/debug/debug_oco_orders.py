import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OCO –æ—Ä–¥–µ—Ä–æ–≤
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def debug_oco_orders():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OCO –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OCO –û–†–î–ï–†–û–í")
    print("=" * 50)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            print("\n1Ô∏è‚É£ –û–ë–´–ß–ù–´–ï –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                open_orders = await client.get_open_orders(symbol="BTC-USDT")
                if isinstance(open_orders, list):
                    print(f"   –û–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
                    for order in open_orders:
                        print(
                            f"   Order ID: {order.get('ordId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
                else:
                    print(f"   –û–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders.get('data', []))}")
                    for order in open_orders.get("data", []):
                        print(
                            f"   Order ID: {order.get('ordId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞
            print("\n2Ô∏è‚É£ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                algo_orders = await client.get_algo_orders()
                if isinstance(algo_orders, list):
                    print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")
                    for order in algo_orders:
                        print(
                            f"   Algo ID: {order.get('algoId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
                        if order.get("ordType") == "oco":
                            print(
                                f"     OCO Order: TP={order.get('tpTriggerPx')}, SL={order.get('slTriggerPx')}"
                            )
                else:
                    print(
                        f"   –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders.get('data', []))}"
                    )
                    for order in algo_orders.get("data", []):
                        print(
                            f"   Algo ID: {order.get('algoId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
                        if order.get("ordType") == "oco":
                            print(
                                f"     OCO Order: TP={order.get('tpTriggerPx')}, SL={order.get('slTriggerPx')}"
                            )
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            print("\n3Ô∏è‚É£ –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í:")
            print("-" * 30)
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
                order_history = await client._make_request(
                    "GET",
                    "/trade/orders-history",
                    params={"instType": "SPOT", "instId": "BTC-USDT"},
                )
                if order_history.get("data"):
                    recent_orders = order_history["data"][:5]
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ä–¥–µ—Ä–æ–≤:")
                    for order in recent_orders:
                        print(
                            f"   Order ID: {order.get('ordId')}, State: {order.get('state')}, Type: {order.get('ordType')}"
                        )
                else:
                    print("   –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("-" * 30)

            algo_count = 0
            if isinstance(algo_orders, list):
                algo_count = len(algo_orders)
            else:
                algo_count = len(algo_orders.get("data", []))

            if algo_count == 0:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
                print("   –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                print("   1. OCO –æ—Ä–¥–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
                print("   2. OCO –æ—Ä–¥–µ—Ä–∞ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è")
                print("   3. OCO –æ—Ä–¥–µ—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            else:
                print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã")

            # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ OCO –æ—Ä–¥–µ—Ä–æ–≤ –≤ –∫–æ–¥–µ")
            print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –≤—ã–∑–æ–≤–æ–≤")
            print("3. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_oco_orders())
