#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî¨ PARAMETER FLOW TRACER - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç config.yaml –¥–æ –º–æ–¥—É–ª–µ–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–û–õ–ù–´–ô –ø—É—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!
"""

import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Tuple

import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))


@dataclass
class ParameterSource:
    """–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""

    name: str
    value: Any
    source: str  # 'YAML', 'HARDCODE', 'DEFAULT', 'RUNTIME'
    location: str  # –ì–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    priority: int  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1=–≤—ã—Å—à–∏–π)


class ParameterFlowTracer:
    """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Ç–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self):
        self.parameters: Dict[str, List[ParameterSource]] = {}
        self.conflicts: List[Tuple[str, ParameterSource, ParameterSource]] = []

    def add_source(
        self, param_name: str, value: Any, source: str, location: str, priority: int
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        if param_name not in self.parameters:
            self.parameters[param_name] = []

        self.parameters[param_name].append(
            ParameterSource(param_name, value, source, location, priority)
        )

    def analyze_conflicts(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        for param_name, sources in self.parameters.items():
            if len(sources) > 1:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                sorted_sources = sorted(sources, key=lambda x: x.priority)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                values = set(s.value for s in sorted_sources)
                if len(values) > 1:
                    # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç!
                    winner = sorted_sources[0]
                    losers = sorted_sources[1:]
                    for loser in losers:
                        self.conflicts.append((param_name, winner, loser))

    def print_report(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 120)
        print("üî¨ PARAMETER FLOW TRACER - –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í")
        print("=" * 120)

        # 1. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("\nüìä –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ò –ò–• –ò–°–¢–û–ß–ù–ò–ö–ò:\n")

        for param_name in sorted(self.parameters.keys()):
            sources = self.parameters[param_name]
            print(f"\nüîπ {param_name}:")

            for i, source in enumerate(sorted(sources, key=lambda x: x.priority), 1):
                priority_mark = "üèÜ" if i == 1 else "  "
                print(
                    f"  {priority_mark} [{source.source:8}] {source.value:10} | {source.location}"
                )
                print(f"      Priority: {source.priority}")

        # 2. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if self.conflicts:
            print("\n" + "=" * 120)
            print("‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢–´ –ü–ê–†–ê–ú–ï–¢–†–û–í (–†–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤):")
            print("=" * 120 + "\n")

            for param_name, winner, loser in self.conflicts:
                print(f"\n‚ùå –ö–û–ù–§–õ–ò–ö–¢: {param_name}")
                print(f"  üèÜ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø: {winner.value}")
                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {winner.source} | {winner.location}")
                print(f"      Priority: {winner.priority}")
                print()
                print(f"  ‚ùå –ò–ì–ù–û–†–ò–†–£–ï–¢–°–Ø: {loser.value}")
                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {loser.source} | {loser.location}")
                print(f"      Priority: {loser.priority}")
                print(
                    f"  ‚ö° –ü–†–û–ë–õ–ï–ú–ê: –ü–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ {loser.source}, –Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ {winner.source}!"
                )
        else:
            print("\n‚úÖ –ö–û–ù–§–õ–ò–ö–¢–û–í –ù–ï–¢ - –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã!")

        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "=" * 120)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("=" * 120 + "\n")

        if self.conflicts:
            print(
                "1. –£–¥–∞–ª–∏—Ç–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ config.yaml"
            )
            print(
                "2. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º (ARM) - —á–∏—Ç–∞–π—Ç–µ –µ–≥–æ –∏–∑ ARM, –∞ –Ω–µ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ config"
            )
            print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        else:
            print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")


def trace_adx_parameters():
    """–¢—Ä–∞—Å—Å–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ADX —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
    tracer = ParameterFlowTracer()

    print("üîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö ADX...")

    # 1. config.yaml
    try:
        with open("config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        # –ë–∞–∑–æ–≤—ã–π ADX
        adx_filter = config.get("scalping", {}).get("adx_filter", {})
        if "di_difference" in adx_filter:
            tracer.add_source(
                "adx_di_difference_BASE",
                adx_filter["di_difference"],
                "YAML",
                "config.yaml:61 (scalping.adx_filter.di_difference)",
                priority=2,  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )

        # ARM —Ä–µ–∂–∏–º—ã
        arm = config.get("scalping", {}).get("adaptive_regime", {})

        for regime in ["trending", "ranging", "choppy"]:
            regime_cfg = arm.get(regime, {})
            modules = regime_cfg.get("modules", {})
            adx_module = modules.get("adx_filter", {})

            if "adx_di_difference" in adx_module:
                tracer.add_source(
                    f"adx_di_difference_{regime.upper()}",
                    adx_module["adx_di_difference"],
                    "YAML",
                    f"config.yaml (adaptive_regime.{regime}.modules.adx_filter.adx_di_difference)",
                    priority=1,  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (ARM –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
                )

            if "ph_threshold" in regime_cfg:
                tracer.add_source(
                    f"ph_threshold_{regime.upper()}",
                    regime_cfg["ph_threshold"],
                    "YAML",
                    f"config.yaml (adaptive_regime.{regime}.ph_threshold)",
                    priority=1,
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.yaml: {e}")

    # 2. orchestrator.py - hardcoded –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        orch_file = Path("src/strategies/scalping/orchestrator.py")
        if orch_file.exists():
            with open(orch_file, "r", encoding="utf-8") as f:
                orch_code = f.read()

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É 225 - –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if 'di_difference", 1.5)' in orch_code:
                tracer.add_source(
                    "adx_di_difference_BASE",
                    1.5,
                    "HARDCODE",
                    "orchestrator.py:225 (default –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ config)",
                    priority=3,  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (fallback)
                )
            elif 'di_difference", 5.0)' in orch_code:
                tracer.add_source(
                    "adx_di_difference_BASE",
                    5.0,
                    "HARDCODE",
                    "orchestrator.py:225 (default –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ config)",
                    priority=3,
                )

            # –ò—â–µ–º ARM —Ä–µ–∂–∏–º—ã (—Å—Ç—Ä–æ–∫–∏ 421, 482, 543)
            import re

            # TRENDING
            match = re.search(
                r"# TRENDING.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if match:
                tracer.add_source(
                    "adx_di_difference_TRENDING",
                    float(match.group(1)),
                    "HARDCODE",
                    f"orchestrator.py:~421 (_create_arm_config TRENDING)",
                    priority=2,  # –°—Ä–µ–¥–Ω–∏–π (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç YAML?)
                )

            # RANGING
            match = re.search(
                r"# RANGING.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if match:
                tracer.add_source(
                    "adx_di_difference_RANGING",
                    float(match.group(1)),
                    "HARDCODE",
                    f"orchestrator.py:~482 (_create_arm_config RANGING)",
                    priority=2,
                )

            # CHOPPY
            match = re.search(
                r"# CHOPPY.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if match:
                tracer.add_source(
                    "adx_di_difference_CHOPPY",
                    float(match.group(1)),
                    "HARDCODE",
                    f"orchestrator.py:~543 (_create_arm_config CHOPPY)",
                    priority=2,
                )

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è orchestrator.py: {e}")

    # 3. adaptive_regime_manager.py - dataclass defaults
    try:
        arm_file = Path("src/strategies/modules/adaptive_regime_manager.py")
        if arm_file.exists():
            with open(arm_file, "r", encoding="utf-8") as f:
                arm_code = f.read()

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É 71
            import re

            match = re.search(r"adx_di_difference:\s*float\s*=\s*([\d.]+)", arm_code)
            if match:
                tracer.add_source(
                    "adx_di_difference_BASE",
                    float(match.group(1)),
                    "DEFAULT",
                    "adaptive_regime_manager.py:71 (ModuleParameters dataclass default)",
                    priority=4,  # –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π (default fallback)
                )

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è adaptive_regime_manager.py: {e}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    tracer.analyze_conflicts()

    # –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç—á–µ—Ç
    tracer.print_report()

    return tracer


def trace_profit_harvesting():
    """–¢—Ä–∞—Å—Å–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Profit Harvesting"""
    tracer = ParameterFlowTracer()

    print("\n\nüîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö Profit Harvesting...")

    try:
        with open("config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        arm = config.get("scalping", {}).get("adaptive_regime", {})

        for regime in ["trending", "ranging", "choppy"]:
            regime_cfg = arm.get(regime, {})

            if "ph_enabled" in regime_cfg:
                tracer.add_source(
                    f"ph_enabled_{regime.upper()}",
                    regime_cfg["ph_enabled"],
                    "YAML",
                    f"config.yaml (adaptive_regime.{regime}.ph_enabled)",
                    priority=1,
                )

            if "ph_threshold" in regime_cfg:
                tracer.add_source(
                    f"ph_threshold_{regime.upper()}",
                    regime_cfg["ph_threshold"],
                    "YAML",
                    f"config.yaml (adaptive_regime.{regime}.ph_threshold)",
                    priority=1,
                )

            if "ph_time_limit" in regime_cfg:
                tracer.add_source(
                    f"ph_time_limit_{regime.upper()}",
                    regime_cfg["ph_time_limit"],
                    "YAML",
                    f"config.yaml (adaptive_regime.{regime}.ph_time_limit)",
                    priority=1,
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º defaults –≤ RegimeParameters
    try:
        arm_file = Path("src/strategies/modules/adaptive_regime_manager.py")
        if arm_file.exists():
            with open(arm_file, "r", encoding="utf-8") as f:
                arm_code = f.read()

            import re

            # ph_threshold default
            match = re.search(r"ph_threshold:\s*float\s*=\s*([\d.]+)", arm_code)
            if match:
                tracer.add_source(
                    "ph_threshold_DEFAULT",
                    float(match.group(1)),
                    "DEFAULT",
                    "adaptive_regime_manager.py (RegimeParameters default)",
                    priority=3,
                )

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")

    tracer.analyze_conflicts()
    tracer.print_report()

    return tracer


def trace_order_size():
    """–¢—Ä–∞—Å—Å–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞"""
    tracer = ParameterFlowTracer()

    print("\n\nüîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –æ—Ä–¥–µ—Ä–æ–≤...")

    # order_executor.py
    try:
        exec_file = Path("src/strategies/scalping/order_executor.py")
        if exec_file.exists():
            with open(exec_file, "r", encoding="utf-8") as f:
                exec_code = f.read()

            import re

            # min_order_value_usd
            match = re.search(r"self\.min_order_value_usd\s*=\s*([\d.]+)", exec_code)
            if match:
                tracer.add_source(
                    "min_order_value_usd",
                    float(match.group(1)),
                    "HARDCODE",
                    "order_executor.py (__init__)",
                    priority=1,
                )

            # MIN_LONG_OCO
            match = re.search(r"self\.MIN_LONG_OCO\s*=\s*([\d.]+)", exec_code)
            if match:
                tracer.add_source(
                    "MIN_LONG_OCO",
                    float(match.group(1)),
                    "HARDCODE",
                    "order_executor.py (__init__)",
                    priority=1,
                )

            # MIN_SHORT_OCO
            match = re.search(r"self\.MIN_SHORT_OCO\s*=\s*([\d.]+)", exec_code)
            if match:
                tracer.add_source(
                    "MIN_SHORT_OCO",
                    float(match.group(1)),
                    "HARDCODE",
                    "order_executor.py (__init__)",
                    priority=1,
                )

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")

    tracer.analyze_conflicts()
    tracer.print_report()

    return tracer


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 120)
    print("üî¨ PARAMETER FLOW TRACER - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞")
    print("=" * 120)

    # 1. ADX –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("\n\n" + "üéØ" * 40)
    print("–†–ê–ó–î–ï–õ 1: ADX FILTER PARAMETERS")
    print("üéØ" * 40)
    trace_adx_parameters()

    # 2. Profit Harvesting
    print("\n\n" + "üí∞" * 40)
    print("–†–ê–ó–î–ï–õ 2: PROFIT HARVESTING PARAMETERS")
    print("üí∞" * 40)
    trace_profit_harvesting()

    # 3. Order Size
    print("\n\n" + "üì¶" * 40)
    print("–†–ê–ó–î–ï–õ 3: ORDER SIZE PARAMETERS")
    print("üì¶" * 40)
    trace_order_size()

    # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    print("\n\n" + "=" * 120)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 120)
    print("\nüí° –¢–µ–ø–µ—Ä—å —Ç—ã –≤–∏–¥–∏—à—å –í–°–Æ —Ü–µ–ø–æ—á–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å hardcoded –∑–Ω–∞—á–µ–Ω–∏—è!")
    print("\n")


if __name__ == "__main__":
    main()
