"""
Futures Position Manager –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ Futures
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Margin Calculator –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–∞—Ä–∂–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ TP/SL
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PnL –∏ —Ä–∏—Å–∫–æ–≤
"""

import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger

from src.clients.futures_client import OKXFuturesClient
from src.config import BotConfig, ScalpingConfig
from src.strategies.modules.margin_calculator import MarginCalculator


class FuturesPositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏

    –§—É–Ω–∫—Ü–∏–∏:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –∏ —Ä–∏—Å–∫–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Margin Calculator
    """

    def __init__(
        self,
        config: BotConfig,
        client: OKXFuturesClient,
        margin_calculator: MarginCalculator,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures Position Manager

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            client: Futures –∫–ª–∏–µ–Ω—Ç
            margin_calculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏
        """
        self.config = config
        self.scalping_config = config.scalping
        self.client = client
        self.margin_calculator = margin_calculator

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.active_positions = {}
        self.position_history = []
        self.management_stats = {
            "total_positions": 0,
            "closed_positions": 0,
            "tp_closed": 0,
            "sl_closed": 0,
            "manual_closed": 0,
            "total_pnl": 0.0,
        }

        logger.info("FuturesPositionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.client.get_positions()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            for position in positions:
                symbol = position.get("instId", "").replace("-SWAP", "")
                size = float(position.get("pos", "0"))
                if size != 0:
                    self.active_positions[symbol] = position

            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}")
            self.is_initialized = True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FuturesPositionManager: {e}")
            raise

    async def manage_position(self, position: Dict[str, Any]):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π

        Args:
            position: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        if not self.is_initialized:
            logger.warning("PositionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")

            if size == 0:
                # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                if symbol in self.active_positions:
                    await self._handle_position_closed(symbol)
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.active_positions[symbol] = position

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
            await self._check_position_safety(position)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
            await self._check_tp_sl(position)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_position_stats(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {e}")

    async def _check_position_safety(self, position: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            leverage = int(position.get("lever", "3"))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.client.get_balance()

            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
            position_value = abs(size) * current_price

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Margin Calculator
            is_safe, details = self.margin_calculator.is_position_safe(
                position_value,
                balance,
                current_price,
                entry_price,
                side,
                leverage,
                safety_threshold=1.5,
            )

            if not is_safe:
                margin_ratio = details["margin_ratio"]
                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞: –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–µ
                if margin_ratio < 1.2:
                    await self._emergency_close_position(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _check_tp_sl(self, position: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit –∏ Stop Loss"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))

            if size == 0:
                return

            # –†–∞—Å—á–µ—Ç PnL
            if side.lower() == "long":
                pnl_percent = (current_price - entry_price) / entry_price * 100
            else:  # short
                pnl_percent = (entry_price - current_price) / entry_price * 100

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit
            tp_percent = self.scalping_config.tp_percent
            if pnl_percent >= tp_percent:
                logger.info(f"üéØ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: {pnl_percent:.2f}%")
                await self._close_position_by_reason(position, "tp")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss
            sl_percent = self.scalping_config.sl_percent
            if pnl_percent <= -sl_percent:
                logger.info(f"üõë SL —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol}: {pnl_percent:.2f}%")
                await self._close_position_by_reason(position, "sl")
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TP/SL: {e}")

    async def _close_position_by_reason(self, position: Dict[str, Any], reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")

            logger.info(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "sell" if side.lower() == "long" else "buy"

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            result = await self.client.place_futures_order(
                symbol=symbol, side=close_side, size=abs(size), order_type="market"
            )

            if result.get("code") == "0":
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ {reason}")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_close_stats(reason)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.active_positions:
                    del self.active_positions[symbol]
            else:
                error_msg = result.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {error_msg}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _emergency_close_position(self, position: Dict[str, Any]):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò: {symbol}")

            await self._close_position_by_reason(position, "emergency")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _handle_position_closed(self, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol in self.active_positions:
                position = self.active_positions[symbol]

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.position_history.append(
                    {
                        "symbol": symbol,
                        "position": position,
                        "close_time": datetime.now(),
                        "close_reason": "manual",
                    }
                )

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                del self.active_positions[symbol]

                logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _update_position_stats(self, position: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            side = position.get("posSide", "long")

            if size == 0:
                return

            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL
            if side.lower() == "long":
                pnl = (current_price - entry_price) * abs(size)
            else:  # short
                pnl = (entry_price - current_price) * abs(size)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ PnL
            self.management_stats["total_pnl"] += pnl

            logger.debug(f"üìà –ü–æ–∑–∏—Ü–∏—è {symbol}: PnL = {pnl:.2f} USDT")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _update_close_stats(self, reason: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            self.management_stats["closed_positions"] += 1

            if reason == "tp":
                self.management_stats["tp_closed"] += 1
            elif reason == "sl":
                self.management_stats["sl_closed"] += 1
            elif reason == "emergency":
                self.management_stats["manual_closed"] += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

    async def close_position_manually(self, symbol: str) -> Dict[str, Any]:
        """
        ‚úÖ –†–£–ß–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò (–¥–ª—è TrailingSL)

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ API –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å OCO
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            positions = await self.client.get_positions(symbol)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ positions —ç—Ç–æ dict —Å –∫–ª—é—á–æ–º "data"
            if not isinstance(positions, dict) or not positions.get("data"):
                logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ")
                return {"success": False, "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

            for pos_data in positions["data"]:
                inst_id = pos_data.get("instId", "").replace("-SWAP", "")
                if inst_id != symbol:
                    continue

                size = float(pos_data.get("pos", "0"))
                if size == 0:
                    logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol} = 0")
                    continue

                side = pos_data.get("posSide", "long")

                logger.info(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {side} —Ä–∞–∑–º–µ—Ä={size}")

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
                close_side = "sell" if side.lower() == "long" else "buy"

                # ‚úÖ –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                result = await self.client.place_futures_order(
                    symbol=symbol, side=close_side, size=abs(size), order_type="market"
                )

                if result.get("code") == "0":
                    logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ API")
                    return {"success": True, "symbol": symbol}
                else:
                    error_msg = result.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {error_msg}")
                    return {"success": False, "error": error_msg}

            return {"success": False, "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def close_all_positions(self) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            closed_count = 0
            errors = []

            symbols_to_close = list(self.active_positions.keys())

            for symbol in symbols_to_close:
                result = await self.close_position_manually(symbol)
                if result.get("success"):
                    closed_count += 1
                else:
                    errors.append(f"{symbol}: {result.get('error')}")

            logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}")

            return {"success": True, "closed_count": closed_count, "errors": errors}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"success": False, "error": str(e)}

    async def get_position_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        try:
            total_pnl = 0.0
            position_details = []

            for symbol, position in self.active_positions.items():
                size = float(position.get("pos", "0"))
                entry_price = float(position.get("avgPx", "0"))
                current_price = float(position.get("markPx", "0"))
                side = position.get("posSide", "long")

                # –†–∞—Å—á–µ—Ç PnL
                if side.lower() == "long":
                    pnl = (current_price - entry_price) * abs(size)
                else:  # short
                    pnl = (entry_price - current_price) * abs(size)

                total_pnl += pnl

                position_details.append(
                    {
                        "symbol": symbol,
                        "side": side,
                        "size": size,
                        "entry_price": entry_price,
                        "current_price": current_price,
                        "pnl": pnl,
                        "pnl_percent": pnl / (abs(size) * entry_price) * 100,
                    }
                )

            return {
                "active_positions_count": len(self.active_positions),
                "total_pnl": total_pnl,
                "positions": position_details,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {e}")
            return {"error": str(e)}

    def get_management_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            total = self.management_stats["total_positions"]
            closed = self.management_stats["closed_positions"]

            tp_rate = (
                (self.management_stats["tp_closed"] / closed * 100) if closed > 0 else 0
            )
            sl_rate = (
                (self.management_stats["sl_closed"] / closed * 100) if closed > 0 else 0
            )

            return {
                "total_positions": total,
                "closed_positions": closed,
                "active_positions": len(self.active_positions),
                "tp_closed": self.management_stats["tp_closed"],
                "sl_closed": self.management_stats["sl_closed"],
                "manual_closed": self.management_stats["manual_closed"],
                "tp_rate": tp_rate,
                "sl_rate": sl_rate,
                "total_pnl": self.management_stats["total_pnl"],
                "last_position_time": self.position_history[-1]["close_time"]
                if self.position_history
                else None,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": str(e)}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BotConfig(
        api_key="test_key",
        secret_key="test_secret",
        passphrase="test_passphrase",
        sandbox=True,
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ margin calculator
    client = OKXFuturesClient("test_key", "test_secret", "test_passphrase")
    margin_calculator = MarginCalculator()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
    manager = FuturesPositionManager(config, client, margin_calculator)

    print("FuturesPositionManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
