# src/clients/futures_client.py
import asyncio
import base64
import hashlib
import hmac
import json
import math
import time
from datetime import datetime
from typing import Any, Dict, Optional

import aiohttp
from loguru import logger


def round_to_step(value: float, step: float) -> float:
    """
    –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞ (–¥–ª—è OKX size_step).

    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        step: –®–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

    Returns:
        –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if step == 0:
        return value
    # –û–∫—Ä—É–≥–ª—è–µ–º –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∫—Ä–∞—Ç–Ω–æ–º—É step
    if value % step == 0:
        return value
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º round –≤–º–µ—Å—Ç–æ ceil –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    return round(value / step) * step


class OKXFuturesClient:
    """
    OKX Futures API Client (USDT-Margined Perpetual Swaps)
    - isolated margin only (safe-by-default)
    - fixed leverage 3√ó (can be changed per symbol)
    - sandbox support
    - full margin & liquidation data
    """

    def __init__(
        self,
        api_key: str,
        secret_key: str,
        passphrase: str,
        sandbox: bool = True,
        leverage: int = 3,
    ):
        self.base_url = "https://www.okx.com" if not sandbox else "https://www.okx.com"
        self.api_key = api_key
        self.secret_key = secret_key
        self.passphrase = passphrase
        self.sandbox = sandbox
        self.leverage = leverage
        self.session = None
        self._lot_sizes_cache: dict = {}  # –ö—ç—à –¥–ª—è lot sizes
        self._instrument_details_cache: dict = (
            {}
        )  # –ö—ç—à –¥–ª—è instrument details (ctVal, lotSz, minSz)

    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏"""
        try:
            if self.session and not self.session.closed:
                await self.session.close()
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                await asyncio.sleep(0.1)
                logger.debug("‚úÖ OKXFuturesClient —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

    # ---------- HTTP internals ----------
    async def _make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict] = None,
        data: Optional[Dict] = None,
    ) -> Dict[str, Any]:
        """Unified request with OKX signing (same as your spot client)"""
        url = self.base_url + endpoint
        # OKX requires timestamp in ISO 8601 format with milliseconds
        timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"

        # Build sign string
        body = json.dumps(data, separators=(",", ":")) if data else ""

        # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –ø–æ–¥–ø–∏—Å—å
        if method.upper() == "GET" and params:
            from urllib.parse import urlencode

            query_string = "?" + urlencode(params, doseq=True)
            request_path = endpoint + query_string
        else:
            request_path = endpoint

        sign_str = timestamp + method.upper() + request_path + body

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Signature components:")
        logger.debug(f"  Timestamp: {timestamp}")
        logger.debug(f"  Method: {method.upper()}")
        logger.debug(f"  Endpoint: {endpoint}")
        logger.debug(f"  Body: '{body}'")
        logger.debug(f"  Full message: '{sign_str}'")

        signature = base64.b64encode(
            hmac.new(
                self.secret_key.encode(), sign_str.encode(), hashlib.sha256
            ).digest()
        ).decode()

        headers = {
            "OK-ACCESS-KEY": self.api_key,
            "OK-ACCESS-SIGN": signature,
            "OK-ACCESS-TIMESTAMP": timestamp,
            "OK-ACCESS-PASSPHRASE": self.passphrase,
            "Content-Type": "application/json",
            "Accept": "application/json",  # ‚úÖ –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ–º JSON
            "x-simulated-trading": "1" if self.sandbox else "0",
        }

        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()

        try:
            async with self.session.request(
                method, url, headers=headers, params=params, data=body
            ) as resp:
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º content-type –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
                content_type = resp.headers.get("Content-Type", "").lower()

                # –ï—Å–ª–∏ OKX –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON - —ç—Ç–æ –æ—à–∏–±–∫–∞ (rate limit, 403, 404 –∏ —Ç.–¥.)
                if "text/html" in content_type:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    text = await resp.text()
                    logger.error(
                        f"‚ùå OKX –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON! Status: {resp.status}, "
                        f"URL: {url}, Content-Type: {content_type}"
                    )
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –≤ HTML (–º–æ–∂–µ—Ç –±—ã—Ç—å rate limit –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                    if "rate limit" in text.lower() or "too many" in text.lower():
                        logger.error(
                            "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω rate limit OKX! –ù—É–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏."
                        )
                        raise RuntimeError("OKX rate limit exceeded")
                    elif resp.status == 403:
                        logger.error(
                            "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
                        )
                        raise RuntimeError("OKX API: Access forbidden (403)")
                    elif resp.status == 404:
                        logger.error("‚ö†Ô∏è Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.")
                        raise RuntimeError(f"OKX API: Endpoint not found (404): {url}")
                    else:
                        logger.error(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTML –æ—Ç–≤–µ—Ç –æ—Ç OKX: {text[:500]}")
                        raise RuntimeError(
                            f"OKX API returned HTML instead of JSON. "
                            f"Status: {resp.status}, Content-Type: {content_type}"
                        )

                # –ü–∞—Ä—Å–∏–º JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JSON
                try:
                    resp_data = await resp.json()
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    text = await resp.text()
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OKX: {e}, "
                        f"Status: {resp.status}, Content-Type: {content_type}, "
                        f"Response: {text[:500]}"
                    )
                    raise RuntimeError(
                        f"Failed to parse JSON response from OKX: {e}, "
                        f"Status: {resp.status}"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if resp.status != 200:
                    logger.error(f"‚ùå OKX API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}: {resp_data}")
                    raise RuntimeError(
                        f"OKX API error: status {resp.status}, data: {resp_data}"
                    )

                if resp_data.get("code") != "0":
                    logger.error("OKX API error: %s", resp_data)
                    raise RuntimeError(resp_data)

                # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ò–°–°–ò–ò: –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞, –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏—é
                if method == "POST" and "/trade/order" in url:
                    try:
                        order_data = resp_data.get("data", [])
                        if order_data and len(order_data) > 0:
                            fee = order_data[0].get("fee", "N/A")
                            fee_ccy = order_data[0].get("feeCcy", "N/A")
                            if fee != "N/A" and fee:
                                logger.info(
                                    f"üí∞ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ—Ä–¥–µ—Ä {order_data[0].get('ordId', 'N/A')}: "
                                    f"{fee} {fee_ccy} (–∏–ª–∏ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏)"
                                )
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é: {e}")

                return resp_data

        except asyncio.CancelledError:
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ OKX –æ—Ç–º–µ–Ω–µ–Ω: {method} {url}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OKX ({method} {url}): {e}")
            raise

    # ---------- Account & Margin ----------
    async def get_instrument_info(self, inst_type: str = "SWAP") -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (lot size, min size –∏ —Ç.–¥.)"""
        data = await self._make_request(
            "GET", "/api/v5/public/instruments", params={"instType": inst_type}
        )
        return data

    async def get_lot_size(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π lot size –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if symbol in self._lot_sizes_cache:
            return self._lot_sizes_cache[symbol]

        try:
            inst_id = f"{symbol}-SWAP"
            instruments = await self.get_instrument_info()

            for inst in instruments.get("data", []):
                if inst.get("instId") == inst_id:
                    lot_sz = inst.get("lotSz")
                    if lot_sz:
                        lot_size = float(lot_sz)
                        self._lot_sizes_cache[symbol] = lot_size
                        logger.info(
                            f"üìè –ü–æ–ª—É—á–µ–Ω lot size –∏–∑ API –¥–ª—è {symbol}: {lot_size}"
                        )
                        return lot_size
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lot size –∏–∑ API –¥–ª—è {symbol}: {e}")

        # Fallback –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "BTC" in symbol:
            default = 0.001
        elif "ETH" in symbol:
            default = 0.01
        else:
            default = 0.001

        self._lot_sizes_cache[symbol] = default
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback lot size –¥–ª—è {symbol}: {default}")
        return default

    async def get_instrument_details(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (ctVal, lotSz, minSz) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if symbol in self._instrument_details_cache:
            return self._instrument_details_cache[symbol]

        try:
            inst_id = f"{symbol}-SWAP"
            instruments = await self.get_instrument_info()

            for inst in instruments.get("data", []):
                if inst.get("instId") == inst_id:
                    details = {
                        "ctVal": float(inst.get("ctVal", 0.01)),  # Contract value
                        "lotSz": float(inst.get("lotSz", 0.01)),  # Lot size
                        "minSz": float(inst.get("minSz", 0.01)),  # Minimum size
                    }
                    self._instrument_details_cache[symbol] = details
                    logger.debug(
                        f"üìã –î–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol}: ctVal={details['ctVal']}, lotSz={details['lotSz']}, minSz={details['minSz']}"
                    )
                    return details
        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è {symbol}: {e}"
            )

        # Fallback –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "BTC" in symbol:
            default_details = {"ctVal": 0.01, "lotSz": 0.01, "minSz": 0.01}
        elif "ETH" in symbol:
            default_details = {"ctVal": 0.1, "lotSz": 0.01, "minSz": 0.01}
        else:
            default_details = {"ctVal": 0.01, "lotSz": 0.01, "minSz": 0.01}

        self._instrument_details_cache[symbol] = default_details
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–µ—Ç–∞–ª–∏ –¥–ª—è {symbol}: {default_details}")
        return default_details

    async def get_balance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç USDT equity (–µ–¥–∏–Ω—ã–π –¥–ª—è spot –∏ —Ñ—å—é—á–µ–π)"""
        data = await self._make_request("GET", "/api/v5/account/balance")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è data –≤ –æ—Ç–≤–µ—Ç–µ - –µ—Å–ª–∏ –Ω–µ—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞
        if "data" not in data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –≤ –æ—Ç–≤–µ—Ç–µ API")
            raise RuntimeError(f"Invalid response: {data}")

        if not data["data"]:
            logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            raise RuntimeError(f"Empty response: {data}")

        for detail in data["data"][0].get("details", []):
            if detail.get("ccy") == "USDT":
                return float(detail["eq"])
        return 0.0

    async def get_margin_info(self, symbol: str) -> dict:
        """Isolated-margin info: equity, liqPx, mgnRatio"""
        try:
            data = await self._make_request(
                "GET",
                "/api/v5/account/positions",
                params={"instType": "SWAP", "instId": f"{symbol}-SWAP"},
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if not data or not data.get("data") or len(data["data"]) == 0:
                logger.debug(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ get_margin_info (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)"
                )
                return {}

            pos = data["data"][0]

            # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)
            if not hasattr(self, "_logged_position_fields"):
                self._logged_position_fields = set()
            if symbol not in self._logged_position_fields:
                available_fields = list(pos.keys())
                logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {available_fields}")
                logger.debug(f"üìã –ü—Ä–∏–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {pos}")
                self._logged_position_fields.add(symbol)

            # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ equity = margin + unrealizedPnl
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –∏ —Å—á–∏—Ç–∞–µ–º equity –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            equity = 0.0

            # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–µ –ø–æ–ª–µ 'eq' (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if "eq" in pos and pos.get("eq") and str(pos["eq"]).strip():
                try:
                    equity = float(pos["eq"])
                    logger.debug(f"‚úÖ equity –ø–æ–ª—É—á–µ–Ω –∏–∑ 'eq' –¥–ª—è {symbol}: {equity:.2f}")
                except (ValueError, TypeError) as e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å eq –¥–ª—è {symbol}: {e}")
                    equity = 0.0

            # –°–ø–æ—Å–æ–± 2: –†–∞—Å—á–µ—Ç equity = margin + unrealizedPnl (–¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏)
            if equity == 0:
                margin = 0.0
                unrealized_pnl = 0.0

                try:
                    if "margin" in pos and pos.get("margin"):
                        margin = float(pos["margin"])
                except (ValueError, TypeError):
                    pass

                try:
                    if "upl" in pos and pos.get("upl"):  # unrealizedPnl
                        unrealized_pnl = float(pos["upl"])
                    elif "uPnl" in pos and pos.get("uPnl"):
                        unrealized_pnl = float(pos["uPnl"])
                    elif "unrealizedPnl" in pos and pos.get("unrealizedPnl"):
                        unrealized_pnl = float(pos["unrealizedPnl"])
                except (ValueError, TypeError):
                    pass

                if margin > 0:
                    equity = margin + unrealized_pnl
                    logger.debug(
                        f"‚úÖ equity —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {symbol}: margin={margin:.2f} + upl={unrealized_pnl:.2f} = {equity:.2f}"
                    )

            # –°–ø–æ—Å–æ–± 3: availEq –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            if equity == 0:
                if "availEq" in pos and pos.get("availEq"):
                    try:
                        equity = float(pos["availEq"])
                        logger.debug(
                            f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º availEq –¥–ª—è {symbol}: {equity:.2f}"
                        )
                    except (ValueError, TypeError):
                        pass

            # –ü–æ–ª—É—á–∞–µ–º margin –∏ upl –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL%
            margin = 0.0
            upl = 0.0
            try:
                if "margin" in pos and pos.get("margin"):
                    margin = float(pos["margin"])
                if "upl" in pos and pos.get("upl"):
                    upl = float(pos["upl"])
                elif "uPnl" in pos and pos.get("uPnl"):
                    upl = float(pos["uPnl"])
            except (ValueError, TypeError):
                pass

            return {
                "equity": equity,
                "margin": margin,
                "upl": upl,
                "unrealized_pnl": upl,  # Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "liqPx": float(pos["liqPx"]) if pos.get("liqPx") else None,
                "mgnRatio": float(pos["mgnRatio"]) if pos.get("mgnRatio") else None,
            }
        except KeyError as e:
            logger.debug(f"‚ö†Ô∏è KeyError –≤ get_margin_info –¥–ª—è {symbol}: {e}")
            return {}
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ get_margin_info –¥–ª—è {symbol}: {e}")
            return {}

    # ---------- Leverage ----------
    async def set_leverage(self, symbol: str, leverage: int) -> dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ (1 —Ä–∞–∑ –Ω–∞ —Å–∏–º–≤–æ–ª)"""
        return await self._make_request(
            "POST",
            "/api/v5/account/set-leverage",
            data={
                "instId": f"{symbol}-SWAP",
                "lever": str(leverage),
                "mgnMode": "isolated",
                "posSide": "net",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º net –ø–æ–∑–∏—Ü–∏—é
            },
        )

    # ---------- Orders ----------
    async def place_futures_order(
        self,
        symbol: str,
        side: str,
        size: float,
        price: Optional[float] = None,
        order_type: str = "market",
        size_in_contracts: bool = False,
    ) -> dict:
        """
        –†—ã–Ω–æ—á–Ω—ã–π –∏–ª–∏ –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä

        Args:
            symbol: –°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC-USDT")
            side: "buy" –∏–ª–∏ "sell"
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ –º–æ–Ω–µ—Ç–∞—Ö, –µ—Å–ª–∏ size_in_contracts=False, –∏–Ω–∞—á–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö)
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            order_type: "market" –∏–ª–∏ "limit"
            size_in_contracts: –ï—Å–ª–∏ True, size —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö; –µ—Å–ª–∏ False - –≤ –º–æ–Ω–µ—Ç–∞—Ö (–Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (ctVal, lotSz, minSz)
        instrument_details = await self.get_instrument_details(symbol)
        ct_val = instrument_details.get("ctVal", 0.01)
        lot_sz = instrument_details.get("lotSz", 0.01)
        min_sz = instrument_details.get("minSz", 0.01)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –º–æ–Ω–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not size_in_contracts:
            # size –≤ –º–æ–Ω–µ—Ç–∞—Ö (BTC/ETH) ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            size_in_contracts_value = size / ct_val
            logger.debug(
                f"üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {symbol}: {size:.6f} –º–æ–Ω–µ—Ç ‚Üí {size_in_contracts_value:.6f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (ctVal={ct_val})"
            )
        else:
            # size —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
            size_in_contracts_value = size

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if size_in_contracts_value < min_sz:
            error_msg = f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {size_in_contracts_value:.6f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ {min_sz:.6f} –¥–ª—è {symbol}"
            logger.error(f"‚ùå {error_msg}")
            return {"code": "1", "msg": error_msg, "data": []}

        # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö –¥–æ lotSz
        rounded_size = round_to_step(size_in_contracts_value, lot_sz)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä >= min_sz
        if rounded_size < min_sz:
            rounded_size = min_sz
            logger.warning(
                f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º: {min_sz}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
        if lot_sz == 0.0001:
            formatted_size = f"{rounded_size:.4f}"  # 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        elif lot_sz == 0.001:
            formatted_size = f"{rounded_size:.3f}"  # 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        elif lot_sz == 0.01:
            formatted_size = f"{rounded_size:.2f}"  # 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        else:
            formatted_size = f"{rounded_size:.6f}"

        if rounded_size != size_in_contracts_value:
            logger.info(
                f"–†–∞–∑–º–µ—Ä –æ–∫—Ä—É–≥–ª–µ–Ω —Å {size_in_contracts_value:.6f} –¥–æ {formatted_size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ "
                f"(lotSz={lot_sz}, –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö={size:.6f})"
            )

        payload = {
            "instId": f"{symbol}-SWAP",
            "tdMode": "isolated",
            "side": side,
            "sz": formatted_size,
            "ordType": order_type,
        }

        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º reduceOnly!
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é, –∞ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—É—é
        # –í–ê–ñ–ù–û: –î–ª—è isolated margin OKX —Ç—Ä–µ–±—É–µ—Ç posSide –¥–∞–∂–µ –ø—Ä–∏ reduceOnly!
        if size_in_contracts:
            # –≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º reduceOnly
            # ‚ö†Ô∏è –î–õ–Ø ISOLATED MARGIN –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å posSide –¥–∞–∂–µ –ø—Ä–∏ reduceOnly!
            payload["reduceOnly"] = "true"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º posSide –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º long - –ø—Ä–æ–¥–∞–µ–º (side="sell"), –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ long
            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º short - –ø–æ–∫—É–ø–∞–µ–º (side="buy"), –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ short
            if side.lower() == "sell":
                payload["posSide"] = "long"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º long –ø–æ–∑–∏—Ü–∏—é
            elif side.lower() == "buy":
                payload["posSide"] = "short"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º short –ø–æ–∑–∏—Ü–∏—é
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º posSide –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if "SWAP" in f"{symbol}-SWAP":
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º posSide –Ω–∞ –æ—Å–Ω–æ–≤–µ side
                if side.lower() == "buy":
                    payload["posSide"] = "long"
                elif side.lower() == "sell":
                    payload["posSide"] = "short"

        if price:
            payload["px"] = str(price)

        return await self._make_request("POST", "/api/v5/trade/order", data=payload)

    async def place_oco_order(
        self, symbol: str, side: str, size: float, tp_price: float, sl_price: float
    ) -> dict:
        """OCO –¥–ª—è —Ñ—å—é—á–µ–π (min distance 0,01 % = 10 bips)"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º size_step –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ü–†–ê–í–ò–õ–¨–ù–´–ï –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ lot sizes –¥–ª—è OKX SWAP!)
        if "BTC" in symbol:
            size_step = 0.001  # ‚úÖ 0.001 BTC –º–∏–Ω–∏–º—É–º –¥–ª—è BTC-USDT-SWAP (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 0.0001, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 0.001+)
        elif "ETH" in symbol:
            size_step = 0.01  # ‚úÖ 0.01 ETH –º–∏–Ω–∏–º—É–º –¥–ª—è ETH-USDT-SWAP (–ø—Ä–æ–≤–µ—Ä–∏–º)
        else:
            size_step = 0.001  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ OKX size_step
        rounded_size = round_to_step(size, size_step)

        if rounded_size != size:
            logger.info(
                f"–†–∞–∑–º–µ—Ä OCO –æ–∫—Ä—É–≥–ª–µ–Ω —Å {size:.6f} –¥–æ {rounded_size:.6f} "
                f"(step={size_step})"
            )

        payload = {
            "instId": f"{symbol}-SWAP",
            "tdMode": "isolated",
            "side": side,
            "sz": str(rounded_size),
            "ordType": "oco",
            "tpTriggerPx": str(tp_price),
            "tpOrdPx": "-1",  # —Ä—ã–Ω–æ—á–Ω—ã–π TP
            "slTriggerPx": str(sl_price),
            "slOrdPx": "-1",  # —Ä—ã–Ω–æ—á–Ω—ã–π SL
        }
        return await self._make_request(
            "POST", "/api/v5/trade/order-algo", data=payload
        )

    async def cancel_order(self, symbol: str, order_id: str) -> dict:
        return await self._make_request(
            "POST",
            "/api/v5/trade/cancel-order",
            data={"instId": f"{symbol}-SWAP", "ordId": order_id},
        )

    async def get_positions(self, symbol: Optional[str] = None) -> list:
        params = {"instType": "SWAP"}
        if symbol:
            params["instId"] = f"{symbol}-SWAP"
        data = await self._make_request(
            "GET", "/api/v5/account/positions", params=params
        )
        return data["data"]

    async def get_active_orders(self, symbol: Optional[str] = None) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        params = {"instType": "SWAP"}
        if symbol:
            params["instId"] = f"{symbol}-SWAP"
        data = await self._make_request(
            "GET", "/api/v5/trade/orders-pending", params=params
        )
        return data.get("data", [])

    # ---------- Batch ----------
    async def batch_amend_orders(self, amend_list: list) -> dict:
        """–î–æ 20 –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ spot)"""
        return await self._make_request(
            "POST", "/api/v5/trade/amend-batch", data={"amendData": amend_list}
        )
