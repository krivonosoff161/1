"""
Futures Orchestrator –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏:
- FuturesSignalGenerator
- FuturesOrderExecutor
- FuturesPositionManager
- MarginCalculator
- LiquidationGuard
- SlippageGuard
- PerformanceTracker
"""

import asyncio
from datetime import datetime
from typing import Any, Dict, List

from loguru import logger

from src.clients.futures_client import OKXFuturesClient
from src.config import BotConfig
# Futures-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from src.strategies.modules.liquidation_guard import LiquidationGuard
from src.strategies.modules.margin_calculator import MarginCalculator
from src.strategies.modules.slippage_guard import SlippageGuard

from ..spot.performance_tracker import PerformanceTracker
from .order_executor import FuturesOrderExecutor
from .position_manager import FuturesPositionManager
from .signal_generator import FuturesSignalGenerator


class FuturesScalpingOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä Futures —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π Futures —Ç–æ—Ä–≥–æ–≤–ª–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–æ–∑–∏—Ü–∏–π
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∞—Ä–∂–∏
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """

    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures Orchestrator

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        self.config = config
        self.scalping_config = config.scalping
        self.risk_config = config.risk

        # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        okx_config = config.get_okx_config()

        # –ö–ª–∏–µ–Ω—Ç
        self.client = OKXFuturesClient(
            api_key=okx_config.api_key,
            secret_key=okx_config.api_secret,
            passphrase=okx_config.passphrase,
            sandbox=okx_config.sandbox,
            leverage=3,  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
        )

        # –ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.margin_calculator = MarginCalculator(
            default_leverage=config.futures.get("leverage", 3),
            maintenance_margin_ratio=config.futures.get(
                "maintenance_margin_ratio", 0.01
            ),
            initial_margin_ratio=config.futures.get("initial_margin_ratio", 0.1),
        )

        self.liquidation_guard = LiquidationGuard(
            margin_calculator=self.margin_calculator,
            warning_threshold=config.futures.get("warning_threshold", 1.8),
            danger_threshold=config.futures.get("danger_threshold", 1.3),
            critical_threshold=config.futures.get("critical_threshold", 1.1),
            auto_close_threshold=config.futures.get("auto_close_threshold", 1.05),
        )

        self.slippage_guard = SlippageGuard(
            max_slippage_percent=config.futures.get("max_slippage_percent", 0.1),
            max_spread_percent=config.futures.get("max_spread_percent", 0.05),
            order_timeout=config.futures.get("order_timeout", 30.0),
        )

        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        self.signal_generator = FuturesSignalGenerator(config)
        self.order_executor = FuturesOrderExecutor(
            config, self.client, self.slippage_guard
        )
        self.position_manager = FuturesPositionManager(
            config, self.client, self.margin_calculator
        )
        self.performance_tracker = PerformanceTracker()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.active_positions = {}
        self.trading_session = None

        logger.info("FuturesScalpingOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            await self._initialize_client()

            # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await self._start_safety_modules()

            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            await self._start_trading_modules()

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            self.is_running = True
            await self._main_trading_loop()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Futures Orchestrator: {e}")
            raise
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await self.liquidation_guard.stop_monitoring()
        await self.slippage_guard.stop_monitoring()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.close()

        logger.info("‚úÖ Futures —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.client.get_balance()
            logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

            if balance < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            for symbol in self.scalping_config.symbols:
                try:
                    await self.client.set_leverage(
                        symbol, self.config.futures.get("leverage", 3)
                    )
                    logger.info(
                        f"‚úÖ –ü–ª–µ—á–æ {self.config.futures.get('leverage', 3)}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol}"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {symbol}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    async def _start_safety_modules(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ó–∞–ø—É—Å–∫ Liquidation Guard
            await self.liquidation_guard.start_monitoring(
                client=self.client,
                check_interval=5.0,
                callback=self._on_liquidation_warning,
            )

            # –ó–∞–ø—É—Å–∫ Slippage Guard
            await self.slippage_guard.start_monitoring(self.client)

            logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            raise

    async def _start_trading_modules(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            await self.signal_generator.initialize()
            await self.order_executor.initialize()
            await self.position_manager.initialize()

            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
            raise

    async def _main_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")

        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await self._update_state()

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                signals = await self.signal_generator.generate_signals()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                await self._process_signals(signals)

                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                await self._manage_positions()

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self._update_performance()

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(self.scalping_config.check_interval)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _update_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.client.get_positions()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.active_positions = {}
            for position in positions:
                symbol = position.get("instId", "").replace("-SWAP", "")
                size = float(position.get("pos", "0"))
                if size != 0:
                    self.active_positions[symbol] = position

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏
            margin_status = await self.liquidation_guard.get_margin_status(self.client)

            if margin_status.get("health_status", {}).get("status") == "critical":
                logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ú–ê–†–ñ–ò!")
                await self._emergency_close_all_positions()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    async def _process_signals(self, signals: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            for signal in signals:
                symbol = signal.get("symbol")
                side = signal.get("side")
                strength = signal.get("strength", 0)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                if strength < self.scalping_config.min_signal_strength:
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if symbol in self.active_positions:
                    logger.debug(f"–ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª")
                    continue

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                if await self._validate_signal(signal):
                    await self._execute_signal(signal)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def _validate_signal(self, signal: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal.get("symbol")
            side = signal.get("side")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.client.get_balance()

            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            current_price = signal.get("price", 0)
            max_size = self.margin_calculator.calculate_max_position_size(
                balance, current_price
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            min_size = self.scalping_config.min_position_size
            if max_size < min_size:
                logger.warning(
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {max_size:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_size:.6f}"
                )
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Slippage Guard
            (
                is_valid,
                reason,
            ) = await self.slippage_guard.validate_order_before_placement(
                symbol=symbol,
                side=side,
                order_type="market",
                price=None,
                size=max_size,
                client=self.client,
            )

            if not is_valid:
                logger.warning(f"–°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {reason}")
                return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    async def _execute_signal(self, signal: Dict[str, Any]):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal.get("symbol")
            side = signal.get("side")
            strength = signal.get("strength", 0)

            logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {symbol} {side} (—Å–∏–ª–∞: {strength:.2f})")

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            balance = await self.client.get_balance()
            current_price = signal.get("price", 0)

            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            risk_percentage = self.scalping_config.base_risk_percentage * strength
            position_size = self.margin_calculator.calculate_optimal_position_size(
                balance, current_price, risk_percentage
            )

            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = await self.order_executor.execute_signal(signal, position_size)

            if result.get("success"):
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {symbol} {side} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω")
            else:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {result.get('error')}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            for symbol, position in self.active_positions.items():
                await self.position_manager.manage_position(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")

    async def _update_performance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self.performance_tracker.update_stats(self.active_positions)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def _on_liquidation_warning(
        self,
        level: str,
        symbol: str,
        side: str,
        margin_ratio: float,
        details: Dict[str, Any],
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
        try:
            if level == "critical":
                logger.critical(
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {symbol} {side} - –º–∞—Ä–∂–∞: {margin_ratio:.1f}%"
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
                await self._emergency_actions(symbol, side)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")

    async def _emergency_close_all_positions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô!")

            for symbol, position in self.active_positions.items():
                await self.position_manager.emergency_close_position(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def _emergency_actions(self, symbol: str, side: str):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
            logger.critical(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {symbol} {side}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            balance = await self.client.get_balance()
            margin_status = await self.liquidation_guard.get_margin_status(
                self.client
            )
            slippage_stats = self.slippage_guard.get_slippage_statistics()

            return {
                "is_running": self.is_running,
                "balance": balance,
                "active_positions_count": len(self.active_positions),
                "margin_status": margin_status,
                "slippage_statistics": slippage_stats,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e), "timestamp": datetime.now().isoformat()}
