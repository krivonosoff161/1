"""
–¢–µ—Å—Ç Maker-First Strategy –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–º–∏—Å—Å–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç POST-ONLY –ø–æ–ø—ã—Ç–∫–∏ –∏ fallback –Ω–∞ MARKET
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(".")

from src.config import load_config
from src.models import OrderSide, OrderType
from src.okx_client import OKXClient


async def test_maker_vs_taker_commission():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∫–æ–º–∏—Å—Å–∏–π Maker vs Taker"""
    print("üí∞ –¢–ï–°–¢ –ö–û–ú–ò–°–°–ò–ô MAKER vs TAKER")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        ticker = await client.get_ticker("BTC-USDT")
        current_price = float(ticker.get("last", 0))

        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        test_value_usdt = 100.0  # $100
        test_quantity = test_value_usdt / current_price

        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price:.2f}")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${test_value_usdt} ({test_quantity:.8f} BTC)")

        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
        maker_commission = test_value_usdt * 0.0008  # 0.08%
        taker_commission = test_value_usdt * 0.001  # 0.10%
        commission_savings = taker_commission - maker_commission
        savings_percent = (commission_savings / taker_commission) * 100

        print(f"\nüí∏ –ö–æ–º–∏—Å—Å–∏–∏:")
        print(f"   Maker (POST-ONLY): ${maker_commission:.4f} (0.08%)")
        print(f"   Taker (MARKET): ${taker_commission:.4f} (0.10%)")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è: ${commission_savings:.4f} ({savings_percent:.1f}%)")

        # –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π
        print(f"\nüìà –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö:")
        sizes = [50, 100, 200, 500, 1000]
        for size in sizes:
            maker_fee = size * 0.0008
            taker_fee = size * 0.001
            savings = taker_fee - maker_fee
            print(
                f"   ${size:4d}: –≠–∫–æ–Ω–æ–º–∏—è ${savings:.4f} ({savings/size*100:.2f}% –æ—Ç –ø–æ–∑–∏—Ü–∏–∏)"
            )

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")


async def test_post_only_order():
    """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è POST-ONLY –æ—Ä–¥–µ—Ä–∞"""
    print("\nüéØ –¢–ï–°–¢ POST-ONLY –û–†–î–ï–†–ê")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await client.get_ticker("BTC-USDT")
        current_price = float(ticker.get("last", 0))

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è POST-ONLY (–Ω–µ–º–Ω–æ–≥–æ —Ö—É–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π)
        maker_price = current_price * 0.9995  # -0.05%
        test_quantity = 0.0001  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞

        print(f"üìä POST-ONLY –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        print(f"   POST-ONLY —Ü–µ–Ω–∞: ${maker_price:.2f}")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {test_quantity} BTC")
        print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–µ—Å—Ç –Ω–∞ –°–ê–ù–î–ë–û–ö–°–ï!")

        # –†–∞–∑–º–µ—â–∞–µ–º POST-ONLY –æ—Ä–¥–µ—Ä
        print(f"\nüöÄ –†–∞–∑–º–µ—â–µ–Ω–∏–µ POST-ONLY –æ—Ä–¥–µ—Ä–∞...")
        start_time = datetime.utcnow()

        order = await client.place_order(
            symbol="BTC-USDT",
            side=OrderSide.BUY,
            order_type=OrderType.LIMIT,
            quantity=test_quantity,
            price=maker_price,
            post_only=True,
        )

        order_time = (datetime.utcnow() - start_time).total_seconds() * 1000

        if order:
            print(f"   ‚úÖ POST-ONLY –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –∑–∞ {order_time:.1f} –º—Å")
            print(f"   Order ID: {order.id}")
            print(f"   Status: {order.status}")
            print(f"   Price: ${order.price}")
            print(f"   Commission: 0.08% (Maker)")
        else:
            print(f"   ‚ùå POST-ONLY –æ—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω –∑–∞ {order_time:.1f} –º—Å")
            print(
                f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Ü–µ–Ω–∞ –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"
            )

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ POST-ONLY: {e}")


async def test_maker_fallback():
    """–¢–µ—Å—Ç fallback —Å POST-ONLY –Ω–∞ MARKET"""
    print("\nüîÑ –¢–ï–°–¢ MAKER FALLBACK")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await client.get_ticker("BTC-USDT")
        current_price = float(ticker.get("last", 0))

        # –¢–µ—Å—Ç 1: POST-ONLY —Å –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π —Ü–µ–Ω–æ–π (–¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å)
        bad_price = current_price * 0.95  # -5% (—Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ä—ã–Ω–∫–∞)
        test_quantity = 0.0001

        print(f"üìä –¢–µ—Å—Ç —Å –Ω–µ–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π —Ü–µ–Ω–æ–π:")
        print(f"   –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        print(f"   POST-ONLY —Ü–µ–Ω–∞: ${bad_price:.2f} (-5%)")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: POST-ONLY –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å")

        start_time = datetime.utcnow()

        # –ü–æ–ø—ã—Ç–∫–∞ POST-ONLY
        post_only_order = await client.place_order(
            symbol="BTC-USDT",
            side=OrderSide.BUY,
            order_type=OrderType.LIMIT,
            quantity=test_quantity,
            price=bad_price,
            post_only=True,
        )

        post_only_time = (datetime.utcnow() - start_time).total_seconds() * 1000

        if not post_only_order:
            print(f"   ‚úÖ POST-ONLY —É–ø–∞–ª –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å –∑–∞ {post_only_time:.1f} –º—Å")

            # Fallback –Ω–∞ MARKET
            print(f"\nüîÑ Fallback –Ω–∞ MARKET...")
            start_time = datetime.utcnow()

            market_order = await client.place_order(
                symbol="BTC-USDT",
                side=OrderSide.BUY,
                order_type=OrderType.MARKET,
                quantity=test_quantity,
            )

            market_time = (datetime.utcnow() - start_time).total_seconds() * 1000

            if market_order:
                print(f"   ‚úÖ MARKET fallback —É—Å–ø–µ—à–µ–Ω –∑–∞ {market_time:.1f} –º—Å")
                print(f"   Order ID: {market_order.id}")
                print(f"   Commission: 0.10% (Taker)")
            else:
                print(f"   ‚ùå MARKET fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        else:
            print(
                f"   ‚ö†Ô∏è POST-ONLY –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω–∞ —Å—Ç–∞–ª–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π)"
            )

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ fallback: {e}")


async def test_commission_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π –≤ PositionManager"""
    print("\nüßÆ –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –ö–û–ú–ò–°–°–ò–ô")
    print("=" * 50)

    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = [
            {
                "entry_price": 50000.0,
                "exit_price": 50000.0,
                "size": 0.001,
                "description": "POST-ONLY (—Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)",
            },
            {
                "entry_price": 50000.0,
                "exit_price": 50010.0,
                "size": 0.001,
                "description": "MARKET (—Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)",
            },
            {
                "entry_price": 50000.0,
                "exit_price": 51000.0,
                "size": 0.001,
                "description": "MARKET (–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)",
            },
        ]

        for i, scenario in enumerate(scenarios, 1):
            entry_price = scenario["entry_price"]
            exit_price = scenario["exit_price"]
            size = scenario["size"]
            description = scenario["description"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø entry –æ—Ä–¥–µ—Ä–∞
            price_diff_pct = abs(exit_price - entry_price) / entry_price

            if price_diff_pct < 0.001:  # < 0.1% —Ä–∞–∑–Ω–∏—Ü–∞ = POST-ONLY
                open_commission_rate = 0.0008  # Maker
                entry_type = "POST-ONLY (Maker)"
            else:
                open_commission_rate = 0.001  # Taker
                entry_type = "MARKET (Taker)"

            close_commission_rate = 0.001  # Taker (–≤—Å–µ–≥–¥–∞ MARKET)

            # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
            open_value = size * entry_price
            close_value = size * exit_price
            open_commission = open_value * open_commission_rate
            close_commission = close_value * close_commission_rate
            total_commission = open_commission + close_commission

            print(f"üìä –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {description}")
            print(f"   Entry: ${entry_price:.2f} ‚Üí Exit: ${exit_price:.2f}")
            print(f"   Entry type: {entry_type}")
            print(
                f"   Open commission: ${open_commission:.4f} ({open_commission_rate*100:.2f}%)"
            )
            print(
                f"   Close commission: ${close_commission:.4f} ({close_commission_rate*100:.2f}%)"
            )
            print(f"   Total commission: ${total_commission:.4f}")
            print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MAKER-FIRST STRATEGY")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –ö–æ–º–∏—Å—Å–∏–∏
    await test_maker_vs_taker_commission()

    # –¢–µ—Å—Ç 2: POST-ONLY –æ—Ä–¥–µ—Ä
    await test_post_only_order()

    # –¢–µ—Å—Ç 3: Fallback
    await test_maker_fallback()

    # –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
    await test_commission_calculation()

    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MAKER STRATEGY –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
