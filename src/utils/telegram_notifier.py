"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è:
- Max consecutive losses
- Daily loss > 5%
- Emergency stop
- OCO failed
- Borrowed funds detected

–ò—Å—Ç–æ—á–Ω–∏–∫: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Perplexity AI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤.
"""

import asyncio
import os
from typing import Optional

from loguru import logger


class TelegramNotifier:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    def __init__(self, bot_token: Optional[str] = None, chat_id: Optional[str] = None):
        """
        Args:
            bot_token: Telegram Bot Token (–∏–ª–∏ –∏–∑ env)
            chat_id: Telegram Chat ID (–∏–ª–∏ –∏–∑ env)
        """
        self.bot_token = bot_token or os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = chat_id or os.getenv("TELEGRAM_CHAT_ID")

        if not self.bot_token or not self.chat_id:
            logger.warning("‚ö†Ô∏è Telegram not configured - alerts disabled")
            logger.warning("   Set TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID in .env")
            self.enabled = False
        else:
            self.enabled = True
            logger.info(
                f"‚úÖ Telegram Notifier initialized (Chat ID: {self.chat_id[:5]}***)"
            )

        self.api_url = (
            f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        )

    async def send_critical_alert(self, message: str, title: str = "CRITICAL ALERT"):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "CRITICAL ALERT")
        """
        if not self.enabled:
            logger.debug(f"Telegram disabled - alert not sent: {title}")
            return

        try:
            import aiohttp

            url = f"{self.api_url}/sendMessage"

            formatted_message = (
                f"üö® <b>{title}</b>\n\n"
                f"{message}\n\n"
                f"<i>{datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</i>"
            )

            data = {
                "chat_id": self.chat_id,
                "text": formatted_message,
                "parse_mode": "HTML",
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ Telegram alert sent: {title}")
                    else:
                        response_text = await response.text()
                        logger.warning(
                            f"‚ö†Ô∏è Telegram failed: {response.status} - {response_text}"
                        )

        except ImportError:
            logger.error("‚ùå aiohttp not installed - cannot send Telegram alerts")
            logger.error("   Install: pip install aiohttp")
            self.enabled = False

        except asyncio.TimeoutError:
            logger.warning("‚ö†Ô∏è Telegram timeout - message may not be delivered")

        except Exception as e:
            logger.error(f"‚ùå Telegram error: {e}")

    async def send_consecutive_losses_alert(self, count: int, max_count: int):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–∞—Ö.

        Args:
            count: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            max_count: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        message = (
            f"<b>Consecutive Losses Alert</b>\n\n"
            f"Losses: <b>{count}/{max_count}</b>\n"
            f"Bot stopped automatically!"
        )
        await self.send_critical_alert(message, "MAX CONSECUTIVE LOSSES")

    async def send_daily_loss_alert(
        self, loss_percent: float, limit_percent: float, balance: float
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —É–±—ã—Ç–∫–æ–≤.

        Args:
            loss_percent: –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–±—ã—Ç–∫–∞
            limit_percent: –õ–∏–º–∏—Ç
            balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        """
        message = (
            f"<b>Daily Loss Alert</b>\n\n"
            f"Loss: <b>{loss_percent:.2f}%</b> (limit: {limit_percent:.2f}%)\n"
            f"Balance: <b>${balance:.2f}</b>\n"
            f"Bot stopped automatically!"
        )
        await self.send_critical_alert(message, "DAILY LOSS LIMIT")

    async def send_emergency_stop_alert(self, reason: str):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.

        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        message = (
            f"<b>Emergency Stop Triggered</b>\n\n"
            f"Reason: <b>{reason}</b>\n"
            f"All positions closed!"
        )
        await self.send_critical_alert(message, "EMERGENCY STOP")

    async def send_oco_failed_alert(self, symbol: str, error: str):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ OCO –æ—Ä–¥–µ—Ä–∞.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        """
        message = (
            f"<b>OCO Order Failed</b>\n\n"
            f"Symbol: <b>{symbol}</b>\n"
            f"Error: {error}\n"
            f"Position opened without automatic TP/SL!"
        )
        await self.send_critical_alert(message, "OCO FAILED")

    async def send_borrowed_funds_alert(self, asset: str, amount: float):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–π–º–æ–≤.

        Args:
            asset: –í–∞–ª—é—Ç–∞
            amount: –†–∞–∑–º–µ—Ä –∑–∞–π–º–∞
        """
        message = (
            f"<b>BORROWED FUNDS DETECTED!</b>\n\n"
            f"Asset: <b>{asset}</b>\n"
            f"Amount: <b>{amount:.6f}</b>\n"
            f"Trading stopped immediately!\n"
            f"Please repay loan and switch to SPOT mode!"
        )
        await self.send_critical_alert(message, "BORROWED FUNDS")

    async def send_startup_notification(self, balance: float, symbols: list):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

        Args:
            balance: –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            symbols: –¢–æ—Ä–≥—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        """
        if not self.enabled:
            return

        message = (
            f"<b>Bot Started</b>\n\n"
            f"Balance: <b>${balance:.2f}</b>\n"
            f"Symbols: {', '.join(symbols)}\n"
            f"Mode: Scalping (Modular v2)"
        )
        await self.send_critical_alert(message, "BOT STARTED")

    async def send_daily_report(self, stats: dict):
        """
        –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç.

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        """
        if not self.enabled:
            return

        message = (
            f"<b>Daily Report</b>\n\n"
            f"Trades: <b>{stats.get('total_trades', 0)}</b>\n"
            f"Win Rate: <b>{stats.get('win_rate', 0):.1f}%</b>\n"
            f"Daily PnL: <b>${stats.get('daily_pnl', 0):.2f}</b>\n"
            f"Best Trade: ${stats.get('best_trade', 0):.2f}\n"
            f"Worst Trade: ${stats.get('worst_trade', 0):.2f}"
        )
        await self.send_critical_alert(message, "DAILY REPORT")


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
from datetime import datetime
