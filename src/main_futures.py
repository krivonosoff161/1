#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏.
–ó–∞–ø—É—Å–∫–∞–µ—Ç Futures –≤–µ—Ä—Å–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from loguru import logger

from src.config import BotConfig
from src.strategies.scalping.futures.orchestrator import \
    FuturesScalpingOrchestrator


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Futures –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = project_root / "config" / "config_futures.yaml"
        if not config_path.exists():
            logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            logger.info(
                "üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config/config_futures.yaml —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = BotConfig.from_yaml(str(config_path))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.api.key or config.api.key == "your_api_key_here":
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info(
                "üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config/config_futures.yaml –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Futures-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not hasattr(config, "futures") or not config.futures:
            logger.error("‚ùå Futures –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ config_futures.yaml –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è 'futures'")
            return

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö Futures —Ç–æ—Ä–≥–æ–≤–ª–∏
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Futures —Ç–æ—Ä–≥–æ–≤–ª—è —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏!")
        logger.warning(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ—Ç–µ—Ä—é –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å!"
        )
        logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å sandbox —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = FuturesScalpingOrchestrator(config)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await orchestrator.start()

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("‚úÖ Futures –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        "logs/futures/futures_main.log",
        level="DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        rotation="10 MB",
        retention="7 days",
        compression="zip",
    )

    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
