"""
Scalping trading strategy implementation
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import numpy as np
from loguru import logger

from src.config import RiskConfig, ScalpingConfig
# PHASE 1: Time-Based Filter
from src.filters.time_session_manager import (TimeFilterConfig,
                                              TimeSessionManager)
from src.indicators import (ATR, MACD, RSI, BollingerBands,
                            ExponentialMovingAverage, IndicatorManager,
                            SimpleMovingAverage, VolumeIndicator)
from src.models import (MarketData, OrderSide, OrderType, Position,
                        PositionSide, RiskMetrics, Signal, Tick)
from src.okx_client import OKXClient
# PHASE 1.5: Adaptive Regime Manager
from src.strategies.modules.adaptive_regime_manager import (
    AdaptiveRegimeManager, IndicatorParameters, ModuleParameters, RegimeConfig,
    RegimeParameters, RegimeType)
# PHASE 1: Balance Checker
from src.strategies.modules.balance_checker import (BalanceCheckConfig,
                                                    BalanceChecker)
# PHASE 1: Correlation Filter
from src.strategies.modules.correlation_filter import (CorrelationFilter,
                                                       CorrelationFilterConfig)
# PHASE 1: Multi-Timeframe Confirmation
from src.strategies.modules.multi_timeframe import (MTFConfig,
                                                    MultiTimeframeFilter)
# PHASE 1: Pivot Points
from src.strategies.modules.pivot_points import (PivotPointsConfig,
                                                 PivotPointsFilter)
# PHASE 1: Volatility Modes
from src.strategies.modules.volatility_adapter import (VolatilityAdapter,
                                                       VolatilityModeConfig)
# PHASE 1: Volume Profile
from src.strategies.modules.volume_profile_filter import (VolumeProfileConfig,
                                                          VolumeProfileFilter)


class ScalpingStrategy:
    """High-frequency scalping strategy"""

    def __init__(
        self, client: OKXClient, config: ScalpingConfig, risk_config: RiskConfig
    ) -> None:
        self.client = client
        self.config = config
        self.risk_config = risk_config
        self.strategy_id = "scalping_v1"

        # Strategy state
        self.active = config.enabled
        self.positions: Dict[str, Position] = {}
        self.pending_orders: Dict[str, str] = {}  # order_id -> symbol
        self.trade_count_hourly = 0
        self.last_trade_time = {}  # symbol -> datetime
        self.last_loss_time = {}  # symbol -> datetime

        # Performance tracking
        self.total_trades = 0
        self.winning_trades = 0
        self.daily_pnl = 0.0

        # üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.trade_history = []  # –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        self.max_history_size = 50  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–¥–µ–ª–æ–∫

        # API Rate Limiting (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤)
        self.api_requests_count = 0
        self.api_requests_window_start = datetime.utcnow()
        self.max_requests_per_minute = 100  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç (—É –Ω–∞—Å 30-120/–º–∏–Ω)
        self.max_drawdown = 0.0

        # üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ò–ï 1: Max consecutive losses –∑–∞—â–∏—Ç–∞
        self.consecutive_losses = 0
        self.max_consecutive_losses = 3  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 3 —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥

        # üí∞ –£–õ–£–ß–®–ï–ù–ò–ï 2: Daily profit lock
        self.daily_profit_target_percent = 5.0  # 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        self.profit_lock_enabled = True
        self.daily_start_balance = 0.0  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –§–ª–∞–≥ emergency close (–ø—Ä–æ—Ç–∏–≤ —Ä–µ–∫—É—Ä—Å–∏–∏)
        self._emergency_in_progress = False

        # üí∞ –ó–ê–©–ò–¢–ê: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
        self.min_close_value_usd = 30.0  # –ú–∏–Ω–∏–º—É–º $30 –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        self.min_order_value_usd = (
            30.0  # –ú–∏–Ω–∏–º—É–º $30 (–∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–ª—è –¥–µ–º–æ/–º–∞–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)
        )

        # üîí –£–õ–£–ß–®–ï–ù–ò–ï 3: Break-even stop
        self.breakeven_enabled = True
        self.breakeven_trigger_atr = 1.0  # –ü–µ—Ä–µ–≤–æ–¥–∏–º SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ 1 ATR –ø—Ä–∏–±—ã–ª–∏

        # üéØ –£–õ–£–ß–®–ï–ù–ò–ï 4: Scoring —Å–∏—Å—Ç–µ–º–∞
        self.scoring_enabled = True
        self.min_score_threshold = (
            7  # ‚úÖ –ë—ã–ª–æ: 9 - –ú–∏–Ω–∏–º—É–º 7 –±–∞–ª–ª–æ–≤ –∏–∑ 12 –¥–ª—è –≤—Ö–æ–¥–∞ (–±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤)
        )

        # üìà –£–õ–£–ß–®–ï–ù–ò–ï 5: Trailing Stop
        self.trailing_stop_enabled = True
        self.trailing_stop_activation_atr = 1.5  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ 1.5 ATR –ø—Ä–∏–±—ã–ª–∏
        self.trailing_stop_distance_atr = 0.8  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è trailing SL (0.8 ATR)

        # ‚è∞ –£–õ–£–ß–®–ï–ù–ò–ï 8: Session filtering
        self.session_filtering_enabled = True
        self.trade_overlaps_only = False  # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –¢–æ—Ä–≥–æ–≤–∞—Ç—å –≤–æ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        self.trading_sessions = {
            "asian": (0, 9),  # UTC 00:00-09:00
            "european": (7, 16),  # UTC 07:00-16:00
            "american": (13, 22),  # UTC 13:00-22:00
        }
        self.session_overlaps = [
            (7, 9),  # EUR-ASIA overlap (–≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
            (13, 16),  # EUR-USA overlap (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
        ]

        # üåä –£–õ–£–ß–®–ï–ù–ò–ï 9: Market Regime Detection
        # ‚ö†Ô∏è –£–°–¢–ê–†–ï–õ–û: –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ARM (Adaptive Regime Manager)
        # –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ False
        self.regime_detection_enabled = False
        self.high_volatility_threshold = 0.02
        self.trend_threshold = 0.05

        # üí∏ –£–õ–£–ß–®–ï–ù–ò–ï 10 (–ë–û–ù–£–°): Spread filter
        self.spread_filter_enabled = True
        self.max_spread_percent = 0.1  # –ú–∞–∫—Å–∏–º—É–º 0.1% —Å–ø—Ä–µ–¥

        # üéØ –£–õ–£–ß–®–ï–ù–ò–ï 6: Partial Take Profit (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≤—ã—Ö–æ–¥)
        self.partial_tp_enabled = True
        self.tp_levels = [
            {"percent": 0.5, "atr_multiplier": 1.5},  # 50% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 1.5 ATR
            {"percent": 0.3, "atr_multiplier": 2.5},  # 30% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 2.5 ATR
            {"percent": 0.2, "atr_multiplier": 4.0},  # 20% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 4.0 ATR
        ]
        self.position_partial_info: Dict[str, List[dict]] = {}  # –¢—Ä–µ–∫–∏–Ω–≥ —á–∞—Å—Ç–µ–π

        # Setup indicators
        self.indicators = self._setup_indicators()

        # Market data cache
        self.market_data_cache: Dict[str, MarketData] = {}

        # PHASE 1: Multi-Timeframe Confirmation Filter
        self.mtf_filter: Optional[MultiTimeframeFilter] = None
        if (
            hasattr(config, "multi_timeframe_enabled")
            and config.multi_timeframe_enabled
        ):
            mtf_config = MTFConfig(
                confirmation_timeframe=config.multi_timeframe.get(
                    "confirmation_timeframe", "5m"
                ),
                score_bonus=config.multi_timeframe.get("score_bonus", 2),
                block_opposite=config.multi_timeframe.get("block_opposite", True),
                ema_fast_period=config.multi_timeframe.get("ema_fast_period", 8),
                ema_slow_period=config.multi_timeframe.get("ema_slow_period", 21),
                cache_ttl_seconds=config.multi_timeframe.get("cache_ttl_seconds", 30),
            )
            self.mtf_filter = MultiTimeframeFilter(client, mtf_config)
            logger.info("üéØ MTF Filter enabled!")
        else:
            logger.info("‚ö™ MTF Filter disabled (enable in config.yaml)")

        # PHASE 1: Correlation Filter
        self.correlation_filter: Optional[CorrelationFilter] = None
        if (
            hasattr(config, "correlation_filter_enabled")
            and config.correlation_filter_enabled
        ):
            corr_filter_config = CorrelationFilterConfig(
                enabled=True,
                max_correlated_positions=config.correlation_filter.get(
                    "max_correlated_positions", 1
                ),
                correlation_threshold=config.correlation_filter.get(
                    "correlation_threshold", 0.7
                ),
                block_same_direction_only=config.correlation_filter.get(
                    "block_same_direction_only", True
                ),
            )
            self.correlation_filter = CorrelationFilter(
                client, corr_filter_config, config.symbols
            )
            logger.info("üîó Correlation Filter enabled!")
        else:
            logger.info("‚ö™ Correlation Filter disabled (enable in config.yaml)")

        # PHASE 1: Time-Based Filter
        self.time_filter: Optional[TimeSessionManager] = None
        if hasattr(config, "time_filter_enabled") and config.time_filter_enabled:
            time_filter_config = TimeFilterConfig(
                enabled=True,
                trade_asian_session=config.time_filter.get("trade_asian_session", True),
                trade_european_session=config.time_filter.get(
                    "trade_european_session", True
                ),
                trade_american_session=config.time_filter.get(
                    "trade_american_session", True
                ),
                prefer_overlaps=config.time_filter.get("prefer_overlaps", False),
                avoid_low_liquidity_hours=config.time_filter.get(
                    "avoid_low_liquidity_hours", True
                ),
                avoid_weekends=config.time_filter.get("avoid_weekends", True),
            )
            self.time_filter = TimeSessionManager(time_filter_config)
            logger.info("‚è∞ Time Filter enabled!")
        else:
            logger.info("‚ö™ Time Filter disabled (enable in config.yaml)")

        # PHASE 1: Volatility Modes
        self.volatility_adapter: Optional[VolatilityAdapter] = None
        if (
            hasattr(config, "volatility_modes_enabled")
            and config.volatility_modes_enabled
        ):
            vol_config = VolatilityModeConfig(
                enabled=True,
                low_volatility_threshold=config.volatility_modes.get(
                    "low_volatility_threshold", 0.01
                ),
                high_volatility_threshold=config.volatility_modes.get(
                    "high_volatility_threshold", 0.02
                ),
                low_vol_sl_multiplier=config.volatility_modes.get(
                    "low_vol_sl_multiplier", 1.5
                ),
                low_vol_tp_multiplier=config.volatility_modes.get(
                    "low_vol_tp_multiplier", 1.0
                ),
                low_vol_score_threshold=config.volatility_modes.get(
                    "low_vol_score_threshold", 6
                ),
                low_vol_position_size_multiplier=config.volatility_modes.get(
                    "low_vol_position_size_multiplier", 1.2
                ),
                normal_vol_sl_multiplier=config.volatility_modes.get(
                    "normal_vol_sl_multiplier", 2.5
                ),
                normal_vol_tp_multiplier=config.volatility_modes.get(
                    "normal_vol_tp_multiplier", 1.5
                ),
                normal_vol_score_threshold=config.volatility_modes.get(
                    "normal_vol_score_threshold", 7
                ),
                normal_vol_position_size_multiplier=config.volatility_modes.get(
                    "normal_vol_position_size_multiplier", 1.0
                ),
                high_vol_sl_multiplier=config.volatility_modes.get(
                    "high_vol_sl_multiplier", 3.5
                ),
                high_vol_tp_multiplier=config.volatility_modes.get(
                    "high_vol_tp_multiplier", 2.5
                ),
                high_vol_score_threshold=config.volatility_modes.get(
                    "high_vol_score_threshold", 8
                ),
                high_vol_position_size_multiplier=config.volatility_modes.get(
                    "high_vol_position_size_multiplier", 0.7
                ),
            )
            self.volatility_adapter = VolatilityAdapter(vol_config)
            logger.info("üìä Volatility Adapter enabled!")
        else:
            logger.info("‚ö™ Volatility Adapter disabled (enable in config.yaml)")

        # PHASE 1: Pivot Points
        self.pivot_filter: Optional[PivotPointsFilter] = None
        if hasattr(config, "pivot_points_enabled") and config.pivot_points_enabled:
            pivot_config = PivotPointsConfig(
                enabled=True,
                daily_timeframe=config.pivot_points.get("daily_timeframe", "1D"),
                use_last_n_days=config.pivot_points.get("use_last_n_days", 1),
                level_tolerance_percent=config.pivot_points.get(
                    "level_tolerance_percent", 0.003
                ),
                score_bonus_near_level=config.pivot_points.get(
                    "score_bonus_near_level", 1
                ),
                cache_ttl_seconds=config.pivot_points.get("cache_ttl_seconds", 3600),
            )
            self.pivot_filter = PivotPointsFilter(client, pivot_config)
            logger.info("üìç Pivot Points Filter enabled!")
        else:
            logger.info("‚ö™ Pivot Points Filter disabled (enable in config.yaml)")

        # PHASE 1: Volume Profile
        self.volume_profile_filter: Optional[VolumeProfileFilter] = None
        if hasattr(config, "volume_profile_enabled") and config.volume_profile_enabled:
            vp_config = VolumeProfileConfig(
                enabled=True,
                lookback_timeframe=config.volume_profile.get(
                    "lookback_timeframe", "1H"
                ),
                lookback_candles=config.volume_profile.get("lookback_candles", 100),
                price_buckets=config.volume_profile.get("price_buckets", 50),
                value_area_percent=config.volume_profile.get(
                    "value_area_percent", 70.0
                ),
                score_bonus_in_value_area=config.volume_profile.get(
                    "score_bonus_in_value_area", 1
                ),
                score_bonus_near_poc=config.volume_profile.get(
                    "score_bonus_near_poc", 1
                ),
                poc_tolerance_percent=config.volume_profile.get(
                    "poc_tolerance_percent", 0.005
                ),
                cache_ttl_seconds=config.volume_profile.get("cache_ttl_seconds", 600),
            )
            self.volume_profile_filter = VolumeProfileFilter(client, vp_config)
            logger.info("üìä Volume Profile Filter enabled!")
        else:
            logger.info("‚ö™ Volume Profile Filter disabled (enable in config.yaml)")

        # PHASE 1: Balance Checker
        self.balance_checker: Optional[BalanceChecker] = None
        if (
            hasattr(config, "balance_checker_enabled")
            and config.balance_checker_enabled
        ):
            balance_config = BalanceCheckConfig(
                enabled=True,
                usdt_reserve_percent=config.balance_checker.get(
                    "usdt_reserve_percent", 10.0
                ),
                min_asset_balance_usd=config.balance_checker.get(
                    "min_asset_balance_usd", 30.0
                ),
                min_usdt_balance=config.balance_checker.get("min_usdt_balance", 30.0),
                log_all_checks=config.balance_checker.get("log_all_checks", False),
            )
            self.balance_checker = BalanceChecker(balance_config)
            logger.info("üí∞ Balance Checker enabled!")
        else:
            logger.info("‚ö™ Balance Checker disabled (enable in config.yaml)")

        # PHASE 1.5: Adaptive Regime Manager
        self.adaptive_regime: Optional[AdaptiveRegimeManager] = None
        if (
            hasattr(config, "adaptive_regime_enabled")
            and config.adaptive_regime_enabled
        ):
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è TRENDING —Ä–µ–∂–∏–º–∞
            trending_indicators = IndicatorParameters(
                rsi_overbought=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("rsi_overbought", 75.0),
                rsi_oversold=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("rsi_oversold", 25.0),
                volume_threshold=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("volume_threshold", 1.05),
                sma_fast=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("sma_fast", 8),
                sma_slow=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("sma_slow", 25),
                atr_period=config.adaptive_regime.get("trending", {})
                .get("indicators", {})
                .get("atr_period", 14),
            )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π –¥–ª—è TRENDING —Ä–µ–∂–∏–º–∞
            trending_modules = ModuleParameters(
                mtf_block_opposite=config.adaptive_regime.get("trending", {})
                .get("modules", {})
                .get("multi_timeframe", {})
                .get("block_opposite", False),
                mtf_score_bonus=config.adaptive_regime["trending"]["modules"][
                    "multi_timeframe"
                ].get("score_bonus", 1),
                mtf_confirmation_timeframe=config.adaptive_regime["trending"][
                    "modules"
                ]["multi_timeframe"].get("confirmation_timeframe", "5m"),
                correlation_threshold=config.adaptive_regime["trending"]["modules"][
                    "correlation_filter"
                ].get("correlation_threshold", 0.8),
                max_correlated_positions=config.adaptive_regime["trending"]["modules"][
                    "correlation_filter"
                ].get("max_correlated_positions", 3),
                block_same_direction_only=config.adaptive_regime["trending"]["modules"][
                    "correlation_filter"
                ].get("block_same_direction_only", False),
                prefer_overlaps=config.adaptive_regime["trending"]["modules"][
                    "time_filter"
                ].get("prefer_overlaps", True),
                avoid_low_liquidity_hours=config.adaptive_regime["trending"]["modules"][
                    "time_filter"
                ].get("avoid_low_liquidity_hours", False),
                avoid_weekends=config.adaptive_regime["trending"]["modules"][
                    "time_filter"
                ].get("avoid_weekends", True),
                pivot_level_tolerance_percent=config.adaptive_regime["trending"][
                    "modules"
                ]["pivot_points"].get("level_tolerance_percent", 0.4),
                pivot_score_bonus_near_level=config.adaptive_regime["trending"][
                    "modules"
                ]["pivot_points"].get("score_bonus_near_level", 1),
                pivot_use_last_n_days=config.adaptive_regime["trending"]["modules"][
                    "pivot_points"
                ].get("use_last_n_days", 3),
                vp_score_bonus_in_value_area=config.adaptive_regime["trending"][
                    "modules"
                ]["volume_profile"].get("score_bonus_in_value_area", 1),
                vp_score_bonus_near_poc=config.adaptive_regime["trending"]["modules"][
                    "volume_profile"
                ].get("score_bonus_near_poc", 1),
                vp_poc_tolerance_percent=config.adaptive_regime["trending"]["modules"][
                    "volume_profile"
                ].get("poc_tolerance_percent", 0.4),
                vp_lookback_candles=config.adaptive_regime["trending"]["modules"][
                    "volume_profile"
                ].get("lookback_candles", 100),
            )

            trending_params = RegimeParameters(
                min_score_threshold=config.adaptive_regime["trending"].get(
                    "min_score_threshold", 6
                ),
                max_trades_per_hour=config.adaptive_regime["trending"].get(
                    "max_trades_per_hour", 20
                ),
                position_size_multiplier=config.adaptive_regime["trending"].get(
                    "position_size_multiplier", 1.2
                ),
                tp_atr_multiplier=config.adaptive_regime["trending"].get(
                    "tp_atr_multiplier", 2.0
                ),
                sl_atr_multiplier=config.adaptive_regime["trending"].get(
                    "sl_atr_multiplier", 2.0
                ),
                cooldown_after_loss_minutes=config.adaptive_regime["trending"].get(
                    "cooldown_after_loss_minutes", 2
                ),
                pivot_bonus_multiplier=config.adaptive_regime["trending"].get(
                    "pivot_bonus_multiplier", 1.0
                ),
                volume_profile_bonus_multiplier=config.adaptive_regime["trending"].get(
                    "volume_profile_bonus_multiplier", 1.0
                ),
                indicators=trending_indicators,
                modules=trending_modules,
            )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è RANGING —Ä–µ–∂–∏–º–∞
            ranging_indicators = IndicatorParameters(
                rsi_overbought=config.adaptive_regime["ranging"]["indicators"].get(
                    "rsi_overbought", 70.0
                ),
                rsi_oversold=config.adaptive_regime["ranging"]["indicators"].get(
                    "rsi_oversold", 30.0
                ),
                volume_threshold=config.adaptive_regime["ranging"]["indicators"].get(
                    "volume_threshold", 1.1
                ),
                sma_fast=config.adaptive_regime["ranging"]["indicators"].get(
                    "sma_fast", 10
                ),
                sma_slow=config.adaptive_regime["ranging"]["indicators"].get(
                    "sma_slow", 30
                ),
                atr_period=config.adaptive_regime["ranging"]["indicators"].get(
                    "atr_period", 14
                ),
            )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π –¥–ª—è RANGING —Ä–µ–∂–∏–º–∞
            ranging_modules = ModuleParameters(
                mtf_block_opposite=config.adaptive_regime["ranging"]["modules"][
                    "multi_timeframe"
                ].get("block_opposite", True),
                mtf_score_bonus=config.adaptive_regime["ranging"]["modules"][
                    "multi_timeframe"
                ].get("score_bonus", 2),
                mtf_confirmation_timeframe=config.adaptive_regime["ranging"]["modules"][
                    "multi_timeframe"
                ].get("confirmation_timeframe", "5m"),
                correlation_threshold=config.adaptive_regime["ranging"]["modules"][
                    "correlation_filter"
                ].get("correlation_threshold", 0.7),
                max_correlated_positions=config.adaptive_regime["ranging"]["modules"][
                    "correlation_filter"
                ].get("max_correlated_positions", 2),
                block_same_direction_only=config.adaptive_regime["ranging"]["modules"][
                    "correlation_filter"
                ].get("block_same_direction_only", True),
                prefer_overlaps=config.adaptive_regime["ranging"]["modules"][
                    "time_filter"
                ].get("prefer_overlaps", True),
                avoid_low_liquidity_hours=config.adaptive_regime["ranging"]["modules"][
                    "time_filter"
                ].get("avoid_low_liquidity_hours", True),
                avoid_weekends=config.adaptive_regime["ranging"]["modules"][
                    "time_filter"
                ].get("avoid_weekends", True),
                pivot_level_tolerance_percent=config.adaptive_regime["ranging"][
                    "modules"
                ]["pivot_points"].get("level_tolerance_percent", 0.25),
                pivot_score_bonus_near_level=config.adaptive_regime["ranging"][
                    "modules"
                ]["pivot_points"].get("score_bonus_near_level", 2),
                pivot_use_last_n_days=config.adaptive_regime["ranging"]["modules"][
                    "pivot_points"
                ].get("use_last_n_days", 5),
                vp_score_bonus_in_value_area=config.adaptive_regime["ranging"][
                    "modules"
                ]["volume_profile"].get("score_bonus_in_value_area", 2),
                vp_score_bonus_near_poc=config.adaptive_regime["ranging"]["modules"][
                    "volume_profile"
                ].get("score_bonus_near_poc", 2),
                vp_poc_tolerance_percent=config.adaptive_regime["ranging"]["modules"][
                    "volume_profile"
                ].get("poc_tolerance_percent", 0.25),
                vp_lookback_candles=config.adaptive_regime["ranging"]["modules"][
                    "volume_profile"
                ].get("lookback_candles", 200),
            )

            ranging_params = RegimeParameters(
                min_score_threshold=config.adaptive_regime["ranging"].get(
                    "min_score_threshold", 8
                ),
                max_trades_per_hour=config.adaptive_regime["ranging"].get(
                    "max_trades_per_hour", 10
                ),
                position_size_multiplier=config.adaptive_regime["ranging"].get(
                    "position_size_multiplier", 1.0
                ),
                tp_atr_multiplier=config.adaptive_regime["ranging"].get(
                    "tp_atr_multiplier", 1.5
                ),
                sl_atr_multiplier=config.adaptive_regime["ranging"].get(
                    "sl_atr_multiplier", 2.5
                ),
                cooldown_after_loss_minutes=config.adaptive_regime["ranging"].get(
                    "cooldown_after_loss_minutes", 5
                ),
                pivot_bonus_multiplier=config.adaptive_regime["ranging"].get(
                    "pivot_bonus_multiplier", 1.5
                ),
                volume_profile_bonus_multiplier=config.adaptive_regime["ranging"].get(
                    "volume_profile_bonus_multiplier", 1.5
                ),
                indicators=ranging_indicators,
                modules=ranging_modules,
            )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è CHOPPY —Ä–µ–∂–∏–º–∞
            choppy_indicators = IndicatorParameters(
                rsi_overbought=config.adaptive_regime["choppy"]["indicators"].get(
                    "rsi_overbought", 65.0
                ),
                rsi_oversold=config.adaptive_regime["choppy"]["indicators"].get(
                    "rsi_oversold", 35.0
                ),
                volume_threshold=config.adaptive_regime["choppy"]["indicators"].get(
                    "volume_threshold", 1.25
                ),
                sma_fast=config.adaptive_regime["choppy"]["indicators"].get(
                    "sma_fast", 12
                ),
                sma_slow=config.adaptive_regime["choppy"]["indicators"].get(
                    "sma_slow", 35
                ),
                atr_period=config.adaptive_regime["choppy"]["indicators"].get(
                    "atr_period", 21
                ),
            )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π –¥–ª—è CHOPPY —Ä–µ–∂–∏–º–∞
            choppy_modules = ModuleParameters(
                mtf_block_opposite=config.adaptive_regime["choppy"]["modules"][
                    "multi_timeframe"
                ].get("block_opposite", True),
                mtf_score_bonus=config.adaptive_regime["choppy"]["modules"][
                    "multi_timeframe"
                ].get("score_bonus", 3),
                mtf_confirmation_timeframe=config.adaptive_regime["choppy"]["modules"][
                    "multi_timeframe"
                ].get("confirmation_timeframe", "15m"),
                correlation_threshold=config.adaptive_regime["choppy"]["modules"][
                    "correlation_filter"
                ].get("correlation_threshold", 0.6),
                max_correlated_positions=config.adaptive_regime["choppy"]["modules"][
                    "correlation_filter"
                ].get("max_correlated_positions", 1),
                block_same_direction_only=config.adaptive_regime["choppy"]["modules"][
                    "correlation_filter"
                ].get("block_same_direction_only", True),
                prefer_overlaps=config.adaptive_regime["choppy"]["modules"][
                    "time_filter"
                ].get("prefer_overlaps", True),
                avoid_low_liquidity_hours=config.adaptive_regime["choppy"]["modules"][
                    "time_filter"
                ].get("avoid_low_liquidity_hours", True),
                avoid_weekends=config.adaptive_regime["choppy"]["modules"][
                    "time_filter"
                ].get("avoid_weekends", True),
                pivot_level_tolerance_percent=config.adaptive_regime["choppy"][
                    "modules"
                ]["pivot_points"].get("level_tolerance_percent", 0.15),
                pivot_score_bonus_near_level=config.adaptive_regime["choppy"][
                    "modules"
                ]["pivot_points"].get("score_bonus_near_level", 3),
                pivot_use_last_n_days=config.adaptive_regime["choppy"]["modules"][
                    "pivot_points"
                ].get("use_last_n_days", 7),
                vp_score_bonus_in_value_area=config.adaptive_regime["choppy"][
                    "modules"
                ]["volume_profile"].get("score_bonus_in_value_area", 3),
                vp_score_bonus_near_poc=config.adaptive_regime["choppy"]["modules"][
                    "volume_profile"
                ].get("score_bonus_near_poc", 3),
                vp_poc_tolerance_percent=config.adaptive_regime["choppy"]["modules"][
                    "volume_profile"
                ].get("poc_tolerance_percent", 0.15),
                vp_lookback_candles=config.adaptive_regime["choppy"]["modules"][
                    "volume_profile"
                ].get("lookback_candles", 300),
            )

            choppy_params = RegimeParameters(
                min_score_threshold=config.adaptive_regime["choppy"].get(
                    "min_score_threshold", 10
                ),
                max_trades_per_hour=config.adaptive_regime["choppy"].get(
                    "max_trades_per_hour", 4
                ),
                position_size_multiplier=config.adaptive_regime["choppy"].get(
                    "position_size_multiplier", 0.5
                ),
                tp_atr_multiplier=config.adaptive_regime["choppy"].get(
                    "tp_atr_multiplier", 1.0
                ),
                sl_atr_multiplier=config.adaptive_regime["choppy"].get(
                    "sl_atr_multiplier", 3.5
                ),
                cooldown_after_loss_minutes=config.adaptive_regime["choppy"].get(
                    "cooldown_after_loss_minutes", 15
                ),
                pivot_bonus_multiplier=config.adaptive_regime["choppy"].get(
                    "pivot_bonus_multiplier", 2.0
                ),
                volume_profile_bonus_multiplier=config.adaptive_regime["choppy"].get(
                    "volume_profile_bonus_multiplier", 2.0
                ),
                indicators=choppy_indicators,
                modules=choppy_modules,
            )

            arm_config = RegimeConfig(
                enabled=True,
                trending_adx_threshold=config.adaptive_regime.get(
                    "trending_adx_threshold", 25.0
                ),
                ranging_adx_threshold=config.adaptive_regime.get(
                    "ranging_adx_threshold", 20.0
                ),
                high_volatility_threshold=config.adaptive_regime.get(
                    "high_volatility_threshold", 0.05
                ),
                low_volatility_threshold=config.adaptive_regime.get(
                    "low_volatility_threshold", 0.02
                ),
                trend_strength_percent=config.adaptive_regime.get(
                    "trend_strength_percent", 2.0
                ),
                min_regime_duration_minutes=config.adaptive_regime.get(
                    "min_regime_duration_minutes", 15
                ),
                required_confirmations=config.adaptive_regime.get(
                    "required_confirmations", 3
                ),
                trending_params=trending_params,
                ranging_params=ranging_params,
                choppy_params=choppy_params,
            )
            self.adaptive_regime = AdaptiveRegimeManager(arm_config)
            logger.info("üß† Adaptive Regime Manager enabled!")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            initial_regime_params = self.adaptive_regime.get_current_parameters()
            self.current_indicator_params = initial_regime_params.indicators
            self.current_module_params = initial_regime_params.modules
            self.current_regime_type = self.adaptive_regime.current_regime
            logger.info(
                f"üìä Initial regime parameters loaded: {self.current_regime_type.value.upper()}"
            )
        else:
            logger.info("‚ö™ ARM disabled (enable in config.yaml)")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º Partial TP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if hasattr(config, "partial_tp_enabled") and config.partial_tp_enabled:
            self.partial_tp_enabled = True
            if hasattr(config, "partial_tp_levels"):
                self.tp_levels = [
                    {
                        "percent": level.get("percent", 50) / 100.0,
                        "atr_multiplier": level.get("atr_multiplier", 1.5),
                    }
                    for level in config.partial_tp_levels
                ]
            logger.info(
                f"üìä Partial TP enabled: {len(self.tp_levels)} levels configured"
            )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.current_indicator_params = None
        self.current_module_params = None
        self.current_regime_type = None
        self.regime_switches = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤

        logger.info(f"Scalping strategy initialized for symbols: {config.symbols}")

    def _setup_indicators(self) -> IndicatorManager:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è:
        - –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (SMA –∏ EMA)
        - RSI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        - ATR –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        - Bollinger Bands –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Ü–µ–Ω—ã
        - Volume –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è

        Returns:
            IndicatorManager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        manager = IndicatorManager()

        # Moving Averages
        manager.add_indicator(
            "SMA_FAST", SimpleMovingAverage(self.config.indicators.sma_fast)
        )
        manager.add_indicator(
            "SMA_SLOW", SimpleMovingAverage(self.config.indicators.sma_slow)
        )
        manager.add_indicator(
            "EMA_FAST", ExponentialMovingAverage(self.config.indicators.ema_fast)
        )
        manager.add_indicator(
            "EMA_SLOW", ExponentialMovingAverage(self.config.indicators.ema_slow)
        )

        # Momentum indicators
        manager.add_indicator(
            "RSI",
            RSI(
                self.config.indicators.rsi_period,
                self.config.entry.rsi_overbought,
                self.config.entry.rsi_oversold,
            ),
        )

        # Volatility indicators
        manager.add_indicator("ATR", ATR(self.config.indicators.atr_period))
        manager.add_indicator(
            "BB",
            BollingerBands(
                self.config.indicators.bollinger_period,
                self.config.indicators.bollinger_std,
            ),
        )

        # Volume indicator
        manager.add_indicator(
            "VOLUME", VolumeIndicator(20, self.config.entry.volume_threshold)
        )

        # üìä –£–õ–£–ß–®–ï–ù–ò–ï 7: MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        manager.add_indicator(
            "MACD", MACD(fast_period=12, slow_period=26, signal_period=9)
        )

        return manager

    async def update_indicator_parameters(
        self, indicator_params: IndicatorParameters
    ) -> None:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.

        Args:
            indicator_params: –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        try:
            logger.info("üîÑ Updating indicator parameters...")

            # –û–±–Ω–æ–≤–ª—è–µ–º RSI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (
                hasattr(self.indicators, "indicators")
                and "RSI" in self.indicators.indicators
            ):
                rsi_indicator = self.indicators.indicators["RSI"]
                rsi_indicator.overbought_level = indicator_params.rsi_overbought
                rsi_indicator.oversold_level = indicator_params.rsi_oversold
                logger.debug(
                    f"   RSI levels: {indicator_params.rsi_oversold}/{indicator_params.rsi_overbought}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º Volume threshold
            if (
                hasattr(self.indicators, "indicators")
                and "VOLUME" in self.indicators.indicators
            ):
                volume_indicator = self.indicators.indicators["VOLUME"]
                volume_indicator.threshold = indicator_params.volume_threshold
                logger.debug(
                    f"   Volume threshold: {indicator_params.volume_threshold}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º ATR –ø–µ—Ä–∏–æ–¥ (—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)
            if (
                hasattr(self.indicators, "indicators")
                and "ATR" in self.indicators.indicators
            ):
                current_atr = self.indicators.indicators["ATR"]
                if current_atr.period != indicator_params.atr_period:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ATR —Å –Ω–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                    new_atr = ATR(indicator_params.atr_period)
                    self.indicators.indicators["ATR"] = new_atr
                    logger.debug(
                        f"   ‚úÖ ATR period updated: {current_atr.period} ‚Üí {indicator_params.atr_period}"
                    )

            # –û–±–Ω–æ–≤–ª—è–µ–º SMA –ø–µ—Ä–∏–æ–¥—ã (—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
            if hasattr(self.indicators, "indicators"):
                # SMA Fast
                if "SMA_FAST" in self.indicators.indicators:
                    current_sma = self.indicators.indicators["SMA_FAST"]
                    if current_sma.period != indicator_params.sma_fast:
                        new_sma = SimpleMovingAverage(indicator_params.sma_fast)
                        self.indicators.indicators["SMA_FAST"] = new_sma
                        logger.debug(
                            f"   ‚úÖ SMA Fast period updated: {current_sma.period} ‚Üí {indicator_params.sma_fast}"
                        )

                # SMA Slow
                if "SMA_SLOW" in self.indicators.indicators:
                    current_sma = self.indicators.indicators["SMA_SLOW"]
                    if current_sma.period != indicator_params.sma_slow:
                        new_sma = SimpleMovingAverage(indicator_params.sma_slow)
                        self.indicators.indicators["SMA_SLOW"] = new_sma
                        logger.debug(
                            f"   ‚úÖ SMA Slow period updated: {current_sma.period} ‚Üí {indicator_params.sma_slow}"
                        )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∫–æ—Ä–∏–Ω–≥–µ
            self.current_indicator_params = indicator_params

            logger.info("‚úÖ Indicator parameters updated successfully")

        except Exception as e:
            logger.error(f"‚ùå Error updating indicator parameters: {e}")
            raise

    async def update_module_parameters(self, module_params: ModuleParameters) -> None:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.

        Args:
            module_params: –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π
        """
        try:
            logger.info("üîÑ Updating module parameters...")

            # –û–±–Ω–æ–≤–ª—è–µ–º MTF –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, "mtf_filter") and self.mtf_filter:
                self.mtf_filter.config.block_opposite = module_params.mtf_block_opposite
                self.mtf_filter.config.score_bonus = module_params.mtf_score_bonus
                self.mtf_filter.config.confirmation_timeframe = (
                    module_params.mtf_confirmation_timeframe
                )
                logger.debug(
                    f"   MTF: block_opposite={module_params.mtf_block_opposite}, bonus={module_params.mtf_score_bonus}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º Correlation Filter –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, "correlation_filter") and self.correlation_filter:
                self.correlation_filter.config.correlation_threshold = (
                    module_params.correlation_threshold
                )
                self.correlation_filter.config.max_correlated_positions = (
                    module_params.max_correlated_positions
                )
                self.correlation_filter.config.block_same_direction_only = (
                    module_params.block_same_direction_only
                )
                logger.debug(
                    f"   Correlation: threshold={module_params.correlation_threshold}, max_positions={module_params.max_correlated_positions}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º Time Filter –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, "time_filter") and self.time_filter:
                self.time_filter.config.prefer_overlaps = module_params.prefer_overlaps
                self.time_filter.config.avoid_low_liquidity_hours = (
                    module_params.avoid_low_liquidity_hours
                )
                if hasattr(module_params, "avoid_weekends"):
                    self.time_filter.config.avoid_weekends = (
                        module_params.avoid_weekends
                    )
                logger.debug(
                    f"   Time Filter: prefer_overlaps={module_params.prefer_overlaps}, avoid_low_liquidity={module_params.avoid_low_liquidity_hours}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º Pivot Points –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, "pivot_filter") and self.pivot_filter:
                self.pivot_filter.config.level_tolerance_percent = (
                    module_params.pivot_level_tolerance_percent
                )
                self.pivot_filter.config.score_bonus_near_level = (
                    module_params.pivot_score_bonus_near_level
                )
                self.pivot_filter.config.use_last_n_days = (
                    module_params.pivot_use_last_n_days
                )
                logger.debug(
                    f"   Pivot Points: tolerance={module_params.pivot_level_tolerance_percent}%, bonus={module_params.pivot_score_bonus_near_level}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º Volume Profile –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, "volume_profile_filter") and self.volume_profile_filter:
                self.volume_profile_filter.config.score_bonus_in_value_area = (
                    module_params.vp_score_bonus_in_value_area
                )
                self.volume_profile_filter.config.score_bonus_near_poc = (
                    module_params.vp_score_bonus_near_poc
                )
                self.volume_profile_filter.config.poc_tolerance_percent = (
                    module_params.vp_poc_tolerance_percent
                )
                self.volume_profile_filter.config.lookback_candles = (
                    module_params.vp_lookback_candles
                )
                logger.debug(
                    f"   Volume Profile: value_area_bonus={module_params.vp_score_bonus_in_value_area}, poc_bonus={module_params.vp_score_bonus_near_poc}"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.current_module_params = module_params

            logger.info("‚úÖ Module parameters updated successfully")

        except Exception as e:
            logger.error(f"‚ùå Error updating module parameters: {e}")
            raise

    async def switch_regime_parameters(self, regime_type: RegimeType) -> None:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

        Args:
            regime_type: –ù–æ–≤—ã–π —Ç–∏–ø —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
        """
        try:
            if not hasattr(self, "adaptive_regime") or not self.adaptive_regime:
                logger.warning("‚ö†Ô∏è ARM not available, cannot switch regime parameters")
                return

            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info("üîÑ REGIME TRANSITION STARTED")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(
                f"   Old regime: {self.current_regime_type.value.upper() if self.current_regime_type else 'N/A'}"
            )
            logger.info(f"   New regime: {regime_type.value.upper()}")

            # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            open_positions_count = len(self.positions)
            if open_positions_count > 0:
                logger.info(f"üìä Found {open_positions_count} open positions:")
                for symbol, position in self.positions.items():
                    logger.info(
                        f"   {symbol}: {position.side} | Size: {position.size} | Entry: ${position.entry_price:.2f}"
                    )
                logger.info(
                    "   ‚úÖ Keeping existing positions with current TP/SL (no changes on the fly)"
                )
            else:
                logger.info("üìä No open positions found")

            # –≠–¢–ê–ü 2: –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            regime_params = self.adaptive_regime.get_current_parameters()

            logger.info(f"‚öôÔ∏è Loading {regime_type.value.upper()} regime parameters...")

            # –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.info("   üîß Updating indicator parameters...")
            await self.update_indicator_parameters(regime_params.indicators)

            # –≠–¢–ê–ü 4: –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π
            logger.info("   üîß Updating module parameters...")
            await self.update_module_parameters(regime_params.modules)

            # –≠–¢–ê–ü 5: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            logger.info("   üîß Updating trading parameters...")
            old_regime_type = self.current_regime_type
            self.current_regime_type = regime_type

            # –≠–¢–ê–ü 6: –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.info("üìã Parameter changes:")
            if old_regime_type and hasattr(
                self.adaptive_regime.config, f"{old_regime_type.value}_params"
            ):
                old_params = getattr(
                    self.adaptive_regime.config, f"{old_regime_type.value}_params"
                )
                logger.info(
                    f"   Score threshold: {old_params.min_score_threshold} ‚Üí {regime_params.min_score_threshold}"
                )
                logger.info(
                    f"   Max trades/hour: {old_params.max_trades_per_hour} ‚Üí {regime_params.max_trades_per_hour}"
                )
                logger.info(
                    f"   Position multiplier: {old_params.position_size_multiplier}x ‚Üí {regime_params.position_size_multiplier}x"
                )
                logger.info(
                    f"   TP multiplier: {old_params.tp_atr_multiplier} ‚Üí {regime_params.tp_atr_multiplier} ATR"
                )
                logger.info(
                    f"   SL multiplier: {old_params.sl_atr_multiplier} ‚Üí {regime_params.sl_atr_multiplier} ATR"
                )

                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                if hasattr(old_params, "indicators"):
                    logger.info(
                        f"   RSI levels: {old_params.indicators.rsi_oversold}/{old_params.indicators.rsi_overbought} ‚Üí {regime_params.indicators.rsi_oversold}/{regime_params.indicators.rsi_overbought}"
                    )
                    logger.info(
                        f"   Volume threshold: {old_params.indicators.volume_threshold} ‚Üí {regime_params.indicators.volume_threshold}"
                    )
                    logger.info(
                        f"   SMA periods: {old_params.indicators.sma_fast}/{old_params.indicators.sma_slow} ‚Üí {regime_params.indicators.sma_fast}/{regime_params.indicators.sma_slow}"
                    )

            # –≠–¢–ê–ü 7: –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            logger.info("üîÑ Transition state management:")
            logger.info("   ‚úÖ Existing positions: Keep current TP/SL")
            logger.info("   ‚úÖ New positions: Use new regime parameters")
            logger.info(f"   ‚úÖ Cooldowns: Preserved from previous regime")

            # –≠–¢–ê–ü 8: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
            if not hasattr(self, "regime_switches"):
                self.regime_switches = {}

            transition_key = f"{old_regime_type.value if old_regime_type else 'initial'}_to_{regime_type.value}"
            self.regime_switches[transition_key] = (
                self.regime_switches.get(transition_key, 0) + 1
            )

            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"‚úÖ REGIME TRANSITION COMPLETED: {regime_type.value.upper()}")
            logger.info(
                f"   Transition count: {self.regime_switches.get(transition_key, 1)}"
            )
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

        except Exception as e:
            logger.error(f"‚ùå Error during regime transition: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º
            if hasattr(self, "current_regime_type") and old_regime_type:
                self.current_regime_type = old_regime_type
                logger.error(
                    f"üîÑ Reverted to previous regime: {old_regime_type.value.upper()}"
                )
            raise

    def log_regime_statistics(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤."""
        if not hasattr(self, "regime_switches") or not self.regime_switches:
            logger.info("üìä No regime switches recorded")
            return

        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info("üìä REGIME SWITCHING STATISTICS")
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

        total_switches = sum(self.regime_switches.values())
        logger.info(f"   Total regime switches: {total_switches}")

        for transition, count in sorted(self.regime_switches.items()):
            percentage = (count / total_switches) * 100 if total_switches > 0 else 0
            logger.info(f"   {transition}: {count} times ({percentage:.1f}%)")

        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if self.regime_switches:
            most_common = max(self.regime_switches.items(), key=lambda x: x[1])
            logger.info(
                f"   Most common transition: {most_common[0]} ({most_common[1]} times)"
            )

        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    async def run(self) -> None:
        """Main strategy execution loop"""
        logger.info("Starting scalping strategy")

        try:
            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (SPOT —Ç–æ–ª—å–∫–æ!)
            try:
                account_config = await self.client.get_account_config()
                acct_level = account_config.get("acctLv", "1")

                if acct_level != "1":  # '1' = Simple (SPOT only)
                    logger.error(
                        f"‚õî MARGIN MODE DETECTED (acctLv={acct_level})! "
                        f"This bot is designed for SPOT trading ONLY!"
                    )
                    logger.error(
                        "üìã INSTRUCTIONS TO FIX:"
                        "\n  1. Go to OKX ‚Üí Settings ‚Üí Trading Preferences"
                        "\n  2. Set Portfolio Mode to 'Simple' or 'SPOT'"
                        "\n  3. Repay all borrowed funds (if any)"
                        "\n  4. Restart bot"
                    )
                    raise ValueError("Bot cannot start in MARGIN mode! Switch to SPOT!")

                logger.info("‚úÖ Trading mode verified: SPOT (Simple)")
            except ValueError:
                raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ä–µ–∂–∏–º–∞ –¥–∞–ª—å—à–µ
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not verify trading mode: {e}")
                logger.warning("‚ö†Ô∏è Assuming SPOT mode - VERIFY MANUALLY on exchange!")

            # üí∞ –£–õ–£–ß–®–ï–ù–ò–ï 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è daily profit lock
            balances = await self.client.get_account_balance()
            if balances:
                self.daily_start_balance = sum(b.total for b in balances)
                logger.info(f"üíº Daily start balance: ${self.daily_start_balance:.2f}")

            # Create tasks for each symbol
            tasks = []
            for symbol in self.config.symbols:
                task = asyncio.create_task(self._trade_symbol(symbol))
                tasks.append(task)

            # Add monitoring task
            monitor_task = asyncio.create_task(self._monitor_positions())
            tasks.append(monitor_task)

            # Wait for all tasks
            await asyncio.gather(*tasks)

        except Exception as e:
            logger.error(f"Strategy execution error: {e}")
            await self._emergency_close_all()

    async def _trade_symbol(self, symbol: str) -> None:
        """
        –¢–æ—Ä–≥–æ–≤–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º —Å –æ–ø—Ä–æ—Å–æ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç polling —Å rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è API –ª–∏–º–∏—Ç–æ–≤.
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (4x –±—ã—Å—Ç—Ä–µ–µ).
        """
        logger.info(f"üéØ Starting scalping for {symbol} (polling mode, 15s intervals)")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._update_market_data(symbol)
            logger.info(f"‚úÖ {symbol}: Initial market data loaded")

            # Polling loop - –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (4x –±—ã—Å—Ç—Ä–µ–µ)
            while self.active:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API rate limiting
                    await self._check_rate_limit()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏)
                    await self._update_market_data(symbol)

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—Ç–∏–∫–µ—Ä)
                    ticker = await self.client.get_ticker(symbol)
                    current_price = float(ticker["last"])

                    # –°–æ–∑–¥–∞–µ–º tick –æ–±—ä–µ–∫—Ç
                    tick = Tick(
                        symbol=symbol,
                        price=current_price,
                        volume=float(ticker.get("vol24h", 0)),
                        timestamp=datetime.utcnow(),
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫
                    await self._process_tick(symbol, tick)

                except Exception as e:
                    logger.error(f"‚ùå Error processing {symbol}: {e}")

                # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞ (4x –±—ã—Å—Ç—Ä–µ–µ)
                await asyncio.sleep(15)

        except Exception as e:
            logger.error(f"‚ùå Fatal error trading {symbol}: {e}")

    async def _check_rate_limit(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å API rate limiting.

        –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ OKX API:
        - Public endpoints: 120 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥–∞
        - Private endpoints: 20 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥–∞
        """
        current_time = datetime.utcnow()

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if (current_time - self.api_requests_window_start).seconds >= 60:
            self.api_requests_count = 0
            self.api_requests_window_start = current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if self.api_requests_count >= self.max_requests_per_minute:
            wait_seconds = 60 - (current_time - self.api_requests_window_start).seconds
            if wait_seconds > 0:
                logger.warning(
                    f"‚è∞ Rate limit reached ({self.api_requests_count}/{self.max_requests_per_minute}). Waiting {wait_seconds}s..."
                )
                await asyncio.sleep(wait_seconds)
                self.api_requests_count = 0
                self.api_requests_window_start = datetime.utcnow()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.api_requests_count += 1

    async def _update_market_data(self, symbol: str) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à
        —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC-USDT")

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏
        """
        try:
            ohlcv_data = await self.client.get_market_data(
                symbol, self.config.timeframe, 100  # Get enough data for indicators
            )

            # Create MarketData object
            market_data = MarketData(
                symbol=symbol, timeframe=self.config.timeframe, ohlcv_data=ohlcv_data
            )

            self.market_data_cache[symbol] = market_data

        except Exception as e:
            logger.error(f"Error updating market data for {symbol}: {e}")

    async def _process_tick(self, symbol: str, tick) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∏–∫, –≤—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã,
        –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            tick: –û–±—ä–µ–∫—Ç —Ç–∏–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        Raises:
            Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # Check if we have enough market data
            if symbol not in self.market_data_cache:
                return

            market_data = self.market_data_cache[symbol]
            market_data.current_tick = tick

            # üí∏ –£–õ–£–ß–®–ï–ù–ò–ï 10: Spread filter
            if self.spread_filter_enabled and tick.bid and tick.ask:
                spread = (tick.ask - tick.bid) / tick.bid
                spread_percent = spread * 100

                if spread_percent > self.max_spread_percent:
                    logger.debug(
                        f"Spread too wide for {symbol}: {spread_percent:.3f}% "
                        f"(max: {self.max_spread_percent}%)"
                    )
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–∏–∫

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
            current_time = datetime.utcnow()
            if not hasattr(self, "_last_status_time"):
                self._last_status_time = {}

            if (
                symbol not in self._last_status_time
                or (current_time - self._last_status_time[symbol]).total_seconds() >= 30
            ):
                await self._log_trading_status(symbol, tick)
                self._last_status_time[symbol] = current_time

            # Calculate indicators
            indicator_results = self.indicators.calculate_all(market_data)

            # Debug: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = indicator_results.get("RSI")
            atr = indicator_results.get("ATR")
            if rsi and atr:
                logger.debug(
                    f"üìà {symbol} Indicators: RSI={rsi.value:.2f}, ATR={atr.value:.6f}"
                )

            # Check for trading opportunity
            signal = await self._generate_signal(symbol, indicator_results, tick)

            if signal:
                await self._execute_signal(signal)

            # Update existing positions
            await self._update_position_prices(symbol, tick.price)

        except Exception as e:
            logger.error(f"Error processing tick for {symbol}: {e}")

    async def _generate_signal(
        self, symbol: str, indicators: Dict, tick
    ) -> Optional[Signal]:
        """Generate trading signal based on indicators"""

        # Check rate limiting
        if not self._can_trade(symbol):
            logger.debug(f"üö´ {symbol}: Cannot trade (rate limit or restrictions)")
            return None

        # Get indicator values
        sma_fast = indicators.get("SMA_FAST")
        sma_slow = indicators.get("SMA_SLOW")
        ema_fast = indicators.get("EMA_FAST")
        ema_slow = indicators.get("EMA_SLOW")
        rsi = indicators.get("RSI")
        atr = indicators.get("ATR")
        bb = indicators.get("BB")
        volume = indicators.get("VOLUME")
        macd = indicators.get("MACD")  # üìä –£–õ–£–ß–®–ï–ù–ò–ï 7

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        required_indicators = [
            sma_fast,
            sma_slow,
            ema_fast,
            ema_slow,
            rsi,
            atr,
            bb,
            volume,
            macd,
        ]
        if not all(required_indicators):
            missing = []
            if not sma_fast:
                missing.append("SMA_FAST")
            if not sma_slow:
                missing.append("SMA_SLOW")
            if not ema_fast:
                missing.append("EMA_FAST")
            if not ema_slow:
                missing.append("EMA_SLOW")
            if not rsi:
                missing.append("RSI")
            if not atr:
                missing.append("ATR")
            if not bb:
                missing.append("BB")
            if not volume:
                missing.append("VOLUME")
            if not macd:
                missing.append("MACD")
            logger.debug(f"üö´ {symbol}: Missing indicators: {', '.join(missing)}")
            return None

        current_price = tick.price

        # Check minimum volatility
        if atr.value < self.config.entry.min_volatility_atr:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è ATR = 0
            if atr.value == 0.0:
                error_info = atr.metadata.get("error", "Unknown reason")
                warning_info = atr.metadata.get("warning", "")
                logger.warning(f"üö´ {symbol}: ATR is ZERO! {error_info} {warning_info}")
                if "sample_prices" in atr.metadata:
                    logger.debug(f"   Sample prices: {atr.metadata['sample_prices']}")
            else:
                logger.debug(
                    f"üö´ {symbol}: Low volatility: ATR={atr.value:.6f} "
                    f"(min={self.config.entry.min_volatility_atr})"
                )
            return None

        # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –§–∏–ª—å—Ç—Ä RANGING —Ä–µ–∂–∏–º–∞ (–Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤–æ —Ñ–ª—ç—Ç–µ)
        if self.regime_detection_enabled:
            market_regime = self._detect_market_regime(symbol)

            if market_regime == "RANGING":
                logger.debug(
                    f"‚ö™ {symbol} RANGING market detected - skipping trade "
                    f"(flat market = high risk for scalping)"
                )
                return None  # –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤–æ —Ñ–ª—ç—Ç–µ!

        # üéØ –£–õ–£–ß–®–ï–ù–ò–ï 4: Scoring —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏
        if self.scoring_enabled:
            # Long —Å–∏–≥–Ω–∞–ª - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±–∞–ª–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
            long_score = 0

            # SMA Trend (1 –±–∞–ª–ª - –±—ã—Å—Ç—Ä–∞—è, –º–æ–∂–µ—Ç –±—ã—Ç—å —à—É–º–Ω–æ–π)
            long_score += 1 if (current_price > sma_fast.value > sma_slow.value) else 0

            # EMA Trend (2 –±–∞–ª–ª–∞ - —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ —á–µ–º SMA)
            long_score += 2 if ema_fast.value > ema_slow.value else 0

            # RSI (3-4 –±–∞–ª–ª–∞ - –í–ê–ñ–ù–´–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä! + confluence bonus)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            rsi_oversold = (
                self.current_indicator_params.rsi_oversold
                if self.current_indicator_params
                else self.config.entry.rsi_oversold
            )
            rsi_overbought = (
                self.current_indicator_params.rsi_overbought
                if self.current_indicator_params
                else self.config.entry.rsi_overbought
            )

            # üéØ –ì–ê–†–ú–û–ù–ò–ó–ê–¶–ò–Ø: –ó–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ RSI
            # Extreme zone (–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)
            if rsi.value <= (rsi_oversold - 5):  # –ù–∞–ø—Ä–∏–º–µ—Ä <25 –¥–ª—è RANGING
                long_score += 4  # EXTREME! +1 bonus
            # Strong zone (—Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)
            elif rsi.value <= rsi_oversold:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ
                long_score += 3  # –°—Ç–∞–Ω–¥–∞—Ä—Ç
            # Weak zone (—Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª)
            elif rsi.value <= (rsi_oversold + 10):
                long_score += 2
            # Neutral-bullish
            elif rsi.value <= (rsi_oversold + 20):
                long_score += 1

            # Bollinger Bands (2 –±–∞–ª–ª–∞ - —Ö–æ—Ä–æ—à–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
            long_score += 2 if current_price <= bb.metadata["lower_band"] * 1.002 else 0

            # Volume (2 –±–∞–ª–ª–∞ - –≤–∞–∂–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–ª—ã)
            volume_threshold = (
                self.current_indicator_params.volume_threshold
                if self.current_indicator_params
                else self.config.entry.volume_threshold
            )
            long_score += 2 if volume.value >= volume_threshold else 0

            # MACD (2 –±–∞–ª–ª–∞ - –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
            macd_line = macd.metadata.get("macd_line", 0)
            macd_signal = macd.metadata.get("signal_line", 0)
            long_score += 2 if (macd_line > macd_signal and macd_line > 0) else 0

            # Short —Å–∏–≥–Ω–∞–ª - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±–∞–ª–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
            short_score = 0

            # SMA Trend (1 –±–∞–ª–ª)
            short_score += 1 if (current_price < sma_fast.value < sma_slow.value) else 0

            # EMA Trend (2 –±–∞–ª–ª–∞)
            short_score += 2 if ema_fast.value < ema_slow.value else 0

            # RSI (3-4 –±–∞–ª–ª–∞ - –í–ê–ñ–ù–´–ô! + confluence bonus)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RSI
            # üéØ –ì–ê–†–ú–û–ù–ò–ó–ê–¶–ò–Ø: –ó–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ RSI –¥–ª—è SHORT
            if rsi.value >= (rsi_overbought + 5):  # Extreme overbought
                short_score += 4  # EXTREME! +1 bonus
            elif rsi.value >= rsi_overbought:  # Strong overbought
                short_score += 3  # –°—Ç–∞–Ω–¥–∞—Ä—Ç
            elif rsi.value >= (rsi_overbought - 10):  # Weak overbought
                short_score += 2
            elif rsi.value >= (rsi_overbought - 20):  # Neutral-bearish
                short_score += 1

            # Bollinger Bands (2 –±–∞–ª–ª–∞)
            short_score += (
                2 if current_price >= bb.metadata["upper_band"] * 0.998 else 0
            )

            # Volume (2 –±–∞–ª–ª–∞)
            short_score += 2 if volume.value >= volume_threshold else 0

            # MACD (2 –±–∞–ª–ª–∞)
            short_score += 2 if (macd_line < macd_signal and macd_line < 0) else 0

            # –†–∞—Å—á—ë—Ç confidence (0.0 - 1.0)
            long_confidence = long_score / 12.0  # –ú–∞–∫—Å–∏–º—É–º 12 –±–∞–ª–ª–æ–≤ (—Å MACD)
            short_confidence = short_score / 12.0

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            existing_position = self.positions.get(symbol)
            if existing_position:
                if existing_position.side == PositionSide.LONG and short_score > 0:
                    return None
                if existing_position.side == PositionSide.SHORT and long_score > 0:
                    return None

            # PHASE 1.5: ARM - –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            current_score_threshold = self.min_score_threshold

            if self.adaptive_regime:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
                candles = self.market_data_cache[symbol].ohlcv_data
                new_regime = self.adaptive_regime.update_regime(candles, current_price)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–∂–∏–º
                if new_regime and new_regime != self.current_regime_type:
                    logger.info(
                        f"üîÑ Regime changed: {self.current_regime_type} ‚Üí {new_regime}"
                    )
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                    await self.switch_regime_parameters(new_regime)

                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                regime_params = self.adaptive_regime.get_current_parameters()
                current_score_threshold = regime_params.min_score_threshold

                logger.debug(
                    f"üß† Market Regime: {self.adaptive_regime.current_regime.value.upper()} | "
                    f"Threshold: {current_score_threshold}/12"
                )
            elif self.volatility_adapter and atr:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Volatility Adapter –µ—Å–ª–∏ ARM –æ—Ç–∫–ª—é—á–µ–Ω
                current_volatility = self.volatility_adapter.calculate_volatility(
                    atr.value, current_price
                )
                vol_params = self.volatility_adapter.get_parameters(current_volatility)
                current_score_threshold = vol_params.score_threshold

                logger.debug(
                    f"üìä Volatility: {current_volatility:.2%} ‚Üí Regime: {vol_params.regime.value} | "
                    f"Threshold: {current_score_threshold}/12"
                )

            # –õ–æ–≥–∏—Ä—É–µ–º scoring –í–°–ï–ì–î–ê (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤)
            logger.info(
                f"üìä {symbol} Scoring: LONG {long_score}/12 ({long_confidence:.1%}) | "
                f"SHORT {short_score}/12 ({short_confidence:.1%}) | "
                f"Threshold: {current_score_threshold}/12"
            )

            # PHASE 1: Time-Based Filter
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ù–ê–ß–ê–õ–ê –≤—Ä–µ–º—è (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if self.time_filter:
                if not self.time_filter.is_trading_allowed():
                    next_time = self.time_filter.get_next_trading_time()
                    logger.info(
                        f"‚è∞ TIME FILTER BLOCKED: {symbol} | "
                        f"Reason: Outside trading hours | "
                        f"{next_time}"
                    )
                    return None

            # PHASE 1: Correlation Filter
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ü–ï–†–ï–î MTF (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã)
            if self.correlation_filter:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
                signal_direction = None
                if long_score >= current_score_threshold and long_score > short_score:
                    signal_direction = "LONG"
                elif (
                    short_score >= current_score_threshold and short_score > long_score
                ):
                    signal_direction = "SHORT"

                if signal_direction:
                    corr_result = await self.correlation_filter.check_entry(
                        symbol, signal_direction, self.positions
                    )
                    if corr_result.blocked:
                        logger.warning(
                            f"üö´ CORRELATION BLOCKED: {symbol} {signal_direction} | "
                            f"Reason: {corr_result.reason} | "
                            f"Correlated: {corr_result.correlated_positions}"
                        )
                        return None

            # PHASE 1: Volume Profile
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Volume Profile –ø–µ—Ä–≤—ã–º (–æ–±—â–∏–π –±–æ–Ω—É—Å –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
            if self.volume_profile_filter:
                vp_result = await self.volume_profile_filter.check_entry(
                    symbol, current_price
                )
                if vp_result.bonus > 0:
                    # –ü–æ–ª—É—á–∞–µ–º multiplier –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                    vp_multiplier = 1.0
                    if self.adaptive_regime:
                        regime_params = self.adaptive_regime.get_current_parameters()
                        vp_multiplier = regime_params.volume_profile_bonus_multiplier

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º multiplier –∫ –±–æ–Ω—É—Å—É
                    base_bonus = vp_result.bonus
                    adjusted_bonus = int(round(base_bonus * vp_multiplier))

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫ –æ–±–æ–∏–º score (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª)
                    if (
                        long_score >= current_score_threshold
                        and long_score > short_score
                    ):
                        long_score += adjusted_bonus
                        long_confidence = long_score / 12.0
                        logger.info(
                            f"‚úÖ VOLUME PROFILE BONUS: {symbol} LONG | "
                            f"Reason: {vp_result.reason} | "
                            f"Base bonus: +{base_bonus} | Multiplier: {vp_multiplier}x | "
                            f"Adjusted bonus: +{adjusted_bonus} | New score: {long_score}/12"
                        )
                    elif (
                        short_score >= current_score_threshold
                        and short_score > long_score
                    ):
                        short_score += adjusted_bonus
                        short_confidence = short_score / 12.0
                        logger.info(
                            f"‚úÖ VOLUME PROFILE BONUS: {symbol} SHORT | "
                            f"Reason: {vp_result.reason} | "
                            f"Base bonus: +{base_bonus} | Multiplier: {vp_multiplier}x | "
                            f"Adjusted bonus: +{adjusted_bonus} | New score: {short_score}/12"
                        )

            # PHASE 1: Pivot Points
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Pivot —É—Ä–æ–≤–Ω–∏ (–¥–æ MTF, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–æ–Ω—É—Å –∫ score)
            if self.pivot_filter:
                # –ü–æ–ª—É—á–∞–µ–º multiplier –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                pivot_multiplier = 1.0
                if self.adaptive_regime:
                    regime_params = self.adaptive_regime.get_current_parameters()
                    pivot_multiplier = regime_params.pivot_bonus_multiplier

                if long_score >= current_score_threshold and long_score > short_score:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG –æ–∫–æ–ª–æ Pivot —É—Ä–æ–≤–Ω–µ–π
                    pivot_result = await self.pivot_filter.check_entry(
                        symbol, current_price, "LONG"
                    )
                    if pivot_result.near_level and pivot_result.bonus > 0:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º multiplier –∫ –±–æ–Ω—É—Å—É
                        base_bonus = pivot_result.bonus
                        adjusted_bonus = int(round(base_bonus * pivot_multiplier))

                        long_score += adjusted_bonus
                        long_confidence = long_score / 12.0
                        logger.info(
                            f"‚úÖ PIVOT BONUS: {symbol} LONG near {pivot_result.level_name} | "
                            f"Base bonus: +{base_bonus} | Multiplier: {pivot_multiplier}x | "
                            f"Adjusted bonus: +{adjusted_bonus} | New score: {long_score}/12"
                        )
                elif (
                    short_score >= current_score_threshold and short_score > long_score
                ):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT –æ–∫–æ–ª–æ Pivot —É—Ä–æ–≤–Ω–µ–π
                    pivot_result = await self.pivot_filter.check_entry(
                        symbol, current_price, "SHORT"
                    )
                    if pivot_result.near_level and pivot_result.bonus > 0:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º multiplier –∫ –±–æ–Ω—É—Å—É
                        base_bonus = pivot_result.bonus
                        adjusted_bonus = int(round(base_bonus * pivot_multiplier))

                        short_score += adjusted_bonus
                        short_confidence = short_score / 12.0
                        logger.info(
                            f"‚úÖ PIVOT BONUS: {symbol} SHORT near {pivot_result.level_name} | "
                            f"Base bonus: +{base_bonus} | Multiplier: {pivot_multiplier}x | "
                            f"Adjusted bonus: +{adjusted_bonus} | New score: {short_score}/12"
                        )

            # PHASE 1: Multi-Timeframe Confirmation
            # –ü—Ä–∏–º–µ–Ω—è–µ–º MTF —Ñ–∏–ª—å—Ç—Ä –î–û –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.mtf_filter:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª —Å–∏–ª—å–Ω–µ–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
                if long_score >= current_score_threshold and long_score > short_score:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG —Å–∏–≥–Ω–∞–ª
                    mtf_result = await self.mtf_filter.check_confirmation(
                        symbol, "LONG"
                    )
                    if mtf_result.blocked:
                        logger.warning(
                            f"üö´ MTF BLOCKED: {symbol} LONG signal blocked | "
                            f"Reason: {mtf_result.reason}"
                        )
                        return None
                    if mtf_result.confirmed:
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ score
                        long_score += mtf_result.bonus
                        long_confidence = long_score / 12.0
                        logger.info(
                            f"‚úÖ MTF CONFIRMED: {symbol} LONG | "
                            f"Bonus: +{mtf_result.bonus} | New score: {long_score}/12"
                        )
                elif (
                    short_score >= current_score_threshold and short_score > long_score
                ):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT —Å–∏–≥–Ω–∞–ª
                    mtf_result = await self.mtf_filter.check_confirmation(
                        symbol, "SHORT"
                    )
                    if mtf_result.blocked:
                        logger.warning(
                            f"üö´ MTF BLOCKED: {symbol} SHORT signal blocked | "
                            f"Reason: {mtf_result.reason}"
                        )
                        return None
                    if mtf_result.confirmed:
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ score
                        short_score += mtf_result.bonus
                        short_confidence = short_score / 12.0
                        logger.info(
                            f"‚úÖ MTF CONFIRMED: {symbol} SHORT | "
                            f"Bonus: +{mtf_result.bonus} | New score: {short_score}/12"
                        )

            # Long —Å–∏–≥–Ω–∞–ª: –º–∏–Ω–∏–º—É–º current_score_threshold –±–∞–ª–ª–æ–≤ –∏ –±–æ–ª—å—à–µ —á–µ–º short
            if long_score >= current_score_threshold and long_score > short_score:
                logger.info(
                    f"üéØ SIGNAL GENERATED: {symbol} LONG | "
                    f"Score: {long_score}/12 | Confidence: {long_confidence:.1%} | "
                    f"Price: ${current_price:,.2f}"
                )
                return Signal(
                    symbol=symbol,
                    side=OrderSide.BUY,
                    strength=long_confidence,
                    price=current_price,
                    timestamp=datetime.utcnow(),
                    strategy_id=self.strategy_id,
                    indicators={k: v.value for k, v in indicators.items()},
                    confidence=long_confidence,
                )

            # Short —Å–∏–≥–Ω–∞–ª: –º–∏–Ω–∏–º—É–º current_score_threshold –±–∞–ª–ª–æ–≤ –∏ –±–æ–ª—å—à–µ —á–µ–º long
            if short_score >= current_score_threshold and short_score > long_score:
                logger.info(
                    f"üéØ SIGNAL GENERATED: {symbol} SHORT | "
                    f"Score: {short_score}/12 | Confidence: {short_confidence:.1%} | "
                    f"Price: ${current_price:,.2f}"
                )
                return Signal(
                    symbol=symbol,
                    side=OrderSide.SELL,
                    strength=short_confidence,
                    price=current_price,
                    timestamp=datetime.utcnow(),
                    strategy_id=self.strategy_id,
                    indicators={k: v.value for k, v in indicators.items()},
                    confidence=short_confidence,
                )

            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ - –ª–æ–≥–∏—Ä—É–µ–º –ø–æ—á–µ–º—É
            if (
                long_score < current_score_threshold
                and short_score < current_score_threshold
            ):
                logger.info(
                    f"‚ö™ {symbol} No signal: Both scores too low "
                    f"(L:{long_score}/12, S:{short_score}/12, need {current_score_threshold})"
                )
            elif long_score == short_score:
                logger.info(
                    f"‚ö™ {symbol} No signal: Equal scores "
                    f"(L:{long_score}/12, S:{short_score}/12)"
                )

            return None

        else:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ "–≤—Å—ë –∏–ª–∏ –Ω–∏—á–µ–≥–æ" (–µ—Å–ª–∏ scoring –æ—Ç–∫–ª—é—á–µ–Ω)
            long_conditions = [
                current_price > sma_fast.value > sma_slow.value,
                ema_fast.value > ema_slow.value,
                30 < rsi.value < 70,
                current_price <= bb.metadata["lower_band"] * 1.002,
                volume.value >= self.config.entry.volume_threshold,
            ]

            short_conditions = [
                current_price < sma_fast.value < sma_slow.value,
                ema_fast.value < ema_slow.value,
                30 < rsi.value < 70,
                current_price >= bb.metadata["upper_band"] * 0.998,
                volume.value >= self.config.entry.volume_threshold,
            ]

            existing_position = self.positions.get(symbol)
            if existing_position:
                if existing_position.side == PositionSide.LONG and any(
                    short_conditions
                ):
                    return None
                if existing_position.side == PositionSide.SHORT and any(
                    long_conditions
                ):
                    return None

            if all(long_conditions):
                return Signal(
                    symbol=symbol,
                    side=OrderSide.BUY,
                    strength=0.8,
                    price=current_price,
                    timestamp=datetime.utcnow(),
                    strategy_id=self.strategy_id,
                    indicators={k: v.value for k, v in indicators.items()},
                    confidence=1.0,
                )

            elif all(short_conditions):
                return Signal(
                    symbol=symbol,
                    side=OrderSide.SELL,
                    strength=0.8,
                    price=current_price,
                    timestamp=datetime.utcnow(),
                    strategy_id=self.strategy_id,
                    indicators={k: v.value for k, v in indicators.items()},
                    confidence=1.0,
                )

            return None

    def _detect_market_regime(self, symbol: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è).

        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –≤ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
        - HIGH_VOLATILITY: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (>2%)
        - TRENDING: —è–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ (SMA50 vs SMA200)
        - RANGING: –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª

        Returns:
            str: –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞ ("HIGH_VOLATILITY", "TRENDING", "RANGING")
        """
        market_data = self.market_data_cache.get(symbol)
        if not market_data:
            return "RANGING"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        closes = market_data.get_closes()
        if len(closes) < 200:
            return "RANGING"

        # –†–∞—Å—á—ë—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π)
        returns = np.diff(closes[-20:]) / closes[-21:-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
        volatility = np.std(returns)

        # –†–∞—Å—á—ë—Ç —Ç—Ä–µ–Ω–¥–∞ (SMA50 vs SMA200)
        sma_50 = np.mean(closes[-50:])
        sma_200 = np.mean(closes[-200:])
        trend_diff = abs(sma_50 - sma_200) / sma_200

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        if volatility > self.high_volatility_threshold:
            return "HIGH_VOLATILITY"
        elif trend_diff > self.trend_threshold:
            return "TRENDING"
        else:
            return "RANGING"

    def _can_trade(self, symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è:
        - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        - –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
        - –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–±—ã—Ç–∫–∞
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        - üõ°Ô∏è –õ–∏–º–∏—Ç consecutive losses (–ù–û–í–û–ï)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, False –∏–Ω–∞—á–µ
        """
        # Check if strategy is active
        if not self.active:
            logger.debug(f"üö´ {symbol}: Strategy not active")
            return False

        # üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ consecutive losses
        if self.consecutive_losses >= self.max_consecutive_losses:
            logger.warning(
                f"Cannot trade: max consecutive losses reached "
                f"({self.consecutive_losses})"
            )
            return False

        # üí∞ –£–õ–£–ß–®–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ daily profit lock
        if self.profit_lock_enabled and self.daily_start_balance > 0:
            profit_pct = (self.daily_pnl / self.daily_start_balance) * 100
            if profit_pct >= self.daily_profit_target_percent:
                logger.info(
                    f"üéØ Daily profit target reached: {profit_pct:.2f}%. "
                    f"Stopping trading for today."
                )
                return False

        # ‚è∞ –£–õ–£–ß–®–ï–ù–ò–ï 8: Session filtering - –ó–ê–ú–ï–ù–ï–ù–û –ù–ê TimeSessionManager
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ TimeSessionManager –≤ _generate_signal()
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # if self.session_filtering_enabled:
        #     ... —Å—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω

        # Check hourly trade limit
        if self.trade_count_hourly >= self.config.max_trades_per_hour:
            logger.debug(
                f"üö´ {symbol}: Hourly trade limit reached "
                f"({self.trade_count_hourly}/{self.config.max_trades_per_hour})"
            )
            return False

        # Check cooldown after loss
        if symbol in self.last_loss_time:
            cooldown_end = self.last_loss_time[symbol] + timedelta(
                minutes=self.config.cooldown_after_loss_minutes
            )
            if datetime.utcnow() < cooldown_end:
                remaining = (cooldown_end - datetime.utcnow()).total_seconds() / 60
                logger.debug(
                    f"üö´ {symbol}: Cooldown active, {remaining:.1f} min remaining"
                )
                return False

        # üõ°Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π cooldown –ø–æ—Å–ª–µ 2+ —É–±—ã—Ç–∫–æ–≤
        if self.consecutive_losses >= 2:
            extended_cooldown_minutes = 15  # 15 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤

            # –ò—â–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–±—ã—Ç–∫–∞ –ø–æ –ª—é–±–æ–º—É —Å–∏–º–≤–æ–ª—É
            if self.last_loss_time:
                latest_loss_time = max(self.last_loss_time.values())
                time_since_loss = (
                    datetime.utcnow() - latest_loss_time
                ).total_seconds() / 60

                if time_since_loss < extended_cooldown_minutes:
                    logger.debug(
                        f"üõ°Ô∏è {symbol} Extended cooldown active after {self.consecutive_losses} losses: "
                        f"{extended_cooldown_minutes - time_since_loss:.1f} min remaining"
                    )
                return False

        # Check max positions
        if len(self.positions) >= self.risk_config.max_open_positions:
            logger.debug(
                f"üö´ {symbol}: Max positions reached "
                f"({len(self.positions)}/{self.risk_config.max_open_positions})"
            )
            return False

        logger.debug(f"‚úÖ {symbol}: All checks passed, can trade")
        return True

    async def _execute_signal(self, signal: Signal) -> None:
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏).

        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞,
        –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ stop-loss –∏ take-profit, –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç
        —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ.

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–¥–µ–ª–∫–∏

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # Calculate position size
            position_size = await self._calculate_position_size(
                signal.symbol, signal.price
            )

            if position_size <= 0:
                logger.warning(f"Invalid position size for {signal.symbol}")
                return

            # PHASE 1: Balance Checker - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
            if self.balance_checker:
                balances = await self.client.get_account_balance()
                balance_check = self.balance_checker.check_balance(
                    symbol=signal.symbol,
                    side=signal.side,
                    required_amount=position_size,
                    current_price=signal.price,
                    balances=balances,
                )

                if not balance_check.allowed:
                    logger.warning(
                        f"‚õî {signal.symbol} {signal.side.value} BLOCKED by Balance Checker: "
                        f"{balance_check.reason}"
                    )
                    return

            # üõ°Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ SHORT –±–µ–∑ –∞–∫—Ç–∏–≤–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–π–º–æ–≤)
            if signal.side == OrderSide.SELL:
                base_asset = signal.symbol.split("-")[
                    0
                ]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç–∏–≤ (SOL, DOGE, etc)
                asset_balance = await self.client.get_balance(base_asset)

                if asset_balance < position_size:
                    logger.error(
                        f"üö® {signal.symbol} SHORT BLOCKED: No {base_asset} on balance! "
                        f"Have: {asset_balance:.8f}, Need: {position_size:.8f} - "
                        f"Preventing automatic borrowing in SPOT mode!"
                    )
                    return  # ‚ùå –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –±–µ–∑ –∞–∫—Ç–∏–≤–∞!

            # Calculate stop loss and take profit
            atr_value = self.market_data_cache[signal.symbol]
            indicators = self.indicators.calculate_all(
                self.market_data_cache[signal.symbol]
            )
            atr_result = indicators.get("ATR")

            if not atr_result:
                logger.warning(f"No ATR data for {signal.symbol}")
                return

            stop_loss, take_profit = self._calculate_exit_levels(
                signal.price, signal.side, atr_result.value
            )

            # Place order
            logger.info(
                f"üì§ Placing order: {signal.side.value} {position_size} "
                f"{signal.symbol} @ ${signal.price:.2f}"
            )
            logger.info(f"   üìä TP/SL: TP=${take_profit:.2f}, SL=${stop_loss:.2f}")

            # üéØ –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä (–ë–ï–ó TP/SL)
            order = await self.client.place_order(
                symbol=signal.symbol,
                side=signal.side,
                order_type=OrderType.MARKET,
                quantity=position_size,
            )

            if order:
                self.pending_orders[order.id] = signal.symbol
                self.trade_count_hourly += 1
                self.last_trade_time[signal.symbol] = datetime.utcnow()

                # Create position with SL/TP levels
                # TP/SL –º–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è –±–æ—Ç–æ–º (SPOT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
                position = Position(
                    id=order.id,
                    symbol=signal.symbol,
                    side=PositionSide.LONG
                    if signal.side == OrderSide.BUY
                    else PositionSide.SHORT,
                    entry_price=signal.price,
                    current_price=signal.price,
                    size=position_size,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    timestamp=datetime.utcnow(),
                )
                self.positions[signal.symbol] = position

                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                logger.info(
                    f"‚úÖ POSITION OPENED: {signal.symbol} {position.side.value.upper()}"
                )
                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                logger.info(f"   Order ID: {order.id}")
                logger.info(f"   Side: {signal.side.value.upper()}")
                logger.info(
                    f"   Size: {position_size:.8f} {signal.symbol.split('-')[0]}"
                )
                logger.info(f"   Entry: ${signal.price:.2f}")
                logger.info(f"   Take Profit: ${take_profit:.2f}")
                logger.info(f"   Stop Loss: ${stop_loss:.2f}")
                logger.info(
                    f"   Risk/Reward: 1:{abs(take_profit-signal.price)/abs(signal.price-stop_loss):.2f}"
                )
                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

                # üéØ –®–∞–≥ 2: –í—ã—Å—Ç–∞–≤–ª—è–µ–º TP algo order
                try:
                    tp_order_id = await self.client.place_algo_order(
                        symbol=signal.symbol,
                        side=OrderSide.SELL
                        if signal.side == OrderSide.BUY
                        else OrderSide.BUY,
                        quantity=position_size,
                        trigger_price=take_profit,
                    )
                    if tp_order_id:
                        logger.info(
                            f"‚úÖ TP algo order placed: ID={tp_order_id} @ ${take_profit:.2f}"
                        )
                    else:
                        logger.warning(f"‚ö†Ô∏è TP algo order FAILED for {signal.symbol}")
                except Exception as e:
                    logger.error(f"‚ùå Error placing TP algo order: {e}")

                # üéØ –®–∞–≥ 3: –í—ã—Å—Ç–∞–≤–ª—è–µ–º SL algo order
                try:
                    sl_order_id = await self.client.place_stop_loss_order(
                        symbol=signal.symbol,
                        side=OrderSide.SELL
                        if signal.side == OrderSide.BUY
                        else OrderSide.BUY,
                        quantity=position_size,
                        trigger_price=stop_loss,
                    )
                    if sl_order_id:
                        logger.info(
                            f"‚úÖ SL algo order placed: ID={sl_order_id} @ ${stop_loss:.2f}"
                        )
                    else:
                        logger.warning(f"‚ö†Ô∏è SL algo order FAILED for {signal.symbol}")
                except Exception as e:
                    logger.error(f"‚ùå Error placing SL algo order: {e}")

                # –î–æ–±–∞–≤–ª—è–µ–º Partial TP
                await self._check_partial_take_profit(
                    signal.symbol, signal.price, position
                )
            else:
                logger.error(
                    f"‚ùå Order placement FAILED: {signal.side.value} "
                    f"{signal.symbol} - No order returned from exchange"
                )

        except Exception as e:
            logger.error(
                f"‚ùå Error executing signal {signal.symbol}: {e}", exc_info=True
            )

    async def _calculate_position_size(self, symbol: str, price: float) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–æ–±—ã—á–Ω–æ 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞).
        –£—á–∏—Ç—ã–≤–∞–µ—Ç ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ stop-loss –∏
        –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        Returns:
            float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (0 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)

        Raises:
            Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö —Ä–∞—Å—á–µ—Ç–∞
        """
        logger.info(f"üîç CALCULATING POSITION SIZE for {symbol} @ ${price:.2f}")
        try:
            # Get account balance
            balances = await self.client.get_account_balance()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º USDT –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            base_balance = next(
                (b.free for b in balances if b.currency == "USDT"),
                0.0,
            )

            logger.info(f"üí∞ USDT Balance: ${base_balance:.2f}")

            if base_balance <= 0:
                logger.warning(f"‚ùå No USDT balance for {symbol}")
                return 0.0

            # Calculate risk amount (1% of balance)
            risk_amount = base_balance * (self.risk_config.risk_per_trade_percent / 100)
            logger.info(
                f"üéØ Risk amount: ${risk_amount:.2f} ({self.risk_config.risk_per_trade_percent}%)"
            )

            # Get ATR for stop loss calculation
            market_data = self.market_data_cache.get(symbol)
            if not market_data:
                return 0.0

            indicators = self.indicators.calculate_all(market_data)
            atr_result = indicators.get("ATR")

            if not atr_result or atr_result.value <= 0:
                return 0.0

            # Calculate stop loss distance
            stop_distance = atr_result.value * self.config.exit.stop_loss_atr_multiplier

            # Position size = risk amount / stop distance
            position_size = risk_amount / stop_distance

            # Apply maximum position size limit
            max_position_value = base_balance * (
                self.risk_config.max_position_size_percent / 100
            )
            max_position_size = max_position_value / price

            final_position_size = min(position_size, max_position_size)

            # PHASE 1.5: ARM - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —Ä–µ–∂–∏–º—É —Ä—ã–Ω–∫–∞
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                multiplier = regime_params.position_size_multiplier
                final_position_size *= multiplier
                logger.debug(
                    f"üß† ARM: {self.adaptive_regime.current_regime.value.upper()} "
                    f"mode ‚Üí size multiplier {multiplier}x"
                )
            elif self.regime_detection_enabled:
                # Fallback: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ ARM –æ—Ç–∫–ª—é—á–µ–Ω
                regime = self._detect_market_regime(symbol)
                if regime == "HIGH_VOLATILITY":
                    final_position_size *= 0.7
                    logger.info(f"üåä HIGH VOLATILITY detected, reducing size by 30%")
                elif regime == "TRENDING":
                    final_position_size *= 1.2
                    logger.info(f"üåä TRENDING market detected, increasing size by 20%")

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
            # OKX –º–∏–Ω–∏–º—É–º ~$10, –±–µ—Ä–µ–º $30 —Å –∑–∞–ø–∞—Å–æ–º +2% (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã)
            position_value_usd = final_position_size * price
            logger.info(
                f"üìä Final position size: {final_position_size:.6f} = ${position_value_usd:.2f} (min: ${self.min_order_value_usd})"
            )

            if position_value_usd < self.min_order_value_usd:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –º–∏–Ω–∏–º—É–º–∞ + 2% –∑–∞–ø–∞—Å
                final_position_size = (self.min_order_value_usd * 1.02) / price
                final_value = final_position_size * price
                logger.info(
                    f"‚¨ÜÔ∏è {symbol} Position size increased to meet ${self.min_order_value_usd} minimum: "
                    f"{final_position_size:.6f} (${final_value:.2f} with 2% buffer)"
                )

                # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ù–û! –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ü–û–°–õ–ï —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ –º–∏–Ω–∏–º—É–º–∞
                if self.balance_checker:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
                    # (–Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ signal, –Ω–æ —É –Ω–∞—Å –µ–≥–æ —Ç—É—Ç –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±–∞)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É: –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–∞—Ä –Ω—É–∂–µ–Ω USDT (LONG)
                    balances_check = await self.client.get_account_balance()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT –±–∞–ª–∞–Ω—Å (–¥–ª—è LONG) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π
                    balance_result = self.balance_checker._check_usdt_balance(
                        symbol, final_position_size, price, balances_check
                    )

                    if not balance_result.allowed:
                        logger.error(
                            f"‚õî {symbol}: Insufficient balance after increasing to minimum! "
                            f"{balance_result.reason} - SKIPPING TRADE to prevent automatic borrowing"
                        )
                        return 0.0  # ‚ùå –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é!

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (OKX requirement)
            rounded_size = round(final_position_size, 8)
            logger.debug(
                f"üìê {symbol} Position size rounded: {final_position_size:.15f} ‚Üí {rounded_size:.8f}"
            )

            return rounded_size

        except Exception as e:
            logger.error(f"Error calculating position size: {e}")
            return 0.0

    def _calculate_exit_levels(
        self, entry_price: float, side: OrderSide, atr: float
    ) -> tuple:
        """
        –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (stop-loss –∏ take-profit).

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ATR (Average True Range) –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —É—Ä–æ–≤–Ω–µ–π –≤—ã—Ö–æ–¥–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è
        –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ ARM.

        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (BUY/SELL)
            atr: –ó–Ω–∞—á–µ–Ω–∏–µ ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

        Returns:
            tuple: (stop_loss_price, take_profit_price)
        """
        # PHASE 1.5: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ARM –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            sl_multiplier = regime_params.sl_atr_multiplier
            tp_multiplier = regime_params.tp_atr_multiplier
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            sl_multiplier = self.config.exit.stop_loss_atr_multiplier
            tp_multiplier = self.config.exit.take_profit_atr_multiplier

        stop_distance = atr * sl_multiplier
        profit_distance = atr * tp_multiplier

        if side == OrderSide.BUY:
            stop_loss = entry_price - stop_distance
            take_profit = entry_price + profit_distance
        else:
            stop_loss = entry_price + stop_distance
            take_profit = entry_price - profit_distance

        return stop_loss, take_profit

    async def _update_position_prices(self, symbol: str, current_price: float) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞:
        - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ stop-loss —É—Ä–æ–≤–Ω—è
        - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ take-profit —É—Ä–æ–≤–Ω—è
        - –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            current_price: –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        """
        position = self.positions.get(symbol)
        if not position:
            return

        # Update position price
        position.update_price(current_price)

        # üîí –£–õ–£–ß–®–ï–ù–ò–ï 3: Break-even stop
        if self.breakeven_enabled:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ATR
            market_data = self.market_data_cache.get(symbol)
            if market_data:
                indicators = self.indicators.calculate_all(market_data)
                atr_result = indicators.get("ATR")

                if atr_result and atr_result.value > 0:
                    # –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏
                    if position.side == PositionSide.LONG:
                        profit = current_price - position.entry_price
                        # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å >= 1 ATR –∏ SL –µ—â—ë –Ω–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ
                        if (
                            profit >= atr_result.value * self.breakeven_trigger_atr
                            and position.stop_loss < position.entry_price
                        ):
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä
                            position.stop_loss = position.entry_price + (
                                atr_result.value * 0.1
                            )
                            logger.info(
                                f"üîí Break-even activated for {symbol}: "
                                f"SL moved to {position.stop_loss:.6f}"
                            )
                    else:  # SHORT
                        profit = position.entry_price - current_price
                        if (
                            profit >= atr_result.value * self.breakeven_trigger_atr
                            and position.stop_loss > position.entry_price
                        ):
                            position.stop_loss = position.entry_price - (
                                atr_result.value * 0.1
                            )
                            logger.info(
                                f"üîí Break-even activated for {symbol}: "
                                f"SL moved to {position.stop_loss:.6f}"
                            )

        # üìà –£–õ–£–ß–®–ï–ù–ò–ï 5: Trailing Stop
        if self.trailing_stop_enabled:
            market_data = self.market_data_cache.get(symbol)
            if market_data:
                indicators = self.indicators.calculate_all(market_data)
                atr_result = indicators.get("ATR")

                if atr_result and atr_result.value > 0:
                    if position.side == PositionSide.LONG:
                        profit = current_price - position.entry_price
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing –ø–æ—Å–ª–µ 1.5 ATR –ø—Ä–∏–±—ã–ª–∏
                        activation_level = (
                            atr_result.value * self.trailing_stop_activation_atr
                        )

                        if profit >= activation_level:
                            # –ù–æ–≤—ã–π trailing SL –Ω–∞ 0.8 ATR –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                            new_trailing_sl = current_price - (
                                atr_result.value * self.trailing_stop_distance_atr
                            )
                            # –ü–æ–¥–Ω–∏–º–∞–µ–º SL —Ç–æ–ª—å–∫–æ –≤–≤–µ—Ä—Ö (–Ω–µ –æ–ø—É—Å–∫–∞–µ–º)
                            if new_trailing_sl > position.stop_loss:
                                position.stop_loss = new_trailing_sl
                                logger.info(
                                    f"üìà Trailing SL updated for {symbol}: "
                                    f"{position.stop_loss:.6f} "
                                    f"(distance: {self.trailing_stop_distance_atr} ATR)"
                                )
                    else:  # SHORT
                        profit = position.entry_price - current_price
                        activation_level = (
                            atr_result.value * self.trailing_stop_activation_atr
                        )

                        if profit >= activation_level:
                            # –ù–æ–≤—ã–π trailing SL –Ω–∞ 0.8 ATR –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                            new_trailing_sl = current_price + (
                                atr_result.value * self.trailing_stop_distance_atr
                            )
                            # –û–ø—É—Å–∫–∞–µ–º SL —Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑ (–Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º)
                            if new_trailing_sl < position.stop_loss:
                                position.stop_loss = new_trailing_sl
                                logger.info(
                                    f"üìà Trailing SL updated for {symbol}: "
                                    f"{position.stop_loss:.6f}"
                                )

        # üéØ –£–õ–£–ß–®–ï–ù–ò–ï 6: Partial Take Profit
        if self.partial_tp_enabled:
            await self._check_partial_take_profit(symbol, current_price, position)

        # Check time-based exit
        holding_time = datetime.utcnow() - position.timestamp
        if holding_time.seconds / 60 > self.config.exit.max_holding_minutes:
            await self._close_position(symbol, "time_limit")
            return

        # Check stop loss / take profit
        if position.side == PositionSide.LONG:
            if current_price <= position.stop_loss:
                await self._close_position(symbol, "stop_loss")
            elif current_price >= position.take_profit:
                await self._close_position(symbol, "take_profit")
        else:
            if current_price >= position.stop_loss:
                await self._close_position(symbol, "stop_loss")
            elif current_price <= position.take_profit:
                await self._close_position(symbol, "take_profit")

    async def _check_partial_take_profit(
        self, symbol: str, current_price: float, position: Position
    ) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (Partial TP).

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –ø—Ä–∏–±—ã–ª–∏:
        - 50% –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ (1.5 ATR)
        - 30% –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Ä–æ–≤–Ω–µ (2.5 ATR)
        - 20% –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —É—Ä–æ–≤–Ω–µ (4.0 ATR)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            current_price: –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
            position: –û–±—ä–µ–∫—Ç –ø–æ–∑–∏—Ü–∏–∏

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π TP –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if symbol not in self.position_partial_info:
                market_data = self.market_data_cache.get(symbol)
                if not market_data:
                    return

                indicators = self.indicators.calculate_all(market_data)
                atr_result = indicators.get("ATR")

                if not atr_result or atr_result.value <= 0:
                    return

                # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–≤–Ω–∏ TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
                self.position_partial_info[symbol] = []
                for level in self.tp_levels:
                    if position.side == PositionSide.LONG:
                        tp_price = position.entry_price + (
                            atr_result.value * level["atr_multiplier"]
                        )
                    else:  # SHORT
                        tp_price = position.entry_price - (
                            atr_result.value * level["atr_multiplier"]
                        )

                    self.position_partial_info[symbol].append(
                        {
                            "price": tp_price,
                            "percent": level["percent"],
                            "executed": False,
                        }
                    )

                logger.info(
                    f"üéØ Partial TP levels set for {symbol}: "
                    f"{len(self.tp_levels)} levels"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π TP
            partial_levels = self.position_partial_info.get(symbol, [])

            for i, level in enumerate(partial_levels):
                if level["executed"]:
                    continue  # –£–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
                level_reached = False
                if position.side == PositionSide.LONG:
                    level_reached = current_price >= level["price"]
                else:  # SHORT
                    level_reached = current_price <= level["price"]

                if level_reached:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                    close_size = position.size * level["percent"]
                    close_value = close_size * current_price

                    # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    if close_value < self.min_close_value_usd:
                        logger.debug(
                            f"‚ö†Ô∏è Partial TP #{i+1} for {symbol} too small: "
                            f"${close_value:.2f} < ${self.min_close_value_usd} - skipping this level"
                        )
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å TP

                    # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    order_side = (
                        OrderSide.SELL
                        if position.side == PositionSide.LONG
                        else OrderSide.BUY
                    )

                    order = await self.client.place_order(
                        symbol=symbol,
                        side=order_side,
                        order_type=OrderType.MARKET,
                        quantity=close_size,
                    )

                    if order:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                        position.size -= close_size
                        level["executed"] = True

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –æ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                        if position.side == PositionSide.LONG:
                            partial_pnl = (
                                current_price - position.entry_price
                            ) * close_size
                        else:
                            partial_pnl = (
                                position.entry_price - current_price
                            ) * close_size

                        self.daily_pnl += partial_pnl

                        logger.info(
                            f"üéØ Partial TP #{i+1} hit for {symbol}: "
                            f"Closed {level['percent']:.0%} at "
                            f"${current_price:.6f}, "
                            f"PnL: ${partial_pnl:.2f}, "
                            f"Remaining: {position.size:.6f}"
                        )

                        # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é (–≤—Å–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã)
                        if all(lvl["executed"] for lvl in partial_levels):
                            del self.positions[symbol]
                            del self.position_partial_info[symbol]
                            logger.info(
                                f"‚úÖ All partial TP levels executed for " f"{symbol}"
                            )
                            return

        except Exception as e:
            logger.error(f"Error in partial take profit for {symbol}: {e}")

    async def _close_position(self, symbol: str, reason: str) -> None:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ.

        –†–∞–∑–º–µ—â–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏,
        –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (stop_loss, take_profit, time_limit)

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê #1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ consecutive losses –î–û –∑–∞–∫—Ä—ã—Ç–∏—è
        if self.consecutive_losses >= self.max_consecutive_losses:
            logger.error(
                f"üõë MAX CONSECUTIVE LOSSES ALREADY REACHED ({self.consecutive_losses})! "
                f"Bot stopped. NOT closing more positions to prevent emergency loop!"
            )
            self.active = False
            return  # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –ù–ï –≤—ã–∑—ã–≤–∞–µ–º emergency!

        # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê #2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        if not self.active:
            logger.warning(f"üõë Bot is not active, skipping position close for {symbol}")
            return

        position = self.positions.get(symbol)
        if not position:
            return

        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = position.current_price
            tick = await self.client.get_ticker(symbol)
            if tick:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: get_ticker –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict, –Ω–µ –æ–±—ä–µ–∫—Ç Tick
                current_price = float(
                    tick.get("last", tick.get("lastPx", current_price))
                )

            # üõ°Ô∏è –ó–ê–©–ò–¢–ê #3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            position_value = position.size * current_price

            if position_value < self.min_close_value_usd:
                logger.warning(
                    f"‚ö†Ô∏è {symbol} position too small to close: "
                    f"${position_value:.2f} < ${self.min_close_value_usd} - keeping open until grows or time limit"
                )
                return

            # Determine order side (opposite of position)
            order_side = (
                OrderSide.SELL if position.side == PositionSide.LONG else OrderSide.BUY
            )

            # üõ°Ô∏è –ó–ê–©–ò–¢–ê #4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è SHORT
            if position.side == PositionSide.SHORT:
                # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è SHORT –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º USDT
                required_usdt = position.size * current_price * 1.01  # +1% –∑–∞–ø–∞—Å
                base_currency = "USDT"
                base_balance = await self.client.get_balance(base_currency)

                if base_balance < required_usdt:
                    logger.error(
                        f"‚ùå Insufficient USDT to close SHORT {symbol}: "
                        f"Need ${required_usdt:.2f}, have ${base_balance:.2f} - cannot close!"
                    )
                    return  # –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å—Ä–µ–¥—Å—Ç–≤!

            # üìä –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            logger.info(
                f"üî¥ CLOSING ORDER: {order_side.value} {position.size:.6f} {symbol} "
                f"@ ${current_price:.2f} (Reason: {reason})"
            )

            # Place market order to close position
            order = await self.client.place_order(
                symbol=symbol,
                side=order_side,
                order_type=OrderType.MARKET,
                quantity=position.size,
            )

            if order:
                # üí∞ –£–ß–Å–¢ –ö–û–ú–ò–°–°–ò–ô: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PnL —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
                commission_rate = 0.001  # 0.1% taker fee –Ω–∞ OKX

                # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                open_commission = position.size * position.entry_price * commission_rate

                # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                close_commission = position.size * current_price * commission_rate

                # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ)
                total_commission = open_commission + close_commission

                # PnL —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                net_pnl = position.unrealized_pnl - total_commission

                # Update statistics
                self.total_trades += 1

                # üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ò–ï 1: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ consecutive losses (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π!)
                if net_pnl > 0:
                    self.winning_trades += 1
                    self.consecutive_losses = 0  # –°–±—Ä–æ—Å –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
                    logger.info(f"‚úÖ Win streak reset, consecutive losses: 0")
                else:
                    self.last_loss_time[symbol] = datetime.utcnow()
                    self.consecutive_losses += 1

                    # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º
                    if self.consecutive_losses > self.max_consecutive_losses:
                        self.consecutive_losses = self.max_consecutive_losses

                    logger.warning(
                        f"‚ùå Loss #{self.consecutive_losses} of "
                        f"{self.max_consecutive_losses}"
                    )

                    # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê #5: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º emergency –ø—Ä–∏ –ª–∏–º–∏—Ç–µ!
                    if self.consecutive_losses >= self.max_consecutive_losses:
                        logger.error(
                            f"üõë MAX CONSECUTIVE LOSSES REACHED: {self.consecutive_losses}! "
                            f"Bot will stop accepting new signals. Open positions will close naturally."
                        )
                        self.active = False
                        # –£–ë–†–ê–ù–û: await self._emergency_close_all()  ‚Üê –≠–¢–û –í–´–ó–´–í–ê–õ–û –†–ï–ö–£–†–°–ò–Æ!
                        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏

                # –û–±–Ω–æ–≤–ª—è–µ–º PnL —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                self.daily_pnl += net_pnl

                # üìä –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –°–î–ï–õ–ö–ò
                win_rate = (
                    (self.winning_trades / self.total_trades * 100)
                    if self.total_trades > 0
                    else 0
                )

                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                if net_pnl > 0:
                    logger.info(
                        f"‚úÖ TRADE COMPLETED: {symbol} {position.side.value.upper()} | WIN"
                    )
                else:
                    logger.info(
                        f"‚ùå TRADE COMPLETED: {symbol} {position.side.value.upper()} | LOSS"
                    )
                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                logger.info(f"   Reason: {reason.upper()}")
                logger.info(f"   Entry: ${position.entry_price:.2f}")
                logger.info(f"   Exit: ${current_price:.2f}")
                logger.info(f"   Size: {position.size:.8f} {symbol.split('-')[0]}")
                logger.info(f"   Holding time: {holding_time}")
                logger.info(f"   Gross PnL: ${position.unrealized_pnl:.2f}")
                logger.info(f"   Commission: ${total_commission:.2f}")
                logger.info(
                    f"   Net PnL: ${net_pnl:.2f} ({(net_pnl/position.entry_price/position.size)*100:.2f}%)"
                )
                logger.info(f"   Daily PnL: ${self.daily_pnl:.2f}")
                logger.info(
                    f"   Total trades: {self.total_trades} (Win rate: {win_rate:.1f}%)"
                )
                logger.info(f"   Consecutive losses: {self.consecutive_losses}")
                logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

                # üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                trade_record = {
                    "timestamp": datetime.utcnow(),
                    "symbol": symbol,
                    "side": position.side.value.upper(),
                    "entry_price": position.entry_price,
                    "exit_price": current_price,
                    "size": position.size,
                    "holding_time": str(holding_time),
                    "gross_pnl": position.unrealized_pnl,
                    "commission": total_commission,
                    "net_pnl": net_pnl,
                    "reason": reason.upper(),
                    "result": "WIN" if net_pnl > 0 else "LOSS",
                }

                self.trade_history.append(trade_record)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.trade_history) > self.max_history_size:
                    self.trade_history = self.trade_history[-self.max_history_size :]

                # Remove position
                del self.positions[symbol]

                # üéØ –û—á–∏—Å—Ç–∫–∞ partial TP info
                if symbol in self.position_partial_info:
                    del self.position_partial_info[symbol]

        except Exception as e:
            logger.error(f"Error closing position {symbol}: {e}")

    async def _monitor_positions(self) -> None:
        """Monitor positions and orders"""
        while self.active:
            try:
                # SPOT MODE: –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π
                # –ü–æ–∑–∏—Ü–∏–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤ –ø–∞–º—è—Ç–∏
                # exchange_positions = await self.client.get_positions()

                # –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º - –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ SL/TP
                # for pos in exchange_positions:
                #     if pos.symbol in self.config.symbols:
                #         self.positions[pos.symbol] = pos
                #
                # –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ - –æ–Ω–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ _close_position
                # active_symbols = {pos.symbol for pos in exchange_positions}
                # closed_symbols = set(self.positions.keys()) - active_symbols
                # for symbol in closed_symbols:
                #     del self.positions[symbol]

                # Reset hourly trade count
                current_hour = datetime.utcnow().hour
                if not hasattr(self, "_last_hour") or self._last_hour != current_hour:
                    self.trade_count_hourly = 0
                    self._last_hour = current_hour

                await asyncio.sleep(30)  # Check every 30 seconds

            except Exception as e:
                logger.error(f"Error monitoring positions: {e}")
                await asyncio.sleep(15)  # Wait 15 seconds on error

    async def _emergency_close_all(self) -> None:
        """
        Emergency close all positions (WITHOUT recursion protection).

        üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥ _emergency_in_progress
        –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏.
        """
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        if self._emergency_in_progress:
            logger.warning(
                "‚ö†Ô∏è Emergency close already in progress - skipping duplicate call"
            )
            return

        self._emergency_in_progress = True
        logger.error("üö® EMERGENCY CLOSE ALL POSITIONS INITIATED!")

        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for symbol in list(self.positions.keys()):
                await self._close_position_silent(symbol, "emergency")
        finally:
            self._emergency_in_progress = False
            logger.info("üö® Emergency close completed")

    async def _close_position_silent(self, symbol: str, reason: str) -> None:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è consecutive_losses (–¥–ª—è emergency).

        –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ _emergency_close_all().
        """
        position = self.positions.get(symbol)
        if not position:
            return

        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = position.current_price
            tick = await self.client.get_ticker(symbol)
            if tick:
                current_price = tick.last

            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            order_side = (
                OrderSide.SELL if position.side == PositionSide.LONG else OrderSide.BUY
            )

            logger.warning(
                f"üîá SILENT CLOSE: {order_side.value} {position.size:.6f} {symbol} "
                f"@ ${current_price:.2f} (Reason: {reason})"
            )

            # –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä
            order = await self.client.place_order(
                symbol=symbol,
                side=order_side,
                order_type=OrderType.MARKET,
                quantity=position.size,
            )

            if order:
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º consecutive_losses!
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!
                # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                del self.positions[symbol]

                if symbol in self.position_partial_info:
                    del self.position_partial_info[symbol]

                logger.info(f"üîá Silent close completed: {symbol}")

        except Exception as e:
            logger.error(f"Error in silent close {symbol}: {e}")

    async def _log_trading_status(self, symbol: str, tick) -> None:
        """
        –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –ª–æ–≥.

        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
        - –¶–µ–Ω—É –∏ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        - –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫ –∏ win rate
        - –î–Ω–µ–≤–Ω–æ–π PnL

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            tick: –¢–µ–∫—É—â–∏–π —Ç–∏–∫ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ª–æ–≥–∏—Ä—É–µ—Ç—Å—è, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ USDT –∏ –º–æ–Ω–µ—Ç—É –∏–∑ –ø–∞—Ä—ã
            balances = await self.client.get_account_balance()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC –∏–∑ BTC-USDT)
            base_currency = symbol.split("-")[0]  # BTC, ETH, SOL
            quote_currency = symbol.split("-")[1]  # USDT

            # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            balance_parts = []
            for b in balances:
                if b.currency == quote_currency:  # USDT
                    balance_parts.append(f"üíµ {b.currency}: ${b.total:,.2f}")
                elif b.currency == base_currency:  # BTC, ETH, SOL
                    balance_parts.append(f"ü™ô {b.currency}: {b.total:.6f}")

            balance_str = " | ".join(balance_parts) if balance_parts else "N/A"

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—ë–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (MARGIN mode detection)
            try:
                borrowed_base = await self.client.get_borrowed_balance(base_currency)
                borrowed_quote = await self.client.get_borrowed_balance(quote_currency)

                if borrowed_base > 0 or borrowed_quote > 0:
                    logger.error(
                        f"üö® BORROWED FUNDS DETECTED! "
                        f"{base_currency}: {borrowed_base:.6f} | {quote_currency}: ${borrowed_quote:.2f}"
                    )
                    logger.error(
                        "‚õî THIS SHOULD NOT HAPPEN IN SPOT MODE! "
                        "Switch Portfolio Mode to SPOT and repay loans IMMEDIATELY!"
                    )
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    self.active = False
            except Exception as e:
                logger.debug(f"Could not check borrowed balance: {e}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç Trade –ø—Ä–∞–≤–∞)
            try:
                open_orders = await self.client.get_open_orders(symbol)
            except Exception as e:
                logger.debug(
                    f"Cannot fetch open orders (requires Trade permission): {e}"
                )
                open_orders = []

            # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            position_info = "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π"
            position_emoji = "‚ö™"
            if symbol in self.positions:
                pos = self.positions[symbol]
                position_emoji = "üü¢" if pos.side == PositionSide.LONG else "üî¥"
                position_info = (
                    f"{pos.side.value} {pos.size:.6f} @ ${pos.entry_price:.2f}"
                )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            win_rate = (
                (self.winning_trades / self.total_trades * 100)
                if self.total_trades > 0
                else 0
            )

            # –≠–º–æ–¥–∑–∏ –¥–ª—è PnL
            pnl_emoji = (
                "üí∞" if self.daily_pnl > 0 else "üìâ" if self.daily_pnl < 0 else "‚ûñ"
            )

            # üåä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            market_regime = "N/A"
            if self.adaptive_regime:
                market_regime = self.adaptive_regime.current_regime.value.upper()

            # –ü–æ–¥—Å—á—ë—Ç —Å–¥–µ–ª–æ–∫ –ø–æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ
            symbol_trades = [t for t in self.trade_history if t["symbol"] == symbol]
            symbol_trades_count = len(symbol_trades)
            symbol_wins = len([t for t in symbol_trades if t["result"] == "WIN"])
            symbol_win_rate = (
                (symbol_wins / symbol_trades_count * 100)
                if symbol_trades_count > 0
                else 0
            )

            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–æ–ª–±—Ü–æ–º —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            logger.info(f"\n{'='*60}")
            logger.info(f"üìà –ü–ê–†–ê: {symbol}")
            logger.info(f"üíµ –¶–ï–ù–ê: ${tick.price:,.2f}")
            logger.info(f"üíº –ë–ê–õ–ê–ù–°: {balance_str}")
            logger.info(f"üìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê: {len(open_orders)}")
            logger.info(f"{position_emoji} –ü–û–ó–ò–¶–ò–Ø: {position_info}")
            logger.info(
                f"üìä –í–°–ï–ì–û –°–î–ï–õ–û–ö: {self.total_trades} (–£—Å–ø–µ—à–Ω—ã—Ö: {win_rate:.1f}%)"
            )
            logger.info(
                f"üéØ –°–î–ï–õ–û–ö –ü–û {symbol}: {symbol_trades_count} (–£—Å–ø–µ—à–Ω—ã—Ö: {symbol_win_rate:.1f}%)"
            )
            logger.info(f"{pnl_emoji} –î–ù–ï–í–ù–û–ô PnL: ${self.daily_pnl:.2f}")
            logger.info(f"üõ°Ô∏è CONSECUTIVE LOSSES: {self.consecutive_losses}")
            logger.info(f"üåä MARKET REGIME: {market_regime}")
            logger.info(f"{'='*60}")

            # üìä –¢–ê–ë–õ–ò–¶–ê –ü–û–°–õ–ï–î–ù–ò–• –°–î–ï–õ–û–ö (–ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É)
            symbol_trades = [t for t in self.trade_history if t["symbol"] == symbol]
            if symbol_trades:
                logger.info(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò {symbol}:")
                logger.info(f"{'‚îÄ'*60}")
                for trade in symbol_trades[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–µ
                    result_emoji = "‚úÖ" if trade["result"] == "WIN" else "‚ùå"
                    time_str = trade["timestamp"].strftime("%H:%M:%S")
                    logger.info(
                        f"{result_emoji} {time_str} | {trade['side']:5} | "
                        f"Entry ${trade['entry_price']:>10,.2f} ‚Üí Exit ${trade['exit_price']:>10,.2f} | "
                        f"PnL ${trade['net_pnl']:>7.2f} | {trade['reason']}"
                    )
                logger.info(f"{'‚îÄ'*60}\n")
            else:
                logger.info(f"\nüìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}\n")

        except Exception as e:
            logger.error(f"Error logging trading status for {symbol}: {e}")

    def configure_enhancements(
        self,
        scoring: bool = True,
        max_consecutive_losses: int = 3,
        daily_profit_lock: float = 5.0,
        breakeven: bool = True,
        trailing_stop: bool = True,
        partial_tp: bool = True,
        session_filtering: bool = True,
        market_regime: bool = True,
        spread_filter: bool = True,
    ) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

        –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

        Args:
            scoring: –í–∫–ª—é—á–∏—Ç—å scoring —Å–∏—Å—Ç–µ–º—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
            max_consecutive_losses: –ú–∞–∫—Å–∏–º—É–º consecutive losses (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)
            daily_profit_lock: –¶–µ–ª–µ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å % (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)
            breakeven: –í–∫–ª—é—á–∏—Ç—å break-even stop
            trailing_stop: –í–∫–ª—é—á–∏—Ç—å trailing stop
            partial_tp: –í–∫–ª—é—á–∏—Ç—å partial take profit (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≤—ã—Ö–æ–¥)
            session_filtering: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º
            market_regime: –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —Ä–µ–∂–∏–º—É —Ä—ã–Ω–∫–∞
            spread_filter: –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É
        """
        self.scoring_enabled = scoring
        self.max_consecutive_losses = max_consecutive_losses
        self.daily_profit_target_percent = daily_profit_lock
        self.profit_lock_enabled = daily_profit_lock > 0
        self.breakeven_enabled = breakeven
        self.trailing_stop_enabled = trailing_stop
        self.partial_tp_enabled = partial_tp
        self.session_filtering_enabled = session_filtering
        self.regime_detection_enabled = market_regime
        self.spread_filter_enabled = spread_filter

        logger.info(
            f"‚ú® Strategy enhancements configured: "
            f"Scoring={scoring}, ConsecLoss={max_consecutive_losses}, "
            f"ProfitLock={daily_profit_lock}%, Trailing={trailing_stop}, "
            f"PartialTP={partial_tp}"
        )

    def stop(self) -> None:
        """Stop the strategy"""
        self.active = False

        # Log Balance Checker statistics
        if self.balance_checker:
            self.balance_checker.log_statistics()

        # Log ARM statistics
        if self.adaptive_regime:
            self.adaptive_regime.log_statistics()

        # Log regime switching statistics
        self.log_regime_statistics()

        logger.info("Scalping strategy stopped")

    def get_performance_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

        –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        win_rate = (
            (self.winning_trades / self.total_trades * 100)
            if self.total_trades > 0
            else 0
        )

        # –†–∞—Å—á—ë—Ç profit factor
        if self.total_trades > 0:
            avg_win = (
                self.daily_pnl / self.winning_trades if self.winning_trades > 0 else 0
            )
            losing_trades = self.total_trades - self.winning_trades
            avg_loss = abs(self.daily_pnl) / losing_trades if losing_trades > 0 else 1
            profit_factor = avg_win / avg_loss if avg_loss > 0 else 0
        else:
            profit_factor = 0

        return {
            "strategy_id": self.strategy_id,
            "active": self.active,
            "total_trades": self.total_trades,
            "winning_trades": self.winning_trades,
            "win_rate": win_rate,
            "daily_pnl": self.daily_pnl,
            "open_positions": len(self.positions),
            "hourly_trade_count": self.trade_count_hourly,
            # üìä –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
            "consecutive_losses": self.consecutive_losses,
            "max_consecutive_losses": self.max_consecutive_losses,
            "profit_factor": profit_factor,
            "enhancements": {
                "scoring": self.scoring_enabled,
                "trailing_stop": self.trailing_stop_enabled,
                "partial_tp": self.partial_tp_enabled,
                "breakeven": self.breakeven_enabled,
                "session_filtering": self.session_filtering_enabled,
                "market_regime": self.regime_detection_enabled,
                "spread_filter": self.spread_filter_enabled,
            },
        }
