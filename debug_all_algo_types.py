"""
–û–¢–õ–ê–î–ö–ê –í–°–ï–• –¢–ò–ü–û–í –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import asyncio
import sys

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def debug_all_algo_types():
    """–û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üîç –û–¢–õ–ê–î–ö–ê –í–°–ï–• –¢–ò–ü–û–í –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í")
    print("=" * 70)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–û–í
        print(f"\nü§ñ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print("-" * 50)

        try:
            all_orders = await bot.client.get_algo_orders()
            print(f"üìä –í—Å–µ–≥–æ: {len(all_orders)}")
            for order in all_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 2. –ü–†–û–í–ï–†–ö–ê OCO
        print(f"\nü§ñ OCO –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            oco_orders = await bot.client.get_algo_orders(algo_type="oco")
            print(f"üìä OCO: {len(oco_orders)}")
            for order in oco_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 3. –ü–†–û–í–ï–†–ö–ê CONDITIONAL
        print(f"\nü§ñ CONDITIONAL –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            conditional_orders = await bot.client.get_algo_orders(
                algo_type="conditional"
            )
            print(f"üìä CONDITIONAL: {len(conditional_orders)}")
            for order in conditional_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 4. –ü–†–û–í–ï–†–ö–ê TRIGGER
        print(f"\nü§ñ TRIGGER –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            trigger_orders = await bot.client.get_algo_orders(algo_type="trigger")
            print(f"üìä TRIGGER: {len(trigger_orders)}")
            for order in trigger_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 5. –ü–†–û–í–ï–†–ö–ê –° –°–ò–ú–í–û–õ–û–ú
        print(f"\nü§ñ –° –°–ò–ú–í–û–õ–û–ú ETH-USDT:")
        print("-" * 50)

        try:
            eth_orders = await bot.client.get_algo_orders(symbol="ETH-USDT")
            print(f"üìä ETH-USDT: {len(eth_orders)}")
            for order in eth_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 6. –ü–†–û–í–ï–†–ö–ê OCO –° –°–ò–ú–í–û–õ–û–ú
        print(f"\nü§ñ OCO –° –°–ò–ú–í–û–õ–û–ú ETH-USDT:")
        print("-" * 50)

        try:
            eth_oco_orders = await bot.client.get_algo_orders(
                symbol="ETH-USDT", algo_type="oco"
            )
            print(f"üìä ETH-USDT OCO: {len(eth_oco_orders)}")
            for order in eth_oco_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 7. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            open_orders = await bot.client.get_open_orders()
            if isinstance(open_orders, list):
                orders_data = open_orders
            else:
                orders_data = open_orders.get("data", [])

            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(orders_data)}")
            for order in orders_data:
                order_id = order.id if hasattr(order, "id") else order.get("ordId")
                symbol = (
                    order.symbol if hasattr(order, "symbol") else order.get("instId")
                )
                order_type = (
                    order.type if hasattr(order, "type") else order.get("ordType")
                )
                print(f"   ID: {order_id}, Symbol: {symbol}, Type: {order_type}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        await bot.shutdown()
        print("\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(debug_all_algo_types())
