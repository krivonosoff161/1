#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def test_after_fix():
    """–¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print("üß™ –¢–ï–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–ê –¢–û–†–ì–û–í–õ–ò")
    print("=" * 60)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
            print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê:")
            print("-" * 30)
            account_config = await client.get_account_config()
            pos_mode = account_config.get("posMode", "N/A")
            print(f"   Position Mode: {pos_mode}")

            if pos_mode == "net_mode":
                print("‚úÖ –†–ï–ñ–ò–ú –ò–°–ü–†–ê–í–õ–ï–ù! Position Mode = net_mode (SPOT)")
            elif pos_mode == "long_short_mode":
                print("‚ùå –†–ï–ñ–ò–ú –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù! Position Mode = long_short_mode (MARGIN)")
                print("   –ù–£–ñ–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ Net –≤ OKX")
                return
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {pos_mode}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–π–º—ã
            print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í:")
            print("-" * 30)
            btc_borrowed = await client.get_borrowed_balance("BTC")
            usdt_borrowed = await client.get_borrowed_balance("USDT")
            print(f"   BTC –∑–∞–π–º: {btc_borrowed}")
            print(f"   USDT –∑–∞–π–º: {usdt_borrowed}")

            if float(btc_borrowed) > 0 or float(usdt_borrowed) > 0:
                print("‚ùå –ï—Å—Ç—å –∑–∞–π–º—ã - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é")
                return
            else:
                print("‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

            # 3. –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            print("\n3Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                test_order = await client.place_order(
                    inst_id="BTC-USDT",
                    side="buy",
                    order_type="LIMIT",
                    quantity="0.0001",
                    price="50000",
                    post_only=True,
                )
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(
                    f"   Order ID: {test_order.get('data', [{}])[0].get('ordId', 'N/A')}"
                )

                # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                if test_order.get("data"):
                    order_id = test_order["data"][0]["ordId"]
                    await client.cancel_order("BTC-USDT", order_id)
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")

                print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
                print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_full_trading_system.py")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
                print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
                print("   –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ OKX")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_after_fix())
