import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

"""
–ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ò–ü–û–í –û–†–î–ï–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º: Market, Limit, OCO, Algo, Positions
"""

import asyncio
import sys
from datetime import datetime

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def check_all_order_types():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ"""
    print("üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–†–î–ï–†–û–í")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê (–æ–±—ã—á–Ω—ã–µ)
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê (–æ–±—ã—á–Ω—ã–µ):")
        print("-" * 50)

        try:
            open_orders = await bot.client.get_open_orders()
            if isinstance(open_orders, list):
                orders_data = open_orders
            else:
                orders_data = open_orders.get("data", [])

            print(f"üìä –û–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders_data)}")
            for i, order in enumerate(orders_data, 1):
                order_id = order.id if hasattr(order, "id") else order.get("ordId")
                symbol = (
                    order.symbol if hasattr(order, "symbol") else order.get("instId")
                )
                side = order.side if hasattr(order, "side") else order.get("side")
                order_type = (
                    order.type if hasattr(order, "type") else order.get("ordType")
                )
                price = order.price if hasattr(order, "price") else order.get("px")
                size = order.size if hasattr(order, "size") else order.get("sz")

                print(f"   {i}. ID: {order_id}")
                print(f"      Symbol: {symbol}")
                print(f"      Side: {side}")
                print(f"      Type: {order_type}")
                print(f"      Price: {price}")
                print(f"      Size: {size}")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 2. –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê (OCO, TP/SL)
        print(f"ü§ñ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê (OCO, TP/SL):")
        print("-" * 50)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã algo –æ—Ä–¥–µ—Ä–æ–≤
            algo_types = ["oco", "conditional", "trigger"]

            for algo_type in algo_types:
                print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º {algo_type.upper()} –æ—Ä–¥–µ—Ä–∞...")
                algo_orders = await bot.client.get_algo_orders(algo_type=algo_type)
                print(f"   üìä {algo_type.upper()}: {len(algo_orders)} –æ—Ä–¥–µ—Ä–æ–≤")

                for i, order in enumerate(algo_orders, 1):
                    algo_id = order.get("algoId", "N/A")
                    symbol = order.get("instId", "N/A")
                    order_type = order.get("ordType", "N/A")
                    side = order.get("side", "N/A")
                    size = order.get("sz", "N/A")
                    tp_price = order.get("tpTriggerPx", "N/A")
                    sl_price = order.get("slTriggerPx", "N/A")
                    state = order.get("state", "N/A")

                    print(f"      {i}. Algo ID: {algo_id}")
                    print(f"         Symbol: {symbol}")
                    print(f"         Type: {order_type}")
                    print(f"         Side: {side}")
                    print(f"         Size: {size}")
                    print(f"         TP: {tp_price}")
                    print(f"         SL: {sl_price}")
                    print(f"         State: {state}")
                    print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 3. –ü–û–ó–ò–¶–ò–ò
        print(f"üíº –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
        print("-" * 50)

        try:
            positions = await bot.client.get_positions()
            print(f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")

            for i, pos in enumerate(positions, 1):
                symbol = pos.get("instId", "N/A")
                side = pos.get("posSide", "N/A")
                size = pos.get("pos", "N/A")
                avg_price = pos.get("avgPx", "N/A")
                upl = pos.get("upl", "N/A")

                print(f"   {i}. Symbol: {symbol}")
                print(f"      Side: {side}")
                print(f"      Size: {size}")
                print(f"      Avg Price: {avg_price}")
                print(f"      Unrealized PnL: {upl}")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

        # 4. –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        print(f"üìú –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):")
        print("-" * 50)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è ETH-USDT
            history = await bot.client.get_orders_history("ETH-USDT", limit=20)
            print(f"üìä –ò—Å—Ç–æ—Ä–∏—è ETH-USDT: {len(history)} –æ—Ä–¥–µ—Ä–æ–≤")

            for i, order in enumerate(history[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                order_id = order.get("ordId", "N/A")
                symbol = order.get("instId", "N/A")
                side = order.get("side", "N/A")
                order_type = order.get("ordType", "N/A")
                size = order.get("sz", "N/A")
                price = order.get("px", "N/A")
                state = order.get("state", "N/A")
                fill_size = order.get("fillSz", "N/A")
                fill_price = order.get("fillPx", "N/A")
                c_time = order.get("cTime", "N/A")

                print(f"   {i}. ID: {order_id}")
                print(f"      Symbol: {symbol}")
                print(f"      Side: {side}")
                print(f"      Type: {order_type}")
                print(f"      Size: {size}")
                print(f"      Price: {price}")
                print(f"      State: {state}")
                print(f"      Fill Size: {fill_size}")
                print(f"      Fill Price: {fill_price}")
                print(f"      Time: {c_time}")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        # 5. –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö API
        print(f"üîß –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö API:")
        print("-" * 50)

        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
            import aiohttp

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": "dummy",  # –î–ª—è sandbox –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å—å
                "OK-ACCESS-TIMESTAMP": str(int(datetime.now().timestamp() * 1000)),
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
            url = f"{bot.client.base_url}/api/v5/trade/orders-pending"

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    result = await response.json()
                    print(f"üìä –ü—Ä—è–º–æ–π API –æ—Ç–≤–µ—Ç:")
                    print(f"   Code: {result.get('code')}")
                    print(f"   Message: {result.get('msg')}")
                    print(f"   Data: {result.get('data', [])}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(result.get('data', []))}")

                    for i, order in enumerate(result.get("data", []), 1):
                        print(f"      {i}. {order}")
                        print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        await bot.shutdown()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(check_all_order_types())
