"""
Volatility Adapter Module

–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ (LOW/NORMAL/HIGH).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- Stop Loss / Take Profit –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
- –ü–æ—Ä–æ–≥–∞ scoring –¥–ª—è –≤—Ö–æ–¥–∞
- –†–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
- –¢–∞–π–º–∞—É—Ç–æ–≤ –∏ cooldown
"""

from enum import Enum
from typing import Dict, Optional

from loguru import logger
from pydantic import BaseModel, Field


class VolatilityRegime(str, Enum):
    """–†–µ–∂–∏–º—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""

    LOW = "LOW_VOL"  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (< 1% ATR)
    NORMAL = "NORMAL"  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (1-2% ATR)
    HIGH = "HIGH_VOL"  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (> 2% ATR)


class VolatilityModeConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""

    enabled: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏—é")

    # –ü–æ—Ä–æ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    low_volatility_threshold: float = Field(
        default=0.01, ge=0.005, le=0.02, description="–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (1%)"
    )
    high_volatility_threshold: float = Field(
        default=0.02, ge=0.015, le=0.05, description="–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (2%)"
    )

    # LOW VOLATILITY —Ä–µ–∂–∏–º (—É–∑–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, —á–∞—Å—Ç—ã–µ —Å–¥–µ–ª–∫–∏)
    low_vol_sl_multiplier: float = Field(
        default=1.5, ge=1.0, le=3.0, description="SL –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è LOW"
    )
    low_vol_tp_multiplier: float = Field(
        default=1.0, ge=0.5, le=2.0, description="TP –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è LOW"
    )
    low_vol_score_threshold: int = Field(
        default=6, ge=4, le=10, description="Score –ø–æ—Ä–æ–≥ –¥–ª—è LOW (–ª–µ–≥—á–µ –≤—Ö–æ–¥–∏—Ç—å)"
    )
    low_vol_position_size_multiplier: float = Field(
        default=1.2, ge=0.8, le=1.5, description="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è LOW"
    )

    # NORMAL —Ä–µ–∂–∏–º (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    normal_vol_sl_multiplier: float = Field(
        default=2.5, ge=1.5, le=4.0, description="SL –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è NORMAL"
    )
    normal_vol_tp_multiplier: float = Field(
        default=1.5, ge=1.0, le=3.0, description="TP –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è NORMAL"
    )
    normal_vol_score_threshold: int = Field(
        default=7, ge=5, le=10, description="Score –ø–æ—Ä–æ–≥ –¥–ª—è NORMAL"
    )
    normal_vol_position_size_multiplier: float = Field(
        default=1.0, ge=0.8, le=1.5, description="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è NORMAL"
    )

    # HIGH VOLATILITY —Ä–µ–∂–∏–º (—à–∏—Ä–æ–∫–∏–µ —Å—Ç–æ–ø—ã, –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)
    high_vol_sl_multiplier: float = Field(
        default=3.5, ge=2.0, le=5.0, description="SL –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è HIGH"
    )
    high_vol_tp_multiplier: float = Field(
        default=2.5, ge=1.5, le=4.0, description="TP –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è HIGH"
    )
    high_vol_score_threshold: int = Field(
        default=8, ge=6, le=11, description="Score –ø–æ—Ä–æ–≥ –¥–ª—è HIGH (—Å—Ç—Ä–æ–∂–µ)"
    )
    high_vol_position_size_multiplier: float = Field(
        default=0.7, ge=0.5, le=1.0, description="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è HIGH (–º–µ–Ω—å—à–µ —Ä–∏—Å–∫)"
    )


class VolatilityParameters(BaseModel):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""

    regime: VolatilityRegime
    sl_multiplier: float
    tp_multiplier: float
    score_threshold: int
    position_size_multiplier: float
    description: str


class VolatilityAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ.

    Example:
        >>> config = VolatilityModeConfig(enabled=True)
        >>> adapter = VolatilityAdapter(config)
        >>> params = adapter.get_parameters(current_volatility=0.025)
        >>> logger.info(f"Regime: {params.regime}, SL: {params.sl_multiplier}x")
    """

    def __init__(self, config: VolatilityModeConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        self.config = config
        self.current_regime: Optional[VolatilityRegime] = None
        self.regime_change_count = 0

        logger.info(
            f"Volatility Adapter initialized: "
            f"LOW<{config.low_volatility_threshold:.1%}, "
            f"HIGH>{config.high_volatility_threshold:.1%}"
        )

    def get_parameters(
        self, current_volatility: float, market_regime: Optional[str] = None
    ) -> VolatilityParameters:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.

        Args:
            current_volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ATR / Price)
            market_regime: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä—ã–Ω–∫–∞

        Returns:
            VolatilityParameters: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Example:
            >>> # ATR = 50, Price = 2000 -> volatility = 0.025 (2.5%)
            >>> params = adapter.get_parameters(current_volatility=0.025)
            >>> # –ü–æ–ª—É—á–∞–µ–º HIGH volatility —Ä–µ–∂–∏–º
        """
        if not self.config.enabled:
            # –ï—Å–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NORMAL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            return self._get_normal_parameters()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        new_regime = self._detect_volatility_regime(current_volatility)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞
        if new_regime != self.current_regime:
            self._log_regime_change(self.current_regime, new_regime, current_volatility)
            self.current_regime = new_regime
            self.regime_change_count += 1

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
        if new_regime == VolatilityRegime.LOW:
            return self._get_low_volatility_parameters()
        elif new_regime == VolatilityRegime.HIGH:
            return self._get_high_volatility_parameters()
        else:
            return self._get_normal_parameters()

    def _detect_volatility_regime(self, volatility: float) -> VolatilityRegime:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        Args:
            volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR / Price)

        Returns:
            VolatilityRegime: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        """
        if volatility < self.config.low_volatility_threshold:
            return VolatilityRegime.LOW
        elif volatility > self.config.high_volatility_threshold:
            return VolatilityRegime.HIGH
        else:
            return VolatilityRegime.NORMAL

    def _get_low_volatility_parameters(self) -> VolatilityParameters:
        """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return VolatilityParameters(
            regime=VolatilityRegime.LOW,
            sl_multiplier=self.config.low_vol_sl_multiplier,
            tp_multiplier=self.config.low_vol_tp_multiplier,
            score_threshold=self.config.low_vol_score_threshold,
            position_size_multiplier=self.config.low_vol_position_size_multiplier,
            description="Low volatility: Tight stops, easier entry, larger positions",
        )

    def _get_normal_parameters(self) -> VolatilityParameters:
        """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return VolatilityParameters(
            regime=VolatilityRegime.NORMAL,
            sl_multiplier=self.config.normal_vol_sl_multiplier,
            tp_multiplier=self.config.normal_vol_tp_multiplier,
            score_threshold=self.config.normal_vol_score_threshold,
            position_size_multiplier=self.config.normal_vol_position_size_multiplier,
            description="Normal volatility: Standard parameters",
        )

    def _get_high_volatility_parameters(self) -> VolatilityParameters:
        """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return VolatilityParameters(
            regime=VolatilityRegime.HIGH,
            sl_multiplier=self.config.high_vol_sl_multiplier,
            tp_multiplier=self.config.high_vol_tp_multiplier,
            score_threshold=self.config.high_vol_score_threshold,
            position_size_multiplier=self.config.high_vol_position_size_multiplier,
            description="High volatility: Wide stops, stricter entry, smaller positions",
        )

    def _log_regime_change(
        self,
        old_regime: Optional[VolatilityRegime],
        new_regime: VolatilityRegime,
        volatility: float,
    ):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.

        Args:
            old_regime: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º
            new_regime: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º
            volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        """
        if old_regime is None:
            logger.info(
                f"üìä VOLATILITY REGIME DETECTED: {new_regime.value} "
                f"(volatility: {volatility:.2%})"
            )
        else:
            logger.warning(
                f"üìä VOLATILITY REGIME CHANGED: {old_regime.value} ‚Üí {new_regime.value} "
                f"(volatility: {volatility:.2%}, change #{self.regime_change_count})"
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º, –∏–∑–±–µ–≥–∞—è —Ä–µ–∫—É—Ä—Å–∏–∏)
        if new_regime == VolatilityRegime.LOW:
            params = self._get_low_volatility_parameters()
        elif new_regime == VolatilityRegime.HIGH:
            params = self._get_high_volatility_parameters()
        else:
            params = self._get_normal_parameters()
            
        logger.info(
            f"   New parameters: "
            f"SL={params.sl_multiplier}x ATR, "
            f"TP={params.tp_multiplier}x ATR, "
            f"Score‚â•{params.score_threshold}/12, "
            f"Size={params.position_size_multiplier}x"
        )

    def get_regime_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∂–∏–º–µ
        """
        return {
            "enabled": self.config.enabled,
            "current_regime": self.current_regime.value if self.current_regime else None,
            "regime_changes": self.regime_change_count,
            "low_threshold": self.config.low_volatility_threshold,
            "high_threshold": self.config.high_volatility_threshold,
        }

    def calculate_volatility(
        self, atr: float, price: float, normalize: bool = True
    ) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑ ATR –∏ —Ü–µ–Ω—ã.

        Args:
            atr: Average True Range
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            normalize: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫ —Ü–µ–Ω–µ (%)

        Returns:
            float: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (% –µ—Å–ª–∏ normalize=True)

        Example:
            >>> # ATR=50, Price=2000
            >>> vol = adapter.calculate_volatility(50, 2000)
            >>> # vol = 0.025 (2.5%)
        """
        if price <= 0:
            logger.error(f"Invalid price: {price}")
            return 0.0

        if normalize:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ATR –∫ —Ü–µ–Ω–µ (–ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç)
            return atr / price
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π ATR
            return atr

    def should_adjust_parameters(
        self, volatility: float, last_check_volatility: float, threshold: float = 0.003
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

        Args:
            volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            last_check_volatility: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            threshold: –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (0.3% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ—Å—á–µ—Ç

        Example:
            >>> # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å 1.5% –¥–æ 2.1% (—Ä–∞–∑–Ω–∏—Ü–∞ 0.6%)
            >>> should_adjust = adapter.should_adjust_parameters(0.021, 0.015)
            >>> # True (–±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ 0.3%)
        """
        change = abs(volatility - last_check_volatility)
        return change >= threshold

    def get_adjusted_score_threshold(
        self, base_threshold: int, current_volatility: float
    ) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ scoring.

        Args:
            base_threshold: –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            current_volatility: –¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

        Returns:
            int: –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥

        Example:
            >>> # –í HIGH VOL —Ä–µ–∂–∏–º–µ –ø–æ—Ä–æ–≥ —Å—Ç—Ä–æ–∂–µ
            >>> threshold = adapter.get_adjusted_score_threshold(7, 0.025)
            >>> # threshold = 8
        """
        params = self.get_parameters(current_volatility)
        return params.score_threshold

