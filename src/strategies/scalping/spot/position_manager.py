"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL
- –ü—Ä–æ–≤–µ—Ä–∫–∞ OCO —Å—Ç–∞—Ç—É—Å–∞
- Profit Harvesting (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥)
- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TIME_LIMIT
- Partial TP
- PHANTOM detection
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger

from src.models import OrderSide, OrderType, Position, PositionSide

from .batch_order_manager import BatchOrderManager


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""

    symbol: str
    side: str
    entry_price: float
    exit_price: float
    size: float
    gross_pnl: float
    commission: float
    net_pnl: float
    duration_sec: float
    reason: str
    timestamp: datetime


class PositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π.
    """

    def __init__(self, client, config, adaptive_regime=None):
        """
        Args:
            client: OKX –∫–ª–∏–µ–Ω—Ç
            config: Scalping –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            adaptive_regime: ARM –º–æ–¥—É–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.client = client
        self.config = config
        self.adaptive_regime = adaptive_regime

        # Batch Order Manager –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π TP/SL
        self.batch_manager = BatchOrderManager(client)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_close_value_usd = 15.0

        # ‚ú® PROFIT HARVESTING: –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ ARM! (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥ —Ä–µ–∂–∏–º)
        # Default –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ ARM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        self.profit_harvesting_enabled = False
        self.quick_profit_threshold = 0.20
        self.quick_profit_time_limit = 120

        # –ï—Å–ª–∏ ARM –µ—Å—Ç—å - –±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.adaptive_regime:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ (–±–µ–∑ balance_manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            regime_params = self.adaptive_regime.get_current_parameters()
            if regime_params:
                self.profit_harvesting_enabled = regime_params.ph_enabled
                self.quick_profit_threshold = regime_params.ph_threshold
                self.quick_profit_time_limit = regime_params.ph_time_limit

            logger.info(
                "‚úÖ PositionManager initialized | "
                "Profit Harvesting: ADAPTIVE (from ARM)"
            )
            logger.debug(
                f"   üîç PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM —Ä–µ–∂–∏–º–∞ '{self.adaptive_regime.current_regime.value}':\n"
                f"      Enabled: {self.profit_harvesting_enabled}\n"
                f"      Threshold: ${self.quick_profit_threshold:.2f}\n"
                f"      Time Limit: {self.quick_profit_time_limit}s"
            )
        else:
            logger.info(
                f"‚úÖ PositionManager initialized | "
                f"Profit Harvesting: {'ON' if self.profit_harvesting_enabled else 'OFF'} "
                f"(${self.quick_profit_threshold} in {self.quick_profit_time_limit}s)"
            )

        # Partial TP
        self.partial_tp_enabled = getattr(config, "partial_tp_enabled", False)

    async def monitor_positions(
        self, positions: Dict[str, Position], current_prices: Dict[str, float]
    ) -> List[Tuple[str, str]]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        1. OCO —Å—Ç–∞—Ç—É—Å (TP/SL —Å—Ä–∞–±–æ—Ç–∞–ª?)
        2. Profit Harvesting (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥)
        3. TIME_LIMIT (–º–∞–∫—Å –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è)
        4. Partial TP (—á–∞—Å—Ç–∏—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã)

        Args:
            positions: –°–ª–æ–≤–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_prices: –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º

        Returns:
            List[(symbol, reason)] - —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        to_close = []

        for symbol, position in list(positions.items()):
            current_price = current_prices.get(symbol)
            if not current_price:
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏
            position.update_price(current_price)

            # 1. üî• –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ OCO —á–µ—Ä–µ–∑ /trade/fills API (–ë–ê–ì!)
            # –ü—Ä–æ–±–ª–µ–º–∞: –ù–∞—Ö–æ–¥–∏—Ç –°–¢–ê–†–´–ï fills –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ 7 —Å–µ–∫
            # –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ OCO –Ω–∞ –±–∏—Ä–∂–µ + PH + max_holding
            # if position.algo_order_id:
            #     fills_result = await self._check_fills_closure(position)
            #     ...

            # 2. ‚ú® PROFIT HARVESTING (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –º–∏–∫—Ä–æ-–ø—Ä–æ—Ñ–∏—Ç–æ–º)
            # –û–±–Ω–æ–≤–ª—è–µ–º PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM (–µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è —Ä–µ–∂–∏–º)
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                self.profit_harvesting_enabled = regime_params.ph_enabled
                self.quick_profit_threshold = regime_params.ph_threshold
                self.quick_profit_time_limit = regime_params.ph_time_limit

            if self.profit_harvesting_enabled:
                should_harvest = await self._check_profit_harvesting(
                    position, current_price
                )
                if should_harvest:
                    to_close.append((symbol, "profit_harvesting"))
                    continue

            # 3. ‚è∞ MAX HOLDING (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
            if self.adaptive_regime:
                max_holding = (
                    self.adaptive_regime.get_current_parameters().max_holding_minutes
                )
                time_since_open = (
                    datetime.utcnow() - position.timestamp
                ).total_seconds() / 60

                if time_since_open >= max_holding:
                    logger.warning(
                        f"‚è∞ MAX HOLDING EXCEEDED: {symbol} "
                        f"{position.side.value.upper()} | "
                        f"Time: {time_since_open:.1f} min / "
                        f"{max_holding} min | "
                        f"PnL: ${position.unrealized_pnl:.4f} | "
                        f"Closing at market..."
                    )
                    to_close.append((symbol, "max_holding_exceeded"))
                    continue

            # 4. Partial TP (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.partial_tp_enabled:
                await self._check_partial_tp(symbol, position, current_price)

        return to_close

    async def _check_fills_closure(
        self, position: Position
    ) -> Optional[Tuple[str, float]]:
        """
        üî• –ù–û–í–´–ô –ú–ï–¢–û–î (18.10.2025): –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ /trade/fills API!

        –°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô —Å–ø–æ—Å–æ–± –æ—Ç—Å–ª–µ–¥–∏—Ç—å OCO –∑–∞–∫—Ä—ã—Ç–∏—è (–æ–±—Ö–æ–¥ Invalid Sign).

        –õ–æ–≥–∏–∫–∞:
        1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ fills –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        2. –ò—â–µ–º fill —Å algoId == position.algo_order_id
        3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º TP/SL –ø–æ execType

        Returns:
            Optional[Tuple[str, float]]: (reason, exit_price) –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞, None –∏–Ω–∞—á–µ
        """
        try:
            if not position.algo_order_id:
                return None

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ fills –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            fills = await self.client.get_recent_fills(symbol=position.symbol, limit=50)

            if not fills:
                return None

            # –ò—â–µ–º –ó–ê–ö–†–´–í–ê–Æ–©–ò–ô fill
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û (19.10.2025): algoId –ù–ï–¢ –≤ fills! –ò—â–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + —Å—Ç–æ—Ä–æ–Ω–µ + execType

            position_open_ts = int(position.timestamp.timestamp() * 1000)

            for fill in fills:
                fill_ts = int(fill.get("ts", 0))
                fill_side = fill.get("side", "")
                fill_px = float(fill.get("fillPx", 0))
                exec_type = fill.get("execType", "")

                # Fill –ü–û–°–õ–ï –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏?
                if fill_ts <= position_open_ts:
                    continue

                # Fill - —ç—Ç–æ –ó–ê–ö–†–´–¢–ò–ï –Ω–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏?
                if position.side == PositionSide.LONG:
                    is_closing = fill_side == "sell"
                else:
                    is_closing = fill_side == "buy"

                if not is_closing:
                    continue

                # ‚úÖ –≠—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π fill!
                logger.debug(
                    f"üîç Found closing fill for {position.symbol}: "
                    f"execType={exec_type}, fillPx={fill_px}, side={fill_side}, "
                    f"time_diff={(fill_ts - position_open_ts)/1000:.1f}s"
                )

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ execType
                if exec_type == "T":
                    reason = "oco_take_profit"
                elif exec_type == "S":
                    reason = "oco_stop_loss"
                elif exec_type == "M":
                    reason = "manual_close"  # –ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –±–æ—Ç–æ–º
                else:
                    # Fallback: –ø–æ —Ü–µ–Ω–µ
                    if position.side == PositionSide.LONG:
                        reason = (
                            "oco_take_profit"
                            if fill_px >= position.take_profit * 0.999
                            else "oco_stop_loss"
                        )
                    else:
                        reason = (
                            "oco_take_profit"
                            if fill_px <= position.take_profit * 1.001
                            else "oco_stop_loss"
                        )

                logger.info(
                    f"üí∞ OCO –ó–ê–ö–†–´–¢ –ù–ê –ë–ò–†–ñ–ï: {position.symbol} | "
                    f"Reason: {reason} | Price: ${fill_px:.2f} | "
                    f"ExecType: {exec_type}"
                )

                return (reason, fill_px)

            return None

        except Exception as e:
            logger.debug(f"Fills closure check failed: {e}")
            return None

    async def _check_balance_closure(self, position: Position) -> bool:
        """
        ‚ö†Ô∏è DEPRECATED (18.10.2025): –ò—Å–ø–æ–ª—å–∑—É–µ–º _check_fills_closure() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ!

        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å (–æ–±—Ö–æ–¥ Invalid Sign!).

        –õ–æ–≥–∏–∫–∞:
        - LONG: –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å BTC/ETH (–µ—Å–ª–∏ = 0 ‚Üí –∑–∞–∫—Ä—ã—Ç–∞ –±–∏—Ä–∂–µ–π)
        - SHORT: –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º (–Ω—É–∂–µ–Ω USDT, –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –±–∏—Ä–∂–µ–π
        """
        try:
            # –¢–æ–ª—å–∫–æ –¥–ª—è LONG (SHORT –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç USDT –±–∞–ª–∞–Ω—Å)
            if position.side != PositionSide.LONG:
                return False

            base_currency = position.symbol.split("-")[0]
            actual_balance = await self.client.get_balance(base_currency)

            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å < 1% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ‚Üí –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –±–∏—Ä–∂–µ–π
            if actual_balance < position.size * 0.01:
                logger.info(
                    f"üîç Balance Check: {position.symbol} LONG –∑–∞–∫—Ä—ã—Ç–∞ –±–∏—Ä–∂–µ–π | "
                    f"Expected: {position.size:.8f}, Actual: {actual_balance:.8f}"
                )
                return True

            return False

        except Exception as e:
            logger.debug(f"Balance closure check failed: {e}")
            return False

    async def _check_oco_status(self, position: Position) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OCO –æ—Ä–¥–µ—Ä–∞.

        –ö–†–ò–¢–ò–ß–ù–û (18.10.2025): –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ TP/SL –¥–ª—è PnL!

        Returns:
            str: Reason –µ—Å–ª–∏ OCO —Å—Ä–∞–±–æ—Ç–∞–ª, None –∏–Ω–∞—á–µ
        """
        try:
            oco_status = await self.client.get_algo_order_status(position.algo_order_id)

            if not oco_status:
                return None

            state = oco_status.get("state")

            # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ß–¢–û –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –±–∏—Ä–∂–∏
            logger.debug(
                f"üîç OCO Status {position.symbol}: "
                f"state={state}, "
                f"actualSide={oco_status.get('actualSide')}, "
                f"actualPx={oco_status.get('actualPx')}"
            )

            if state == "filled":
                actual_side = oco_status.get("actualSide", "")
                actual_px = float(oco_status.get("actualPx", 0))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ü–û actualSide (–Ω–∞–¥–µ–∂–Ω–µ–µ!)
                if actual_side == "tp":
                    reason = "oco_take_profit"
                elif actual_side == "sl":
                    reason = "oco_stop_loss"
                else:
                    # Fallback: –ø–æ —Ü–µ–Ω–µ
                    if abs(actual_px - position.take_profit) < abs(
                        actual_px - position.stop_loss
                    ):
                        reason = "oco_take_profit"
                    else:
                        reason = "oco_stop_loss"

                logger.info(
                    f"üí∞ OCO FILLED: {position.symbol} | "
                    f"Reason: {reason} | "
                    f"Price: ${actual_px:.4f} | "
                    f"TP: ${position.take_profit:.4f} | "
                    f"SL: ${position.stop_loss:.4f}"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –†–ï–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ç –±–∏—Ä–∂–∏!
                position.update_price(actual_px)

                return reason

        except Exception as e:
            logger.error(f"‚ùå Error checking OCO status {position.symbol}: {e}")

        return None

    async def _check_profit_harvesting(
        self, position: Position, current_price: float
    ) -> bool:
        """
        ‚ú® PROFIT HARVESTING (–∏–∑ Perplexity AI + ARM –∞–¥–∞–ø—Ç–∞—Ü–∏—è)

        –î–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ —Å—Ä–∞–∑—É –≤ –ø–ª—é—Å!

        –ù–û–í–û–ï (18.10.2025): –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM:
        - TRENDING: $0.16 –∑–∞ 60 —Å–µ–∫ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ!)
        - RANGING: $0.20 –∑–∞ 120 —Å–µ–∫ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        - CHOPPY: $0.25 –∑–∞ 180 —Å–µ–∫ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!)

        Args:
            position: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
        """
        time_since_open = (datetime.utcnow() - position.timestamp).total_seconds()

        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL –≤ USD
        if position.side == PositionSide.LONG:
            # LONG: (exit - entry) * quantity
            pnl_usd = (current_price - position.entry_price) * position.size
            price_change_pct = (
                (current_price - position.entry_price) / position.entry_price
            ) * 100
        else:
            # SHORT: (entry - exit) * quantity
            pnl_usd = (position.entry_price - current_price) * position.size
            price_change_pct = (
                (position.entry_price - current_price) / position.entry_price
            ) * 100

        # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ö–ê–ñ–î–£–Æ –ø—Ä–æ–≤–µ—Ä–∫—É
        logger.debug(
            f"üîç PH Check: {position.symbol} {position.side.value.upper()} | "
            f"Time: {time_since_open:.1f}s/{self.quick_profit_time_limit}s | "
            f"PnL: ${pnl_usd:.4f}/${self.quick_profit_threshold:.2f} | "
            f"Price Œî: {price_change_pct:+.3f}%"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π Profit Harvesting
        if (
            pnl_usd >= self.quick_profit_threshold
            and time_since_open < self.quick_profit_time_limit
        ):
            logger.info(
                f"üí∞ PROFIT HARVESTING TRIGGERED! {position.symbol} {position.side.value.upper()}\n"
                f"   Quick profit: ${pnl_usd:.4f} (threshold: ${self.quick_profit_threshold:.2f})\n"
                f"   Time: {time_since_open:.1f}s (limit: {self.quick_profit_time_limit}s)\n"
                f"   Price change: {price_change_pct:+.3f}%\n"
                f"   Entry: ${position.entry_price:.4f} ‚Üí Exit: ${current_price:.4f}"
            )
            return True

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–µ—Å–ª–∏ –±–ª–∏–∑–∫–æ)
        if time_since_open < self.quick_profit_time_limit:
            if pnl_usd > 0 and pnl_usd >= self.quick_profit_threshold * 0.5:
                logger.debug(
                    f"   ‚è≥ PH –±–ª–∏–∑–∫–æ: ${pnl_usd:.4f} / ${self.quick_profit_threshold:.2f} "
                    f"({pnl_usd/self.quick_profit_threshold*100:.0f}%)"
                )

        return False

    async def _check_partial_tp(
        self, symbol: str, position: Position, current_price: float
    ):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ Take Profit.

        (–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Partial TP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        pass

    async def close_position(
        self, symbol: str, position: Position, current_price: float, reason: str
    ) -> Optional[TradeResult]:
        """
        –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é.

        –®–∞–≥–∏:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PHANTOM (–±–∞–ª–∞–Ω—Å < expected)
        2. –ü—Ä–æ–≤–µ—Ä–∫–∞ min_close_value ($15)
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è SHORT
        4. –†–∞–∑–º–µ—â–µ–Ω–∏–µ MARKET –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        5. –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π + NET PnL
        6. –°–æ–∑–¥–∞–Ω–∏–µ TradeResult

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            position: –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è

        Returns:
            TradeResult –∏–ª–∏ None
        """
        try:
            # 1. PHANTOM detection
            if position.side == PositionSide.LONG:
                base_currency = symbol.split("-")[0]
                actual_balance = await self.client.get_balance(base_currency)

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                if (
                    actual_balance < position.size * 0.95
                ):  # 95% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å (–±—ã–ª–æ 99%)
                    time_since_open = (
                        datetime.utcnow() - position.timestamp
                    ).total_seconds()

                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ä–∞—è (>10 –º–∏–Ω) - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ PHANTOM
                    if time_since_open > 600:  # 10 –º–∏–Ω—É—Ç (–±—ã–ª–æ 5 –º–∏–Ω)
                        logger.error(
                            f"‚ùå PHANTOM position detected: {symbol}\n"
                            f"   Expected: {position.size:.8f}, Actual: {actual_balance:.8f}\n"
                            f"   Age: {time_since_open/60:.1f} min\n"
                            f"   Removing from tracking (likely closed on exchange)"
                        )
                        return None  # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º - —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!
                    else:
                        # –ú–æ–ª–æ–¥–∞—è –ø–æ–∑–∏—Ü–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–∏—Å—Å–∏—è –∏–ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                        logger.warning(
                            f"‚ö†Ô∏è Suspicious position size: {symbol}\n"
                            f"   Expected: {position.size:.8f}, Actual: {actual_balance:.8f}\n"
                            f"   Difference: {(1 - actual_balance/position.size)*100:.2f}%\n"
                            f"   Age: {time_since_open:.1f}s\n"
                            f"   Proceeding with close..."
                        )

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–∞
            position_value = position.size * current_price

            if position_value < self.min_close_value_usd:
                logger.debug(
                    f"‚ö™ Position too small to close: ${position_value:.2f} < "
                    f"${self.min_close_value_usd}"
                )
                return None

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è SHORT
            if position.side == PositionSide.SHORT:
                required_usdt = position.size * current_price * 1.01
                base_balance = await self.client.get_account_balance()
                usdt_available = next(
                    (b.free for b in base_balance if b.currency == "USDT"), 0.0
                )

                if usdt_available < required_usdt:
                    logger.warning(
                        f"‚ö†Ô∏è Cannot close SHORT {symbol}: "
                        f"Need ${required_usdt:.2f} USDT, have ${usdt_available:.2f}"
                    )
                    return None

            # 4. –û—Ç–º–µ–Ω—è–µ–º OCO –æ—Ä–¥–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if hasattr(position, "algo_order_id") and position.algo_order_id:
                try:
                    logger.info(
                        f"üîÑ Cancelling OCO order {position.algo_order_id} before closing position"
                    )
                    await self.client.cancel_algo_order(position.algo_order_id, symbol)
                    logger.info(f"‚úÖ OCO order {position.algo_order_id} cancelled")
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è Failed to cancel OCO order {position.algo_order_id}: {e}"
                    )
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–∞–∂–µ –µ—Å–ª–∏ OCO –Ω–µ –æ—Ç–º–µ–Ω–∏–ª—Å—è

            # 5. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            order_side = (
                OrderSide.SELL if position.side == PositionSide.LONG else OrderSide.BUY
            )

            logger.info(
                f"üî¥ CLOSING ORDER: {order_side.value.upper()} {position.size:.8f} "
                f"{symbol} @ ${current_price:.4f} | Reason: {reason}"
            )

            close_order = await self.client.place_order(
                symbol=symbol,
                side=order_side,
                order_type=OrderType.MARKET,
                quantity=position.size,
            )

            if not close_order:
                logger.error(f"‚ùå Failed to close position {symbol}")
                return None

            # 6. –†–∞—Å—á–µ—Ç PnL —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
            duration_sec = (datetime.utcnow() - position.timestamp).total_seconds()

            # Gross PnL
            gross_pnl = position.unrealized_pnl

            # –ö–æ–º–∏—Å—Å–∏–∏ OKX (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ–¥ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø entry –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ü–µ–Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            price_diff_pct = (
                abs(current_price - position.entry_price) / position.entry_price
            )

            if price_diff_pct < 0.001:  # < 0.1% —Ä–∞–∑–Ω–∏—Ü–∞ = POST-ONLY (Maker)
                open_commission_rate = 0.0008  # POST-ONLY entry (MAKER)
                logger.debug(f"üí∞ Entry: POST-ONLY (Maker) - 0.08% –∫–æ–º–∏—Å—Å–∏—è")
            else:
                open_commission_rate = 0.001  # MARKET entry (TAKER)
                logger.debug(f"üí∞ Entry: MARKET (Taker) - 0.10% –∫–æ–º–∏—Å—Å–∏—è")

            close_commission_rate = 0.001  # MARKET exit (TAKER)
            open_value = position.size * position.entry_price
            close_value = position.size * current_price
            open_commission = open_value * open_commission_rate
            close_commission = close_value * close_commission_rate
            total_commission = open_commission + close_commission

            # NET PnL
            net_pnl = gross_pnl - total_commission

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"üí∞ TRADE CLOSED: {symbol} {position.side.value.upper()}")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"   Entry: ${position.entry_price:.4f}")
            logger.info(f"   Exit: ${current_price:.4f}")
            logger.info(f"   Size: {position.size:.8f}")
            logger.info(f"   Duration: {duration_sec:.0f}s ({duration_sec/60:.1f} min)")
            logger.info(f"   Gross PnL: ${gross_pnl:.4f}")
            logger.info(f"   Commission: -${total_commission:.4f}")
            logger.info(f"   NET PnL: ${net_pnl:.4f}")
            logger.info(f"   Reason: {reason}")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

            # –°–æ–∑–¥–∞–Ω–∏–µ TradeResult
            trade_result = TradeResult(
                symbol=symbol,
                side=position.side.value,
                entry_price=position.entry_price,
                exit_price=current_price,
                size=position.size,
                gross_pnl=gross_pnl,
                commission=total_commission,
                net_pnl=net_pnl,
                duration_sec=duration_sec,
                reason=reason,
                timestamp=datetime.utcnow(),
            )

            return trade_result

        except Exception as e:
            logger.error(f"‚ùå Error closing position {symbol}: {e}", exc_info=True)
            return None

    async def update_position_prices(
        self, positions: Dict[str, Position], current_prices: Dict[str, float]
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.

        Args:
            positions: –°–ª–æ–≤–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_prices: –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        """
        for symbol, position in positions.items():
            current_price = current_prices.get(symbol)
            if current_price:
                position.update_price(current_price)

    async def batch_update_tp_sl(
        self,
        symbol: str,
        tp_ord_id: str,
        sl_ord_id: str,
        new_tp_price: float,
        new_sl_price: float,
        new_tp_trigger: Optional[float] = None,
        new_sl_trigger: Optional[float] = None,
    ) -> Dict[str, Any]:
        """
        Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TP/SL –æ—Ä–¥–µ—Ä–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            tp_ord_id: ID Take Profit –æ—Ä–¥–µ—Ä–∞
            sl_ord_id: ID Stop Loss –æ—Ä–¥–µ—Ä–∞
            new_tp_price: –ù–æ–≤–∞—è —Ü–µ–Ω–∞ TP
            new_sl_price: –ù–æ–≤–∞—è —Ü–µ–Ω–∞ SL
            new_tp_trigger: –ù–æ–≤—ã–π trigger –¥–ª—è TP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            new_sl_trigger: –ù–æ–≤—ã–π trigger –¥–ª—è SL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            logger.info(f"üîÑ Batch updating TP/SL for {symbol}")
            logger.info(f"   TP: ${new_tp_price:.4f} (trigger: {new_tp_trigger})")
            logger.info(f"   SL: ${new_sl_price:.4f} (trigger: {new_sl_trigger})")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Batch Order Manager
            result = await self.batch_manager.update_tp_sl_batch(
                inst_id=symbol,
                tp_ord_id=tp_ord_id,
                sl_ord_id=sl_ord_id,
                new_tp_price=f"{new_tp_price:.8f}",
                new_sl_price=f"{new_sl_price:.8f}",
                new_tp_trigger=f"{new_tp_trigger:.8f}" if new_tp_trigger else None,
                new_sl_trigger=f"{new_sl_trigger:.8f}" if new_sl_trigger else None,
            )

            if result.get("code") == "0":
                logger.info(f"‚úÖ Batch TP/SL update successful for {symbol}")
            else:
                logger.error(
                    f"‚ùå Batch TP/SL update failed: {result.get('msg', 'Unknown error')}"
                )

            return result

        except Exception as e:
            logger.error(f"‚ùå Batch TP/SL update error: {e}")
            return {"code": "1", "msg": str(e), "data": []}

    async def flush_pending_updates(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîÑ Flushing pending batch updates...")
            result = await self.batch_manager.force_flush()

            if result.get("code") == "0":
                logger.info("‚úÖ Batch updates flushed successfully")
            else:
                logger.error(
                    f"‚ùå Batch flush failed: {result.get('msg', 'Unknown error')}"
                )

            return result

        except Exception as e:
            logger.error(f"‚ùå Batch flush error: {e}")
            return {"code": "1", "msg": str(e), "data": []}

    def get_batch_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É batch –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return self.batch_manager.get_stats()
