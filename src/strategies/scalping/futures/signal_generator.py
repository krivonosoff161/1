"""
Futures Signal Generator –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Futures
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ Futures —Å–ø–µ—Ü–∏—Ñ–∏–∫—É (–ª–µ–≤–µ—Ä–∏–¥–∂, –º–∞—Ä–∂–∞)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∏–ª–µ –∏ –∫–∞—á–µ—Å—Ç–≤—É
"""

import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger

from src.config import BotConfig, ScalpingConfig
from src.indicators import IndicatorManager
from src.models import OHLCV, MarketData
from src.strategies.modules.adaptive_regime_manager import \
    AdaptiveRegimeManager
from src.strategies.modules.correlation_filter import CorrelationFilter
from src.strategies.modules.multi_timeframe import MultiTimeframeFilter
from src.strategies.modules.pivot_points import PivotPointsFilter
from src.strategies.modules.volume_profile_filter import VolumeProfileFilter


class FuturesSignalGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –£—á–µ—Ç –ª–µ–≤–µ—Ä–∏–¥–∂–∞ –∏ –º–∞—Ä–∂–∏
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ Futures —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    """

    def __init__(self, config: BotConfig, client=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures Signal Generator

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            client: OKX –∫–ª–∏–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        """
        self.config = config
        self.scalping_config = config.scalping
        self.client = client  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        from src.indicators import (ATR, MACD, RSI, BollingerBands,
                                    ExponentialMovingAverage,
                                    SimpleMovingAverage)

        self.indicator_manager = IndicatorManager()
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.indicator_manager.add_indicator(
            "RSI", RSI(period=14, overbought=70, oversold=30)
        )
        self.indicator_manager.add_indicator("ATR", ATR(period=14))
        self.indicator_manager.add_indicator("SMA", SimpleMovingAverage(period=20))
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.indicator_manager.add_indicator(
            "MACD", MACD(fast_period=12, slow_period=26, signal_period=9)
        )
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: BollingerBands –∏—Å–ø–æ–ª—å–∑—É–µ—Ç std_multiplier, –∞ –Ω–µ std_dev
        self.indicator_manager.add_indicator(
            "BollingerBands", BollingerBands(period=20, std_multiplier=2.0)
        )
        self.indicator_manager.add_indicator(
            "EMA_12", ExponentialMovingAverage(period=12)
        )
        self.indicator_manager.add_indicator(
            "EMA_26", ExponentialMovingAverage(period=26)
        )

        logger.debug(
            "üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: RSI, ATR, SMA, MACD, BollingerBands, EMA_12, EMA_26"
        )

        # –ú–æ–¥—É–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        self.regime_manager = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ initialize()
        self.correlation_filter = None
        self.mtf_filter = None
        self.pivot_filter = None
        self.volume_filter = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.last_signals = {}
        self.signal_history = []

        logger.info("FuturesSignalGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self, ohlcv_data: Dict[str, List[OHLCV]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.

        Args:
            ohlcv_data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ARM
        """
        try:
            from src.strategies.modules.adaptive_regime_manager import \
                RegimeConfig

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARM
            # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: adaptive_regime –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ config.scalping, –∞ –Ω–µ –≤ config
            scalping_config = getattr(self.config, "scalping", None)
            adaptive_regime_config = None
            if scalping_config:
                if hasattr(scalping_config, "adaptive_regime"):
                    adaptive_regime_config = getattr(
                        scalping_config, "adaptive_regime", None
                    )
                elif isinstance(scalping_config, dict):
                    adaptive_regime_config = scalping_config.get("adaptive_regime", {})

            # –ï—Å–ª–∏ adaptive_regime_config - —ç—Ç–æ Pydantic –º–æ–¥–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º enabled
            enabled = False
            if adaptive_regime_config:
                if hasattr(adaptive_regime_config, "enabled"):
                    enabled = getattr(adaptive_regime_config, "enabled", False)
                elif isinstance(adaptive_regime_config, dict):
                    enabled = adaptive_regime_config.get("enabled", False)

            if adaptive_regime_config and enabled:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º detection —Å–µ–∫—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å dict –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç)
                    detection = None
                    if isinstance(adaptive_regime_config, dict):
                        detection = adaptive_regime_config.get("detection", {})
                    elif hasattr(adaptive_regime_config, "detection"):
                        detection = getattr(adaptive_regime_config, "detection", {})

                    if isinstance(detection, dict):
                        detection_dict = detection
                    elif hasattr(detection, "__dict__"):
                        detection_dict = (
                            detection.__dict__ if hasattr(detection, "__dict__") else {}
                        )
                    else:
                        detection_dict = {}

                    regime_config = RegimeConfig(
                        enabled=True,
                        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                        trending_adx_threshold=detection_dict.get(
                            "trending_adx_threshold", 20.0
                        ),
                        ranging_adx_threshold=detection_dict.get(
                            "ranging_adx_threshold", 15.0
                        ),
                        high_volatility_threshold=detection_dict.get(
                            "high_volatility_threshold", 0.03
                        ),
                        # lookback_candles –∏ adx_period –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ RegimeConfig
                    )
                    self.regime_manager = AdaptiveRegimeManager(regime_config)

                    if ohlcv_data:
                        await self.regime_manager.initialize(ohlcv_data)

                    logger.info("‚úÖ Adaptive Regime Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Futures")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è ARM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    self.regime_manager = None
            else:
                logger.info("‚ö†Ô∏è Adaptive Regime Manager –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")

            self.is_initialized = True
            logger.info("‚úÖ FuturesSignalGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FuturesSignalGenerator: {e}")
            self.is_initialized = True  # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    async def generate_signals(self) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        if not self.is_initialized:
            logger.warning("SignalGenerator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []

        try:
            signals = []

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            for symbol in self.scalping_config.symbols:
                symbol_signals = await self._generate_symbol_signals(symbol)
                signals.extend(symbol_signals)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            filtered_signals = await self._filter_and_rank_signals(signals)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._update_signal_history(filtered_signals)

            return filtered_signals

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []

    async def _generate_symbol_signals(self, symbol: str) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self._get_market_data(symbol)
            if not market_data:
                return []

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            base_signals = await self._generate_base_signals(symbol, market_data)

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_signals = await self._apply_filters(
                symbol, base_signals, market_data
            )

            return filtered_signals

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
            return []

    async def _get_market_data(self, symbol: str) -> Optional[MarketData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –°–í–ï–ß–ò —á–µ—Ä–µ–∑ REST API
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD –∏ —Ç.–¥.) —Ç—Ä–µ–±—É—é—Ç –º–∏–Ω–∏–º—É–º 14-20 —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!
            import time

            import aiohttp

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π 1m –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            inst_id = f"{symbol}-SWAP"
            url = f"https://www.okx.com/api/v5/market/candles?instId={inst_id}&bar=1m&limit=50"

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if data.get("code") == "0" and data.get("data"):
                            candles = data["data"]

                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ OKX –≤ OHLCV
                            # OKX —Ñ–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, volumeCcy]
                            ohlcv_data = []
                            for candle in candles:
                                if len(candle) >= 6:
                                    ohlcv_item = OHLCV(
                                        timestamp=int(candle[0])
                                        // 1000,  # OKX –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                                        symbol=symbol,
                                        open=float(candle[1]),
                                        high=float(candle[2]),
                                        low=float(candle[3]),
                                        close=float(candle[4]),
                                        volume=float(candle[5]),
                                    )
                                    ohlcv_data.append(ohlcv_item)

                            if ohlcv_data:
                                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
                                ohlcv_data.sort(key=lambda x: x.timestamp)

                                logger.debug(
                                    f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}"
                                )

                                # –°–æ–∑–¥–∞–µ–º MarketData —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏
                                return MarketData(
                                    symbol=symbol,
                                    timeframe="1m",
                                    ohlcv_data=ohlcv_data,
                                )
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –¥–ª—è {symbol}")
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}", exc_info=True)
            return None

    async def _generate_base_signals(
        self, symbol: str, market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            signals = []

            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicator_results = self.indicator_manager.calculate_all(market_data)

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º IndicatorResult –≤ –ø—Ä–æ—Å—Ç–æ–π dict —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            # indicator_results —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã IndicatorResult, –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è
            indicators = {}
            for name, result in indicator_results.items():
                if hasattr(result, "value") and hasattr(result, "metadata"):
                    # –ï—Å–ª–∏ —ç—Ç–æ IndicatorResult, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    if name.lower() == "macd":
                        # MACD: value = macd_line, metadata —Å–æ–¥–µ—Ä–∂–∏—Ç macd_line, signal_line
                        metadata = result.metadata or {}
                        indicators["macd"] = {
                            "macd": metadata.get("macd_line", result.value),
                            "signal": metadata.get("signal_line", result.value),
                            "histogram": metadata.get("macd_line", result.value)
                            - metadata.get("signal_line", result.value),
                        }
                    elif name.lower() == "bollingerbands":
                        # BollingerBands: value = sma (middle), metadata —Å–æ–¥–µ—Ä–∂–∏—Ç upper_band, lower_band
                        metadata = result.metadata or {}
                        indicators["bollinger_bands"] = {
                            "upper": metadata.get("upper_band", result.value),
                            "lower": metadata.get("lower_band", result.value),
                            "middle": result.value,  # middle = SMA
                        }
                    elif isinstance(result.value, dict):
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ value –º–æ–∂–µ—Ç –±—ã—Ç—å dict
                        indicators[name.lower()] = result.value
                    else:
                        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, ATR, SMA, EMA) - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                        indicators[name.lower()] = result.value
                elif isinstance(result, dict):
                    # –ï—Å–ª–∏ —É–∂–µ dict
                    indicators[name.lower()] = result
                else:
                    # Fallback
                    indicators[name.lower()] = result

            rsi_val = indicators.get("rsi", "N/A")
            macd_val = indicators.get("macd", {})
            if isinstance(macd_val, dict):
                macd_str = f"macd={macd_val.get('macd', 'N/A')}, signal={macd_val.get('signal', 'N/A')}"
            else:
                macd_str = str(macd_val)
            logger.debug(
                f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}: RSI={rsi_val}, MACD={{{macd_str}}}"
            )

            # RSI —Å–∏–≥–Ω–∞–ª—ã
            rsi_signals = await self._generate_rsi_signals(
                symbol, indicators, market_data
            )
            signals.extend(rsi_signals)

            # MACD —Å–∏–≥–Ω–∞–ª—ã
            macd_signals = await self._generate_macd_signals(
                symbol, indicators, market_data
            )
            signals.extend(macd_signals)

            # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
            bb_signals = await self._generate_bollinger_signals(
                symbol, indicators, market_data
            )
            signals.extend(bb_signals)

            # Moving Average —Å–∏–≥–Ω–∞–ª—ã
            ma_signals = await self._generate_ma_signals(
                symbol, indicators, market_data
            )
            signals.extend(ma_signals)

            return signals

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
            return []

    async def _generate_rsi_signals(
        self, symbol: str, indicators: Dict, market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []

        try:
            rsi = indicators.get("rsi", 50)

            # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–ø–æ–∫—É–ø–∫–∞)
            if rsi < 30:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "buy",
                        "type": "rsi_oversold",
                        "strength": (30 - rsi) / 30,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": rsi,
                        "confidence": 0.8,
                    }
                )

            # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)
            elif rsi > 70:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "sell",
                        "type": "rsi_overbought",
                        "strength": (rsi - 70) / 30,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": rsi,
                        "confidence": 0.8,
                    }
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSI —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    async def _generate_macd_signals(
        self, symbol: str, indicators: Dict, market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MACD —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []

        try:
            macd = indicators.get("macd", {})
            macd_line = macd.get("macd", 0)
            signal_line = macd.get("signal", 0)
            histogram = macd.get("histogram", 0)

            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –ª–∏–Ω–∏–∏ –∏ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
            if macd_line > signal_line and histogram > 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "buy",
                        "type": "macd_bullish",
                        "strength": min(
                            abs(histogram) / 100, 1.0
                        ),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": histogram,
                        "confidence": 0.7,
                    }
                )

            elif macd_line < signal_line and histogram < 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "sell",
                        "type": "macd_bearish",
                        "strength": min(
                            abs(histogram) / 100, 1.0
                        ),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": histogram,
                        "confidence": 0.7,
                    }
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MACD —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    async def _generate_bollinger_signals(
        self, symbol: str, indicators: Dict, market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Bollinger Bands —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []

        try:
            bb = indicators.get("bollinger_bands", {})
            upper = bb.get("upper", 0)
            lower = bb.get("lower", 0)
            middle = bb.get("middle", 0)
            current_price = (
                market_data.ohlcv_data[-1].close if market_data.ohlcv_data else 0.0
            )

            # –û—Ç—Å–∫–æ–∫ –æ—Ç –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã (–ø–æ–∫—É–ø–∫–∞)
            if current_price <= lower and (middle - lower) > 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "buy",
                        "type": "bb_oversold",
                        "strength": (lower - current_price) / (middle - lower),
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": current_price,
                        "confidence": 0.75,
                    }
                )

            # –û—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã (–ø—Ä–æ–¥–∞–∂–∞)
            elif current_price >= upper and (upper - middle) > 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "sell",
                        "type": "bb_overbought",
                        "strength": (current_price - upper) / (upper - middle),
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": current_price,
                        "confidence": 0.75,
                    }
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bollinger Bands —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    async def _generate_ma_signals(
        self, symbol: str, indicators: Dict, market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Moving Average —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []

        try:
            ma_fast = indicators.get("ema_12", 0)
            ma_slow = indicators.get("ema_26", 0)
            current_price = (
                market_data.ohlcv_data[-1].close if market_data.ohlcv_data else 0.0
            )

            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π MA
            if ma_fast > ma_slow and current_price > ma_fast and ma_slow > 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "buy",
                        "type": "ma_bullish",
                        "strength": (ma_fast - ma_slow) / ma_slow,
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": ma_fast,
                        "confidence": 0.6,
                    }
                )

            elif ma_fast < ma_slow and current_price < ma_fast and ma_slow > 0:
                signals.append(
                    {
                        "symbol": symbol,
                        "side": "sell",
                        "type": "ma_bearish",
                        "strength": (ma_slow - ma_fast) / ma_slow,
                        "price": market_data.ohlcv_data[-1].close
                        if market_data.ohlcv_data
                        else 0.0,
                        "timestamp": datetime.now(),
                        "indicator_value": ma_fast,
                        "confidence": 0.6,
                    }
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Moving Average —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    async def _apply_filters(
        self, symbol: str, signals: List[Dict[str, Any]], market_data: MarketData
    ) -> List[Dict[str, Any]]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª–∞–º"""
        try:
            filtered_signals = []

            for signal in signals:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ (–µ—Å–ª–∏ ARM –≤–∫–ª—é—á–µ–Ω)
                if self.regime_manager:
                    try:
                        if not await self.regime_manager.is_signal_valid(
                            signal, market_data
                        ):
                            logger.debug(f"üîç –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω ARM")
                            continue
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ARM –¥–ª—è {symbol}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                if self.correlation_filter:
                    try:
                        if not await self.correlation_filter.is_signal_valid(
                            signal, market_data
                        ):
                            logger.debug(
                                f"üîç –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω CorrelationFilter"
                            )
                            continue
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CorrelationFilter –¥–ª—è {symbol}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                if self.mtf_filter:
                    try:
                        if not await self.mtf_filter.is_signal_valid(
                            signal, market_data
                        ):
                            logger.debug(f"üîç –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω MTF")
                            continue
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MTF –¥–ª—è {symbol}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ pivot points (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                if self.pivot_filter:
                    try:
                        if not await self.pivot_filter.is_signal_valid(
                            signal, market_data
                        ):
                            logger.debug(f"üîç –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω PivotPoints")
                            continue
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PivotPoints –¥–ª—è {symbol}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ volume profile (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                if self.volume_filter:
                    try:
                        if not await self.volume_filter.is_signal_valid(
                            signal, market_data
                        ):
                            logger.debug(
                                f"üîç –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω VolumeProfile"
                            )
                            continue
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VolumeProfile –¥–ª—è {symbol}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä"
                        )

                # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ Futures —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
                futures_signal = await self._adapt_signal_for_futures(signal)
                filtered_signals.append(futures_signal)

            return filtered_signals

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}", exc_info=True)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            return signals

    async def _adapt_signal_for_futures(self, signal: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥ Futures —Å–ø–µ—Ü–∏—Ñ–∏–∫—É"""
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Futures-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            futures_signal = signal.copy()

            # –£—á–µ—Ç –ª–µ–≤–µ—Ä–∏–¥–∂–∞ –≤ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
            leverage = 3  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
            futures_signal["leverage_adjusted_strength"] = signal["strength"] * (
                leverage / 3
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä–∂–∏
            futures_signal["margin_required"] = True
            futures_signal["liquidation_risk"] = self._calculate_liquidation_risk(
                signal
            )

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            futures_signal[
                "max_position_size"
            ] = await self._calculate_max_position_size(signal)

            return futures_signal

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥ Futures: {e}")
            return signal

    def _calculate_liquidation_risk(self, signal: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º leverage –∏–∑ scalping_config –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            leverage = getattr(self.scalping_config, "leverage", 3)
            # –ï—Å–ª–∏ leverage –Ω–µ –≤ scalping_config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç 3x –¥–ª—è Futures
            if leverage is None:
                leverage = 3

            strength = signal.get("strength", 0.5)

            # –ß–µ–º –≤—ã—à–µ –ª–µ–≤–µ—Ä–∏–¥–∂ –∏ –Ω–∏–∂–µ —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞, —Ç–µ–º –≤—ã—à–µ —Ä–∏—Å–∫
            risk = (leverage / 10) * (1 - strength)
            return min(risk, 1.0)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")
            return 0.5

    async def _calculate_max_position_size(self, signal: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å MarginCalculator
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            base_size = 0.001  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            strength = signal.get("strength", 0.5)

            return base_size * strength

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.001

    async def _filter_and_rank_signals(
        self, signals: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª–µ
            min_strength = self.scalping_config.min_signal_strength
            filtered_signals = [
                s for s in signals if s.get("strength", 0) >= min_strength
            ]

            # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–∏–ª–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            ranked_signals = sorted(
                filtered_signals,
                key=lambda x: (
                    x.get("strength", 0) * x.get("confidence", 0),
                    x.get("strength", 0),
                ),
                reverse=True,
            )

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            max_signals = self.scalping_config.max_concurrent_signals
            return ranked_signals[:max_signals]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return signals

    def _update_signal_history(self, signals: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            timestamp = datetime.now()

            for signal in signals:
                signal_record = {
                    "timestamp": timestamp,
                    "symbol": signal.get("symbol"),
                    "side": signal.get("side"),
                    "strength": signal.get("strength"),
                    "type": signal.get("type"),
                }

                self.signal_history.append(signal_record)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∑–∞–ø–∏—Å—è–º–∏
            if len(self.signal_history) > 1000:
                self.signal_history = self.signal_history[-1000:]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def get_signal_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not self.signal_history:
                return {"total_signals": 0}

            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_types = {}
            for record in self.signal_history:
                signal_type = record.get("type", "unknown")
                signal_types[signal_type] = signal_types.get(signal_type, 0) + 1

            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
            buy_signals = sum(1 for r in self.signal_history if r.get("side") == "buy")
            sell_signals = sum(
                1 for r in self.signal_history if r.get("side") == "sell"
            )

            return {
                "total_signals": len(self.signal_history),
                "buy_signals": buy_signals,
                "sell_signals": sell_signals,
                "signal_types": signal_types,
                "last_signal_time": self.signal_history[-1]["timestamp"]
                if self.signal_history
                else None,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {"error": str(e)}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BotConfig(
        api_key="test_key",
        secret_key="test_secret",
        passphrase="test_passphrase",
        sandbox=True,
        scalping=ScalpingConfig(
            symbols=["BTC-USDT", "ETH-USDT"],
            min_signal_strength=0.3,
            max_concurrent_signals=5,
        ),
    )

    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    generator = FuturesSignalGenerator(config)

    print("FuturesSignalGenerator –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
