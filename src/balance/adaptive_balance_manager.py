"""
Adaptive Balance Manager –¥–ª—è OKX Trading Bot

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
"""

import logging
from dataclasses import dataclass
from typing import Dict, Optional, List, Any
from enum import Enum
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class BalanceProfile(Enum):
    """–ü—Ä–æ—Ñ–∏–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    SMALL = "small"      # –¥–æ $1000
    MEDIUM = "medium"    # $1000 - $2500
    LARGE = "large"      # –æ—Ç $2500

@dataclass
class BalanceProfileConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    
    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    threshold: float
    
    # –†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
    base_position_size: float
    min_position_size: float
    max_position_size: float
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    max_open_positions: int
    max_position_percent: float  # % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
    
    # Boost –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä—ã–Ω–∫–∞
    trending_boost: Dict[str, float]  # boost –¥–ª—è trending —Ä–µ–∂–∏–º–∞
    ranging_boost: Dict[str, float]   # boost –¥–ª—è ranging —Ä–µ–∂–∏–º–∞
    choppy_boost: Dict[str, float]    # boost –¥–ª—è choppy —Ä–µ–∂–∏–º–∞
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    tp_multiplier_boost: float = 1.0
    sl_multiplier_boost: float = 1.0
    ph_threshold_boost: float = 1.0
    score_threshold_boost: float = 1.0
    max_trades_boost: float = 1.0

@dataclass
class BalanceUpdateEvent:
    """–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    
    event_type: str  # "position_opened", "position_closed", "manual_update"
    symbol: Optional[str] = None
    side: Optional[str] = None
    amount: Optional[float] = None
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.utcnow()

class AdaptiveBalanceManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ
    –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.
    """
    
    def __init__(self, profiles: Dict[str, BalanceProfileConfig]):
        self.profiles = profiles
        self.current_profile: Optional[BalanceProfile] = None
        self.current_balance: float = 0.0
        self.last_balance_update: datetime = datetime.utcnow()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.profile_switches: List[Dict[str, Any]] = []
        self.balance_history: List[Dict[str, Any]] = []
        
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.balance_events: List[BalanceUpdateEvent] = []
        
        logger.info("üí∞ Adaptive Balance Manager initialized")
        self._log_profiles()
    
    def _log_profiles(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –±–∞–ª–∞–Ω—Å–∞"""
        logger.info("üìä Balance Profiles:")
        for name, profile in self.profiles.items():
            logger.info(f"  {name.upper()}: ${profile.threshold:,.0f}+ | "
                      f"Positions: {profile.max_open_positions} | "
                      f"Max Size: ${profile.max_position_size:,.0f}")
    
    def update_balance(self, new_balance: float, event: Optional[BalanceUpdateEvent] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        
        Args:
            new_balance: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            event: –°–æ–±—ã—Ç–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, False –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º
        """
        old_profile = self.current_profile
        old_balance = self.current_balance
        
        self.current_balance = new_balance
        self.last_balance_update = datetime.utcnow()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        new_profile = self._determine_profile(new_balance)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.balance_history.append({
            "timestamp": self.last_balance_update,
            "balance": new_balance,
            "profile": new_profile.value if new_profile else None,
            "event": event.event_type if event else "manual_update"
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.balance_history) > 1000:
            self.balance_history = self.balance_history[-500:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if new_profile != old_profile:
            self._switch_profile(old_profile, new_profile, old_balance, new_balance)
            return True
        
        return False
    
    def _determine_profile(self, balance: float) -> BalanceProfile:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞"""
        if balance >= self.profiles["large"].threshold:
            return BalanceProfile.LARGE
        elif balance >= self.profiles["medium"].threshold:
            return BalanceProfile.MEDIUM
        else:
            return BalanceProfile.SMALL
    
    def _switch_profile(self, old_profile: Optional[BalanceProfile], 
                       new_profile: BalanceProfile, 
                       old_balance: float, 
                       new_balance: float):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±–∞–ª–∞–Ω—Å–∞"""
        self.current_profile = new_profile
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        switch_info = {
            "timestamp": self.last_balance_update,
            "old_profile": old_profile.value if old_profile else None,
            "new_profile": new_profile.value,
            "old_balance": old_balance,
            "new_balance": new_balance,
            "balance_change": new_balance - old_balance
        }
        self.profile_switches.append(switch_info)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        if len(self.profile_switches) > 100:
            self.profile_switches = self.profile_switches[-50:]
        
        logger.info(f"üîÑ Profile switched: {old_profile.value if old_profile else 'None'} ‚Üí {new_profile.value}")
        logger.info(f"üí∞ Balance: ${old_balance:,.2f} ‚Üí ${new_balance:,.2f} (${new_balance - old_balance:+,.2f})")
    
    def get_current_profile_config(self) -> Optional[BalanceProfileConfig]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if self.current_profile is None:
            return None
        return self.profiles[self.current_profile.value]
    
    def apply_to_regime_params(self, regime_params: Dict[str, Any], regime: str) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.
        
        Args:
            regime_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            regime: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ ("trending", "ranging", "choppy")
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º boost –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
        """
        if self.current_profile is None:
            return regime_params
        
        profile_config = self.get_current_profile_config()
        if profile_config is None:
            return regime_params
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        adapted_params = regime_params.copy()
        
        # –ü–æ–ª—É—á–∞–µ–º boost –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        boost_config = self._get_boost_config(profile_config, regime)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º boost –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        adapted_params = self._apply_boost_multipliers(adapted_params, boost_config)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        logger.debug(f"üéØ Applied {self.current_profile.value.upper()} profile to {regime} regime")
        logger.debug(f"üìà Boost multipliers: {boost_config}")
        
        return adapted_params
    
    def _get_boost_config(self, profile_config: BalanceProfileConfig, regime: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é boost –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        if regime == "trending":
            return profile_config.trending_boost
        elif regime == "ranging":
            return profile_config.ranging_boost
        elif regime == "choppy":
            return profile_config.choppy_boost
        else:
            return {}
    
    def _apply_boost_multipliers(self, params: Dict[str, Any], boost_config: Dict[str, float]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç boost –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        adapted = params.copy()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ boost –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        if "tp_multiplier" in adapted and "tp_multiplier" in boost_config:
            adapted["tp_multiplier"] *= boost_config["tp_multiplier"]
        
        if "sl_multiplier" in adapted and "sl_multiplier" in boost_config:
            adapted["sl_multiplier"] *= boost_config["sl_multiplier"]
        
        if "ph_threshold" in adapted and "ph_threshold" in boost_config:
            adapted["ph_threshold"] *= boost_config["ph_threshold"]
        
        if "score_threshold" in adapted and "score_threshold" in boost_config:
            adapted["score_threshold"] *= boost_config["score_threshold"]
        
        if "max_trades_per_hour" in adapted and "max_trades" in boost_config:
            adapted["max_trades_per_hour"] = int(adapted["max_trades_per_hour"] * boost_config["max_trades"])
        
        return adapted
    
    def get_position_sizing_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if self.current_profile is None:
            return {}
        
        profile_config = self.get_current_profile_config()
        if profile_config is None:
            return {}
        
        return {
            "base_position_size": profile_config.base_position_size,
            "min_position_size": profile_config.min_position_size,
            "max_position_size": profile_config.max_position_size,
            "max_open_positions": profile_config.max_open_positions,
            "max_position_percent": profile_config.max_position_percent
        }
    
    def check_and_update_balance(self, event: str, **kwargs) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è.
        
        Args:
            event: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ("position_opened", "position_closed", "manual_update")
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        balance_event = BalanceUpdateEvent(
            event_type=event,
            symbol=kwargs.get("symbol"),
            side=kwargs.get("side"),
            amount=kwargs.get("amount")
        )
        
        self.balance_events.append(balance_event)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
        if len(self.balance_events) > 1000:
            self.balance_events = self.balance_events[-500:]
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        logger.debug(f"üìä Balance event: {event} | Symbol: {kwargs.get('symbol')} | Amount: {kwargs.get('amount')}")
        
        return True
    
    def get_balance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞"""
        return {
            "current_balance": self.current_balance,
            "current_profile": self.current_profile.value if self.current_profile else None,
            "last_update": self.last_balance_update.isoformat(),
            "profile_switches_count": len(self.profile_switches),
            "balance_history_count": len(self.balance_history),
            "recent_switches": self.profile_switches[-5:] if self.profile_switches else [],
            "recent_events": self.balance_events[-10:] if self.balance_events else []
        }
    
    def get_profile_recommendations(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é"""
        if self.current_profile is None:
            return {"message": "No profile determined yet"}
        
        profile_config = self.get_current_profile_config()
        if profile_config is None:
            return {"message": "Profile config not found"}
        
        recommendations = {
            "current_profile": self.current_profile.value,
            "balance": self.current_balance,
            "recommendations": []
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–π
        if self.current_balance < profile_config.max_position_size * 2:
            recommendations["recommendations"].append(
                f"Consider reducing position size to ${profile_config.min_position_size:,.0f} "
                f"for better risk management"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∑–∏—Ü–∏–π
        if self.current_balance < profile_config.max_position_size * profile_config.max_open_positions:
            recommendations["recommendations"].append(
                f"Limit open positions to {max(1, profile_config.max_open_positions // 2)} "
                f"until balance increases"
            )
        
        return recommendations

def create_default_profiles() -> Dict[str, BalanceProfileConfig]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        "small": BalanceProfileConfig(
            threshold=1000.0,
            base_position_size=50.0,
            min_position_size=25.0,
            max_position_size=100.0,
            max_open_positions=2,
            max_position_percent=10.0,
            trending_boost={
                "tp_multiplier": 1.2,
                "sl_multiplier": 0.9,
                "ph_threshold": 1.1,
                "score_threshold": 0.9,
                "max_trades": 1.1
            },
            ranging_boost={
                "tp_multiplier": 1.0,
                "sl_multiplier": 1.0,
                "ph_threshold": 1.0,
                "score_threshold": 1.0,
                "max_trades": 1.0
            },
            choppy_boost={
                "tp_multiplier": 0.8,
                "sl_multiplier": 1.2,
                "ph_threshold": 0.9,
                "score_threshold": 1.1,
                "max_trades": 0.8
            }
        ),
        "medium": BalanceProfileConfig(
            threshold=2500.0,
            base_position_size=100.0,
            min_position_size=50.0,
            max_position_size=200.0,
            max_open_positions=3,
            max_position_percent=8.0,
            trending_boost={
                "tp_multiplier": 1.3,
                "sl_multiplier": 0.8,
                "ph_threshold": 1.2,
                "score_threshold": 0.8,
                "max_trades": 1.2
            },
            ranging_boost={
                "tp_multiplier": 1.1,
                "sl_multiplier": 0.9,
                "ph_threshold": 1.1,
                "score_threshold": 0.9,
                "max_trades": 1.1
            },
            choppy_boost={
                "tp_multiplier": 0.9,
                "sl_multiplier": 1.1,
                "ph_threshold": 1.0,
                "score_threshold": 1.0,
                "max_trades": 0.9
            }
        ),
        "large": BalanceProfileConfig(
            threshold=3500.0,
            base_position_size=200.0,
            min_position_size=100.0,
            max_position_size=500.0,
            max_open_positions=5,
            max_position_percent=6.0,
            trending_boost={
                "tp_multiplier": 1.5,
                "sl_multiplier": 0.7,
                "ph_threshold": 1.3,
                "score_threshold": 0.7,
                "max_trades": 1.5
            },
            ranging_boost={
                "tp_multiplier": 1.2,
                "sl_multiplier": 0.8,
                "ph_threshold": 1.2,
                "score_threshold": 0.8,
                "max_trades": 1.2
            },
            choppy_boost={
                "tp_multiplier": 1.0,
                "sl_multiplier": 1.0,
                "ph_threshold": 1.1,
                "score_threshold": 0.9,
                "max_trades": 1.0
            }
        )
    }

