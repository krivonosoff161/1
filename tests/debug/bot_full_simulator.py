#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî¨ –ü–û–õ–ù–´–ô –°–ò–ú–£–õ–Ø–¢–û–† –ë–û–¢–ê - –ö–∞–∂–¥—ã–π —á–∏—Ö, –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–∞–∂–¥—ã–π —Ä–µ–∂–∏–º!
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å (–∏–∑ tests/debug –∏–¥–µ–º –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö)
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.config import get_config, load_config
from src.okx_client import OKXClient
from src.strategies.scalping.orchestrator import ScalpingOrchestrator


class FullBotSimulator:
    """–ü–æ–ª–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""

    def __init__(self):
        self.config = None
        self.client = None
        self.orchestrator = None
        self.issues = []
        self.step_num = 0

    def header(self, text: str):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "=" * 100)
        print(f"{'='*40} {text} {'='*40}")
        print("=" * 100 + "\n")

    def step(self, text: str):
        """–®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.step_num += 1
        print(f"\n{'‚ñ∂'*3} –®–ê–ì {self.step_num}: {text} {'‚ñ∂'*3}")

    def info(self, text: str, indent=0):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        prefix = "  " * indent
        print(f"{prefix}‚ÑπÔ∏è  {text}")

    def success(self, text: str, indent=0):
        """–£—Å–ø–µ—Ö"""
        prefix = "  " * indent
        print(f"{prefix}‚úÖ {text}")

    def warning(self, text: str, indent=0):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        prefix = "  " * indent
        print(f"{prefix}‚ö†Ô∏è  {text}")

    def error(self, text: str, indent=0):
        """–û—à–∏–±–∫–∞"""
        prefix = "  " * indent
        print(f"{prefix}‚ùå {text}")
        self.issues.append(text)

    def data(self, label: str, value: any, indent=0):
        """–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
        prefix = "  " * indent
        print(f"{prefix}üìä {label}: {value}")

    async def run_full_simulation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.header("üî¨ –ü–û–õ–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        self.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        try:
            # –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.simulate_config_loading()

            # –®–ê–ì 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            await self.simulate_api_connection()

            # –®–ê–ì 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.simulate_orchestrator_init()

            # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ADX
            await self.simulate_adx_params_check()

            # –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ PH
            await self.simulate_ph_params_check()

            # –®–ê–ì 6: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ TICK —Ü–∏–∫–ª–∞
            await self.simulate_full_tick_cycle("BTC-USDT")

            # –®–ê–ì 7: –¢–µ—Å—Ç –≤—Å–µ—Ö ARM —Ä–µ–∂–∏–º–æ–≤
            await self.simulate_all_arm_regimes()

            # –®–ê–ì 8: –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤
            await self.simulate_filters_with_real_data()

            # –ò–¢–û–ì–ò
            self.print_final_report()

        except Exception as e:
            self.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback

            traceback.print_exc()
        finally:
            if self.client:
                await self.client.session.close()

    async def simulate_config_loading(self):
        """–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.step("–ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")

        try:
            self.config = load_config("config.yaml")
            self.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π ADX –ø–∞—Ä–∞–º–µ—Ç—Ä (—ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å Dict)
            adx_cfg = self.config.scalping.adx_filter
            self.data("ADX Filter (–±–∞–∑–æ–≤—ã–π)", "", 1)
            self.data("  adx_threshold", adx_cfg.get("adx_threshold"), 2)
            self.data("  di_difference", adx_cfg.get("di_difference"), 2)
            self.data("  adx_period", adx_cfg.get("adx_period"), 2)

            if adx_cfg.get("di_difference") == 5.0:
                self.error("–ë–ê–ó–û–í–´–ô di_difference = 5.0 (–°–¢–ê–†–û–ï –ó–ù–ê–ß–ï–ù–ò–ï!)", 2)
            elif adx_cfg.get("di_difference") == 1.5:
                self.success("–ë–ê–ó–û–í–´–ô di_difference = 1.5 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)", 2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ARM —Ä–µ–∂–∏–º—ã (—ç—Ç–æ —Ç–æ–∂–µ —Å–ª–æ–≤–∞—Ä—å Dict)
            arm_cfg = self.config.scalping.adaptive_regime
            self.data("ARM —Ä–µ–∂–∏–º—ã", "", 1)

            for regime in ["trending", "ranging", "choppy"]:
                regime_cfg = arm_cfg.get(regime, {})
                modules = regime_cfg.get("modules", {})
                adx_module = modules.get("adx_filter", {})

                self.data(f"{regime.upper()}", "", 2)
                self.data("ph_threshold", f"${regime_cfg.get('ph_threshold')}", 3)
                self.data("adx_di_difference", adx_module.get("adx_di_difference"), 3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                expected = {"trending": 7.0, "ranging": 1.5, "choppy": 1.0}
                actual = adx_module.get("adx_di_difference")

                if actual == expected[regime]:
                    self.success(f"{regime}: adx_di_difference –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({actual})", 3)
                else:
                    self.error(
                        f"{regime}: adx_di_difference = {actual}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected[regime]}",
                        3,
                    )

        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise

    async def simulate_api_connection(self):
        """–®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        self.step("–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö OKX API")

        try:
            # OKXClient –∂–¥–µ—Ç APIConfig, –∞ –Ω–µ BotConfig
            okx_api_config = self.config.get_okx_config()
            self.client = OKXClient(okx_api_config)
            await self.client.connect()
            self.success("OKX –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (get_balance –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –Ω–∞–ø—Ä—è–º—É—é!)
            balance = await self.client.get_balance("USDT")
            self.data("–ë–∞–ª–∞–Ω—Å USDT", f"${balance:.2f}", 1)

            if balance < 100:
                self.warning(f"–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}", 1)
            else:
                self.success(f"–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: ${balance:.2f}", 1)

        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            raise

    async def simulate_orchestrator_init(self):
        """–®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.step("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ORCHESTRATOR")

        try:
            # ScalpingOrchestrator(client, scalping_config, risk_config)
            self.orchestrator = ScalpingOrchestrator(
                self.client, self.config.scalping, self.config.risk
            )
            self.success("Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX —Ñ–∏–ª—å—Ç—Ä
            if (
                hasattr(self.orchestrator, "adx_filter")
                and self.orchestrator.adx_filter
            ):
                adx_cfg = self.orchestrator.adx_filter.config
                self.data("ADX Filter (–ø–æ—Å–ª–µ init)", "", 1)
                self.data("adx_threshold", adx_cfg.adx_threshold, 2)
                self.data("di_difference", adx_cfg.di_difference, 2)
                self.data("adx_period", adx_cfg.adx_period, 2)

                if adx_cfg.di_difference == 5.0:
                    self.error("ADX di_difference = 5.0 (–°–¢–ê–†–û–ï!)", 2)
                elif adx_cfg.di_difference == 1.5:
                    self.success("ADX di_difference = 1.5 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)", 2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ARM
            if hasattr(self.orchestrator, "arm") and self.orchestrator.arm:
                self.data("ARM Manager", "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 1)
                self.data("–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º", self.orchestrator.arm.current_regime, 2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PositionManager
            if hasattr(self.orchestrator, "position_manager"):
                self.data("Position Manager", "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SignalGenerator
            if hasattr(self.orchestrator, "signal_generator"):
                self.data("Signal Generator", "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 1)

        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ orchestrator: {e}")
            import traceback

            traceback.print_exc()
            raise

    async def simulate_adx_params_check(self):
        """–®–∞–≥ 4: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ADX"""
        self.step("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ADX")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ SignalGenerator
        if hasattr(self.orchestrator, "signal_generator"):
            sg = self.orchestrator.signal_generator

            self.data("SignalGenerator.module_params", "", 1)

            if hasattr(sg, "module_params") and sg.module_params:
                if "adx_filter" in sg.module_params:
                    adx_params = sg.module_params["adx_filter"]
                    self.data("adx_threshold", adx_params.get("adx_threshold"), 2)
                    self.data(
                        "adx_di_difference", adx_params.get("adx_di_difference"), 2
                    )

                    di_diff = adx_params.get("adx_di_difference")
                    if di_diff == 5.0:
                        self.error(
                            f"SignalGenerator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç di_difference={di_diff} (–°–¢–ê–†–û–ï!)",
                            2,
                        )
                    else:
                        self.success(
                            f"SignalGenerator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç di_difference={di_diff}", 2
                        )
                else:
                    self.warning("adx_filter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ module_params", 2)
            else:
                self.warning("module_params –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 2)

    async def simulate_ph_params_check(self):
        """–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Profit Harvesting"""
        self.step("–ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í PROFIT HARVESTING")

        if hasattr(self.orchestrator, "position_manager"):
            pm = self.orchestrator.position_manager

            self.data("PositionManager PH settings", "", 1)

            if hasattr(pm, "ph_enabled"):
                self.data("ph_enabled", pm.ph_enabled, 2)

            if hasattr(pm, "ph_threshold"):
                self.data("ph_threshold", f"${pm.ph_threshold}", 2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if pm.ph_threshold == 0.20:
                    self.error(f"PH threshold = ${pm.ph_threshold} (–°–¢–ê–†–û–ï!)", 2)
                elif pm.ph_threshold in [0.10, 0.12, 0.15]:
                    self.success(f"PH threshold = ${pm.ph_threshold} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)", 2)

            if hasattr(pm, "ph_time_limit"):
                self.data("ph_time_limit", f"{pm.ph_time_limit}s", 2)

    async def simulate_full_tick_cycle(self, symbol: str):
        """–®–∞–≥ 6: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ TICK —Ü–∏–∫–ª–∞"""
        self.step(f"–°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–ù–û–ì–û TICK –¶–ò–ö–õ–ê –î–õ–Ø {symbol}")

        try:
            # 6.1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
            self.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π 5m –¥–ª—è {symbol}", 1)
            candles = await self.client.get_candles(symbol, "5m", limit=200)
            if not candles:
                self.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è {symbol}", 1)
                return

            self.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π", 1)
            self.data(
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞",
                f"O:{candles[0][1]}, H:{candles[0][2]}, L:{candles[0][3]}, C:{candles[0][4]}",
                2,
            )

            # 6.2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            self.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {symbol}", 1)
            ticker = await self.client.get_ticker(symbol)
            if not ticker:
                self.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è {symbol}", 1)
                return

            current_price = float(ticker["data"][0]["last"])
            self.success(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}", 1)

            # 6.3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ orchestrator
            self.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ market_data –≤ orchestrator", 1)
            if symbol not in self.orchestrator.market_data:
                self.orchestrator.market_data[symbol] = {}

            self.orchestrator.market_data[symbol]["candles"] = candles
            self.orchestrator.market_data[symbol]["current_price"] = current_price
            self.success("market_data –æ–±–Ω–æ–≤–ª–µ–Ω", 1)

            # 6.4: –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            self.info("–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤", 1)
            indicators = self.orchestrator.indicators.calculate_all(candles)
            self.success(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(indicators)} —à—Ç.", 1)

            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            self.data("RSI", f"{indicators.get('rsi', 'N/A'):.2f}", 2)
            self.data("ATR", f"{indicators.get('atr', 'N/A'):.4f}", 2)
            self.data("Volume Ratio", f"{indicators.get('volume_ratio', 'N/A'):.2f}", 2)

            # 6.5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ ARM
            self.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ (ARM)", 1)
            if self.orchestrator.arm:
                regime_info = self.orchestrator.arm.detect_regime(candles, indicators)
                regime = regime_info["regime"]
                confidence = regime_info["confidence"]
                reason = regime_info.get("reason", "N/A")

                self.success(f"–†–µ–∂–∏–º: {regime} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)", 1)
                self.data("–ü—Ä–∏—á–∏–Ω–∞", reason, 2)
                self.data("ADX proxy", regime_info.get("adx_proxy", "N/A"), 2)
                self.data(
                    "Volatility", f"{regime_info.get('volatility', 0)*100:.2f}%", 2
                )
                self.data("Reversals", regime_info.get("reversals", "N/A"), 2)

                # 6.6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞
                self.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ {regime}", 1)
                arm_params = (
                    self.orchestrator.signal_generator.update_regime_parameters(regime)
                )

                self.data("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞", regime, 2)
                self.data(
                    "score_threshold", f"{arm_params.get('score_threshold')}/12", 3
                )
                self.data("tp_atr_multiplier", arm_params.get("tp_atr_multiplier"), 3)
                self.data("sl_atr_multiplier", arm_params.get("sl_atr_multiplier"), 3)
                self.data("ph_threshold", f"${arm_params.get('ph_threshold')}", 3)

                if "modules" in arm_params and "adx_filter" in arm_params["modules"]:
                    adx_p = arm_params["modules"]["adx_filter"]
                    self.data("ADX adx_threshold", adx_p.get("adx_threshold"), 3)
                    self.data(
                        "ADX adx_di_difference", adx_p.get("adx_di_difference"), 3
                    )

                    di_diff = adx_p.get("adx_di_difference")
                    if di_diff == 5.0:
                        self.error(f"ARM –≤–µ—Ä–Ω—É–ª di_difference={di_diff} (–°–¢–ê–†–û–ï!)", 3)
                    else:
                        self.success(f"ARM –≤–µ—Ä–Ω—É–ª di_difference={di_diff} ‚úÖ", 3)

            # 6.7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            self.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞", 1)
            signal = self.orchestrator.signal_generator.generate_signal(
                symbol, candles, indicators, current_price
            )

            if signal:
                self.success("–°–ò–ì–ù–ê–õ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!", 1)
                self.data("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", signal.direction, 2)
                self.data("Score", f"{signal.score}/{signal.total_possible_score}", 2)
                self.data("–ü—Ä–∏—á–∏–Ω–∞", signal.reason, 2)
                self.data("Entry Price", f"${signal.entry_price:.2f}", 2)
                self.data("TP", f"${signal.take_profit:.2f}", 2)
                self.data("SL", f"${signal.stop_loss:.2f}", 2)
            else:
                self.warning("–°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)", 1)

        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –≤ TICK —Ü–∏–∫–ª–µ: {e}", 1)
            import traceback

            traceback.print_exc()

    async def simulate_all_arm_regimes(self):
        """–®–∞–≥ 7: –¢–µ—Å—Ç –≤—Å–µ—Ö ARM —Ä–µ–∂–∏–º–æ–≤"""
        self.step("–¢–ï–°–¢ –í–°–ï–• ARM –†–ï–ñ–ò–ú–û–í")

        regimes = ["trending", "ranging", "choppy"]

        for regime in regimes:
            self.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {regime.upper()}", 1)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
            arm_params = self.orchestrator.signal_generator.update_regime_parameters(
                regime
            )

            self.data("Score threshold", f"{arm_params.get('score_threshold')}/12", 2)
            self.data("TP multiplier", arm_params.get("tp_atr_multiplier"), 2)
            self.data("SL multiplier", arm_params.get("sl_atr_multiplier"), 2)
            self.data("PH threshold", f"${arm_params.get('ph_threshold')}", 2)

            if "modules" in arm_params and "adx_filter" in arm_params["modules"]:
                adx_p = arm_params["modules"]["adx_filter"]
                self.data("ADX threshold", adx_p.get("adx_threshold"), 2)
                self.data("ADX di_difference", adx_p.get("adx_di_difference"), 2)

                expected_di = {"trending": 7.0, "ranging": 1.5, "choppy": 1.0}
                actual_di = adx_p.get("adx_di_difference")

                if actual_di == expected_di[regime]:
                    self.success(f"{regime}: di_difference={actual_di} ‚úÖ", 2)
                else:
                    self.error(
                        f"{regime}: di_difference={actual_di}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_di[regime]}",
                        2,
                    )

            expected_ph = {"trending": 0.10, "ranging": 0.12, "choppy": 0.15}
            actual_ph = arm_params.get("ph_threshold")

            if actual_ph == expected_ph[regime]:
                self.success(f"{regime}: ph_threshold=${actual_ph} ‚úÖ", 2)
            else:
                self.error(
                    f"{regime}: ph_threshold=${actual_ph}, –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected_ph[regime]}",
                    2,
                )

    async def simulate_filters_with_real_data(self):
        """–®–∞–≥ 8: –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–æ–≥–æ–≤"""
        self.step("–¢–ï–°–¢ –§–ò–õ–¨–¢–†–û–í –° –î–ê–ù–ù–´–ú–ò –ò–ó –õ–û–ì–û–í")

        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        test_cases = [
            {
                "name": "BTC-USDT LONG (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–≥–∞—Ö)",
                "symbol": "BTC-USDT",
                "direction": "LONG",
                "plus_di": 12.7,
                "minus_di": 14.6,
                "adx": 15.0,
                "score": 7,
            },
            {
                "name": "BTC-USDT LONG (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–≥–∞—Ö)",
                "symbol": "BTC-USDT",
                "direction": "LONG",
                "plus_di": 16.4,
                "minus_di": 13.9,
                "adx": 20.0,
                "score": 5,
            },
            {
                "name": "ETH-USDT SHORT (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–≥–∞—Ö)",
                "symbol": "ETH-USDT",
                "direction": "SHORT",
                "plus_di": 29.5,
                "minus_di": 14.1,
                "adx": 25.0,
                "score": 8,
            },
        ]

        self.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ di_difference", 1)

        for test in test_cases:
            self.data("Test case", test["name"], 2)
            self.data("Direction", test["direction"], 3)
            self.data("+DI", test["plus_di"], 3)
            self.data("-DI", test["minus_di"], 3)
            self.data("Score", f"{test['score']}/12", 3)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            thresholds = [5.0, 1.5, 1.0]

            for threshold in thresholds:
                if test["direction"] == "LONG":
                    diff = test["plus_di"] - test["minus_di"]
                    required = test["minus_di"] + threshold
                    passed = test["plus_di"] >= required
                else:  # SHORT
                    diff = test["minus_di"] - test["plus_di"]
                    required = test["plus_di"] + threshold
                    passed = test["minus_di"] >= required

                status = "‚úÖ –ü–†–û–®–ï–õ" if passed else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù"
                self.data(
                    f"–ü–æ—Ä–æ–≥ {threshold}",
                    f"diff={diff:.1f}, –Ω—É–∂–Ω–æ {threshold} ‚Üí {status}",
                    4,
                )

            print()

    def print_final_report(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        self.header("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")

        if not self.issues:
            self.success("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        else:
            self.error(f"–ù–ê–ô–î–ï–ù–û {len(self.issues)} –ü–†–û–ë–õ–ï–ú:")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
            print()
            self.warning("–ò–°–ü–†–ê–í–¨ –≠–¢–ò –ü–†–û–ë–õ–ï–ú–´ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ë–û–¢–ê!")


async def main():
    simulator = FullBotSimulator()
    await simulator.run_full_simulation()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
