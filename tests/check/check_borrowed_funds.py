"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–µ–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ OKX
"""

import asyncio
import sys

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.okx_client import OKXClient


async def check_borrowed_funds():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    config = load_config()
    okx_config = config.api["okx"]

    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–ï–ú–ù–´–• –°–†–ï–î–°–¢–í...")

    async with OKXClient(okx_config) as client:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è BTC
            borrowed_balance_btc = await client.get_borrowed_balance("BTC")
            logger.info(f"üìä –ó–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ BTC: {borrowed_balance_btc}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è USDT
            borrowed_balance_usdt = await client.get_borrowed_balance("USDT")
            logger.info(f"üìä –ó–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ USDT: {borrowed_balance_usdt}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = await client.get_balance_all()
            if balance and balance["data"]:
                total_equity = float(balance["data"][0]["totalEq"])
                logger.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_equity:.2f} USDT")

                for detail in balance["data"][0]["details"]:
                    if float(detail["eq"]) > 0:
                        logger.info(
                            f"   - {detail['ccy']}: {float(detail['availBal']):.4f} (–î–æ—Å—Ç—É–ø–Ω–æ), {float(detail['eq']):.4f} (–í—Å–µ–≥–æ)"
                        )
                        if float(detail["liab"]) > 0:
                            logger.warning(
                                f"   ‚ö†Ô∏è –ó–ê–ï–ú–ù–´–ï –°–†–ï–î–°–¢–í–ê: {detail['ccy']} = {float(detail['liab']):.4f}"
                            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(check_borrowed_funds())
