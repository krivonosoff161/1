#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî¨ BOT SIMULATOR - –ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º!
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

import yaml


class BotSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""

    def __init__(self):
        self.issues = []
        self.warnings = []
        self.config_dict = None

    def log_issue(self, category: str, message: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É"""
        self.issues.append({"category": category, "message": message})
        print(f"‚ùå [{category}] {message}")

    def log_warning(self, category: str, message: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.warnings.append({"category": category, "message": message})
        print(f"‚ö†Ô∏è  [{category}] {message}")

    def log_success(self, message: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—Ö"""
        print(f"‚úÖ {message}")

    def log_info(self, message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        print(f"‚ÑπÔ∏è  {message}")

    async def step_1_load_config(self):
        """–®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 80)
        print("üìã –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 80)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º YAML –Ω–∞–ø—Ä—è–º—É—é
            with open("config.yaml", "r", encoding="utf-8") as f:
                self.config_dict = yaml.safe_load(f)

            self.log_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.yaml")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í:")

            # ADX –±–∞–∑–æ–≤—ã–π
            adx_base = self.config_dict.get("scalping", {}).get("adx_filter", {})
            di_diff_base = adx_base.get("di_difference", "–ù–ï–¢")
            print(f"\nüìä ADX Filter (–±–∞–∑–æ–≤—ã–π):")
            print(f"   di_difference: {di_diff_base}")
            if di_diff_base == 5.0:
                self.log_issue(
                    "ADX", f"–ë–∞–∑–æ–≤—ã–π di_difference = {di_diff_base} (—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!)"
                )
            elif di_diff_base == 1.5:
                self.log_success(f"–ë–∞–∑–æ–≤—ã–π di_difference = {di_diff_base} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")

            # ARM —Ä–µ–∂–∏–º—ã
            arm_config = self.config_dict.get("scalping", {}).get("adaptive_regime", {})

            print(f"\nüß† ARM –†–ï–ñ–ò–ú–´:")
            for regime in ["trending", "ranging", "choppy"]:
                regime_cfg = arm_config.get(regime, {})
                modules = regime_cfg.get("modules", {})
                adx_cfg = modules.get("adx_filter", {})

                di_diff = adx_cfg.get("adx_di_difference", "–ù–ï–¢")
                ph_threshold = regime_cfg.get("ph_threshold", "–ù–ï–¢")

                print(f"\n   {regime.upper()}:")
                print(f"      adx_di_difference: {di_diff}")
                print(f"      ph_threshold: ${ph_threshold}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                expected_di = {"trending": 7.0, "ranging": 1.5, "choppy": 1.0}
                expected_ph = {"trending": 0.10, "ranging": 0.12, "choppy": 0.15}

                if di_diff == expected_di[regime]:
                    self.log_success(f"{regime}: adx_di_difference = {di_diff} ‚úÖ")
                else:
                    self.log_issue(
                        "ARM",
                        f"{regime}: adx_di_difference = {di_diff}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_di[regime]}",
                    )

                if ph_threshold == expected_ph[regime]:
                    self.log_success(f"{regime}: ph_threshold = ${ph_threshold} ‚úÖ")
                else:
                    self.log_issue(
                        "ARM",
                        f"{regime}: ph_threshold = ${ph_threshold}, –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected_ph[regime]}",
                    )

        except Exception as e:
            self.log_issue("CONFIG", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

        return True

    async def step_2_check_orchestrator_params(self):
        """–®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–¥–µ orchestrator.py"""
        print("\n" + "=" * 80)
        print("üîç –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê ORCHESTRATOR.PY")
        print("=" * 80)

        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª orchestrator.py
            orch_file = Path("src/strategies/scalping/orchestrator.py")
            if not orch_file.exists():
                self.log_issue("FILE", "orchestrator.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False

            with open(orch_file, "r", encoding="utf-8") as f:
                orch_code = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É 225 (–±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ADX)
            if "di_difference=self.config.adx_filter.get" in orch_code:
                if 'di_difference", 1.5)' in orch_code:
                    self.log_success("–°—Ç—Ä–æ–∫–∞ 225: di_difference default = 1.5 ‚úÖ")
                elif 'di_difference", 5.0)' in orch_code:
                    self.log_issue(
                        "ORCH_225", "–°—Ç—Ä–æ–∫–∞ 225: di_difference default = 5.0 (—Å—Ç–∞—Ä–æ–µ!)"
                    )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º hardcoded –∑–Ω–∞—á–µ–Ω–∏—è ARM
            import re

            trending_di = re.search(
                r"# TRENDING.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if trending_di:
                val = float(trending_di.group(1))
                if val == 7.0:
                    self.log_success(f"TRENDING: adx_di_difference = {val} ‚úÖ")
                else:
                    self.log_issue(
                        "ORCH_TREND",
                        f"TRENDING: adx_di_difference = {val} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7.0)",
                    )

            ranging_di = re.search(
                r"# RANGING.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if ranging_di:
                val = float(ranging_di.group(1))
                if val == 1.5:
                    self.log_success(f"RANGING: adx_di_difference = {val} ‚úÖ")
                else:
                    self.log_issue(
                        "ORCH_RANG",
                        f"RANGING: adx_di_difference = {val} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1.5)",
                    )

            choppy_di = re.search(
                r"# CHOPPY.*?adx_di_difference\s*=\s*([\d.]+)", orch_code, re.DOTALL
            )
            if choppy_di:
                val = float(choppy_di.group(1))
                if val == 1.0:
                    self.log_success(f"CHOPPY: adx_di_difference = {val} ‚úÖ")
                else:
                    self.log_issue(
                        "ORCH_CHOP",
                        f"CHOPPY: adx_di_difference = {val} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1.0)",
                    )

        except Exception as e:
            self.log_issue("ORCH_CHECK", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ orchestrator.py: {e}")
            return False

        return True

    async def step_5_test_filters(self):
        """–®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        print("\n" + "=" * 80)
        print("üîç –®–ê–ì 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–û–í")
        print("=" * 80)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_cases = [
            {
                "name": "BTC LONG (+DI=16.4, -DI=13.9)",
                "plus_di": 16.4,
                "minus_di": 13.9,
                "direction": "LONG",
            },
            {
                "name": "BTC LONG (+DI=12.7, -DI=14.6)",
                "plus_di": 12.7,
                "minus_di": 14.6,
                "direction": "LONG",
            },
            {
                "name": "ETH SHORT (-DI=14.1, +DI=29.5)",
                "plus_di": 29.5,
                "minus_di": 14.1,
                "direction": "SHORT",
            },
        ]

        print("\nüìä –¢–ï–°–¢–û–í–´–ï –ö–ï–ô–°–´ –ò–ó –õ–û–ì–û–í:\n")

        for test in test_cases:
            print(f"   {test['name']}:")
            plus_di = test["plus_di"]
            minus_di = test["minus_di"]
            direction = test["direction"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            for threshold in [5.0, 1.5, 1.0]:
                if direction == "LONG":
                    diff = plus_di - minus_di
                    passed = diff >= threshold
                else:  # SHORT
                    diff = minus_di - plus_di
                    passed = diff >= threshold

                status = "‚úÖ PASS" if passed else "‚ùå BLOCK"
                print(f"      –ü–æ—Ä–æ–≥ {threshold}: diff={diff:.1f} ‚Üí {status}")
            print()

        return True

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print("\n" + "=" * 80)
        print("üî¨ BOT SIMULATOR - –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)

        steps = [
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.step_1_load_config),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API", self.step_2_init_client),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Orchestrator", self.step_3_init_orchestrator),
            ("–°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞", self.step_4_simulate_signal_generation),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤", self.step_5_test_filters),
        ]

        for i, (name, step_func) in enumerate(steps, 1):
            try:
                success = await step_func()
                if not success:
                    print(f"\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —à–∞–≥–µ {i}: {name}")
                    break
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                self.log_issue("FATAL", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i} ({name}): {e}")
                import traceback

                traceback.print_exc()
                break

        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 80)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)

        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´: {len(self.issues)}")
        for issue in self.issues:
            print(f"   [{issue['category']}] {issue['message']}")

        print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {len(self.warnings)}")
        for warning in self.warnings:
            print(f"   [{warning['category']}] {warning['message']}")

        if not self.issues:
            print("\n‚úÖ –í–°–ï –û–¢–õ–ò–ß–ù–û! –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        else:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û {len(self.issues)} –ü–†–û–ë–õ–ï–ú - –ò–°–ü–†–ê–í–¨ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú!")

        print("=" * 80)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.client:
            await self.client.session.close()


async def main():
    simulator = BotSimulator()
    await simulator.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥...")
