"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ò–†–ñ–ò
–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
import sys
from datetime import datetime

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def final_exchange_check():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ"""
    print("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ò–†–ñ–ò")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            open_orders = await bot.client.get_open_orders()
            print(f"üìä –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(open_orders)}")

            if isinstance(open_orders, list):
                orders_data = open_orders
                print(f"üìä –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders_data)}")
            else:
                orders_data = open_orders.get("data", [])
                print(f"üìä –°–ª–æ–≤–∞—Ä—å —Å data: {len(orders_data)}")

            for i, order in enumerate(orders_data, 1):
                print(f"   {i}. –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(order)}")
                if hasattr(order, "__dict__"):
                    print(f"      –ê—Ç—Ä–∏–±—É—Ç—ã: {list(order.__dict__.keys())}")
                if hasattr(order, "get"):
                    print(f"      –ö–ª—é—á–∏: {list(order.keys())}")
                print(f"      –û–±—ä–µ–∫—Ç: {order}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 2. –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê
        print(f"\nü§ñ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            algo_orders = await bot.client.get_algo_orders()
            print(f"üìä –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

            for i, order in enumerate(algo_orders, 1):
                print(f"   {i}. {order}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 3. –ü–û–ó–ò–¶–ò–ò
        print(f"\nüíº –ü–û–ó–ò–¶–ò–ò:")
        print("-" * 50)

        try:
            positions = await bot.client.get_positions()
            print(f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")

            for i, pos in enumerate(positions, 1):
                print(f"   {i}. {pos}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

        # 4. –ë–ê–õ–ê–ù–°
        print(f"\nüí∞ –ë–ê–õ–ê–ù–°:")
        print("-" * 50)

        try:
            balances = await bot.client.get_account_balance()
            print(f"üìä –ë–∞–ª–∞–Ω—Å–æ–≤: {len(balances)}")

            for balance in balances:
                if balance.currency in ["ETH", "USDT", "BTC"]:
                    print(
                        f"   {balance.currency}: {balance.free:.8f} (free) | {balance.used:.8f} (used)"
                    )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

        # 5. –ó–ê–ô–ú–´
        print(f"\nüö® –ó–ê–ô–ú–´:")
        print("-" * 50)

        try:
            eth_borrowed = await bot.client.get_borrowed_balance("ETH")
            usdt_borrowed = await bot.client.get_borrowed_balance("USDT")
            btc_borrowed = await bot.client.get_borrowed_balance("BTC")

            print(f"   ETH –∑–∞–π–º—ã: {eth_borrowed:.8f}")
            print(f"   USDT –∑–∞–π–º—ã: {usdt_borrowed:.2f}")
            print(f"   BTC –∑–∞–π–º—ã: {btc_borrowed:.8f}")

            if eth_borrowed > 0 or usdt_borrowed > 0 or btc_borrowed > 0:
                print("   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ó–ê–ô–ú–´!")
            else:
                print("   ‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–π–º–æ–≤: {e}")

        # 6. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê
        print(f"\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê:")
        print("-" * 50)

        try:
            account_config = await bot.client.get_account_config()
            print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {account_config}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

        await bot.shutdown()
        print("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(final_exchange_check())
