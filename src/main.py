"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å BotRunner, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É
–≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
- REST API (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π polling)
- WebSocket (real-time –¥–∞–Ω–Ω—ã–µ)
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional

from loguru import logger

from src.config import BotConfig, load_config
from src.okx_client import OKXClient
# REST API —Ä–µ–∂–∏–º
from src.strategies.scalping.orchestrator import ScalpingOrchestrator
# WebSocket —Ä–µ–∂–∏–º
from src.strategies.scalping.websocket_orchestrator import \
    WebSocketScalpingOrchestrator
# ‚úÖ –ù–û–í–û–ï: –ï–¥–∏–Ω—ã–π –ø–æ–ª–Ω—ã–π –ª–æ–≥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
from src.utils.logging_setup import setup_logging

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
Path("logs").mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(log_level="DEBUG")  # –ü–æ–ª–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


class BotRunner:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º.

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π,
    –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
    - REST API (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π polling)
    - WebSocket (real-time –¥–∞–Ω–Ω—ã–µ)

    Attributes:
        config: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏—Ä–∂–µ–π OKX
        strategy: –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (REST –∏–ª–∏ WebSocket)
        mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('rest' –∏–ª–∏ 'websocket')
    """

    def __init__(self, config: BotConfig, mode: str = "rest") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.

        Args:
            config: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('rest' –∏–ª–∏ 'websocket')
        """
        self.config = config
        self.mode = mode.lower()
        self.client = OKXClient(config.api["okx"])

        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.mode == "websocket":
            logger.info("üöÄ Initializing WebSocket mode...")
            self.strategy = WebSocketScalpingOrchestrator(config, self.client)
        else:
            logger.info("üîÑ Initializing REST API mode...")
            self.strategy = ScalpingOrchestrator(
                self.client, config.scalping, config.risk, config
            )

    async def initialize(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞.

        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∏—Ä–∂–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏
        –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.

        Raises:
            ConnectionError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        logger.info(f"Initializing bot in {self.mode.upper()} mode...")
        await self.client.connect()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—Ö–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è REST —Ä–µ–∂–∏–º–∞)
        if self.mode == "rest" and hasattr(self.strategy, "initialize_websocket"):
            try:
                await self.strategy.initialize_websocket()
                logger.info("‚úÖ WebSocket Order Executor initialized for fast entries")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è WebSocket initialization failed: {e}")
                logger.info("üîÑ Will use REST API for order placement")

        logger.info("Bot initialized.")

    async def run(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.

        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É
        –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

        Raises:
            Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –≤–æ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        logger.info(f"Running bot in {self.mode.upper()} mode...")

        if self.mode == "websocket":
            # WebSocket —Ä–µ–∂–∏–º - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
            await self.strategy.start()
        else:
            # REST —Ä–µ–∂–∏–º - –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            await self.strategy.run()

    async def shutdown(self) -> None:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
        –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
        """
        logger.info("Shutting down bot...")

        if self.mode == "websocket":
            # WebSocket —Ä–µ–∂–∏–º - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.strategy.stop()
        else:
            # REST —Ä–µ–∂–∏–º - –æ—á–∏—Å—Ç–∫–∞ WebSocket Order Executor
            if hasattr(self.strategy, "cleanup_websocket"):
                await self.strategy.cleanup_websocket()

        await self.client.disconnect()
        logger.info("Bot shutdown complete.")


def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

    –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏
    –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (REST –∏–ª–∏ WebSocket).

    Command-line Args:
        --config: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (default: config.yaml)
        --mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('rest' –∏–ª–∏ 'websocket', default: 'rest')

    Raises:
        SystemExit: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö —Å –∫–æ–¥–æ–º 1
    """
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="OKX Trading Bot CLI")
    parser.add_argument(
        "--config",
        default="config.yaml",
        help="Path to configuration file",
    )
    parser.add_argument(
        "--mode",
        choices=["rest", "websocket"],
        default="rest",
        help="Trading mode: 'rest' for REST API or 'websocket' for real-time data",
    )

    args = parser.parse_args()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config(args.config)
        logger.info(f"Configuration loaded from {args.config}")

        # –°–æ–∑–¥–∞–µ–º runner —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        runner = BotRunner(config, mode=args.mode)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π event loop
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(runner.initialize())
            loop.run_until_complete(runner.run())
        except KeyboardInterrupt:
            logger.info("Bot stopped by user (Ctrl+C)")
            loop.run_until_complete(runner.shutdown())
            sys.exit(0)
        except Exception as e:
            logger.error(f"Critical error running bot: {e}")
            loop.run_until_complete(runner.shutdown())
            sys.exit(1)

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
