import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

"""
–û–¢–ú–ï–ù–ê –¢–ï–°–¢–û–í–´–• –û–†–î–ï–†–û–í
–û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ LIMIT –æ—Ä–¥–µ—Ä–∞ –æ—Ç —Ç–µ—Å—Ç–æ–≤
"""

import asyncio
import sys

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def cancel_test_orders():
    """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üö® –û–¢–ú–ï–ù–ê –¢–ï–°–¢–û–í–´–• –û–†–î–ï–†–û–í")
    print("=" * 50)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        open_orders = await bot.client.get_open_orders()

        if isinstance(open_orders, list):
            orders_data = open_orders
        else:
            orders_data = open_orders.get("data", [])

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders_data)}")

        # –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
        for i, order in enumerate(orders_data, 1):
            order_id = order.id if hasattr(order, "id") else order.get("ordId")
            symbol = order.symbol if hasattr(order, "symbol") else order.get("instId")

            print(f"   {i}. –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä {order_id} ({symbol})...")

            try:
                result = await bot.client.cancel_order(symbol, order_id)
                if result.get("code") == "0":
                    print(f"      ‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {result.get('msg')}")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        final_orders = await bot.client.get_open_orders()

        if isinstance(final_orders, list):
            final_count = len(final_orders)
        else:
            final_count = len(final_orders.get("data", []))

        if final_count == 0:
            print("‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –æ—Ä–¥–µ—Ä–æ–≤: {final_count}")

        await bot.shutdown()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(cancel_test_orders())
