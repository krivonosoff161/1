import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∑–∞–π–º–æ–≤
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def debug_api_borrowed():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∑–∞–π–º–æ–≤"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ó–ê–ô–ú–û–í")
    print("=" * 50)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
            print("\n1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê:")
            print("-" * 30)
            account_config = await client.get_account_config()
            print(f"   Account Level: {account_config.get('acctLv', 'N/A')}")
            print(f"   Position Mode: {account_config.get('posMode', 'N/A')}")
            print(f"   Auto Loan: {account_config.get('autoLoan', 'N/A')}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
            print("\n2Ô∏è‚É£ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ë–ê–õ–ê–ù–°–ê:")
            print("-" * 30)
            try:
                balance_response = await client._make_request("GET", "/account/balance")
                print(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {balance_response}")

                # –ò—â–µ–º –∑–∞–π–º—ã –≤ –æ—Ç–≤–µ—Ç–µ
                if balance_response.get("data"):
                    for account in balance_response["data"]:
                        for detail in account.get("details", []):
                            if detail.get("ccy") in ["BTC", "USDT"]:
                                print(f"   {detail.get('ccy')}:")
                                print(f"     Balance: {detail.get('bal', '0')}")
                                print(f"     Available: {detail.get('availBal', '0')}")
                                print(f"     Borrowed: {detail.get('borrowed', '0')}")
                                print(f"     Interest: {detail.get('interest', '0')}")

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ get_borrowed_balance
            print("\n3Ô∏è‚É£ –ú–ï–¢–û–î get_borrowed_balance:")
            print("-" * 30)
            try:
                btc_borrowed = await client.get_borrowed_balance("BTC")
                usdt_borrowed = await client.get_borrowed_balance("USDT")
                print(f"   BTC –∑–∞–π–º (–º–µ—Ç–æ–¥): {btc_borrowed}")
                print(f"   USDT –∑–∞–π–º (–º–µ—Ç–æ–¥): {usdt_borrowed}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞: {e}")

            # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("-" * 30)

            if account_config.get("posMode") == "long_short_mode":
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Position Mode = long_short_mode")
                print("   –≠—Ç–æ MARGIN —Ä–µ–∂–∏–º, –ø–æ—ç—Ç–æ–º—É API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–π–º—ã")
                print("   –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ net_mode –≤ OKX")
            else:
                print("‚úÖ Position Mode: SPOT")

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
            print("\n5Ô∏è‚É£ –õ–û–ì–ò–ö–ê –ë–û–¢–ê:")
            print("-" * 30)
            print("   –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: borrowed_base > 0 or borrowed_quote > 0")
            print("   –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–π–º—ã - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é")
            print("   –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SPOT —Ç–æ—Ä–≥–æ–≤–ª–∏")

            # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)
            print("1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å Position Mode –Ω–∞ Net –≤ OKX")
            print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ borrowed = 0")
            print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_api_borrowed())
