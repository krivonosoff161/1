"""
–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø OCO –û–†–î–ï–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å API –≤–∏–¥–∏—Ç OCO –æ—Ä–¥–µ—Ä–∞
"""

import asyncio
import sys

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def test_oco_orders_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è OCO –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø OCO –û–†–î–ï–†–û–í")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–†–û–í–ï–†–ö–ê OCO –û–†–î–ï–†–û–í
        print(f"\nü§ñ –ü–†–û–í–ï–†–ö–ê OCO –û–†–î–ï–†–û–í:")
        print("-" * 50)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OCO –æ—Ä–¥–µ—Ä–∞
            oco_orders = await bot.client.get_algo_orders(algo_type="oco")
            print(f"üìä OCO –æ—Ä–¥–µ—Ä–æ–≤: {len(oco_orders)}")

            for i, order in enumerate(oco_orders, 1):
                print(f"   {i}. Algo ID: {order.get('algoId')}")
                print(f"      Symbol: {order.get('instId')}")
                print(f"      Type: {order.get('ordType')}")
                print(f"      Side: {order.get('side')}")
                print(f"      Size: {order.get('sz')}")
                print(f"      TP: {order.get('tpTriggerPx')}")
                print(f"      SL: {order.get('slTriggerPx')}")
                print(f"      State: {order.get('state')}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OCO –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 2. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
        print(f"\nü§ñ –í–°–ï –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã
            all_algo_orders = await bot.client.get_algo_orders()
            print(f"üìä –í—Å–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(all_algo_orders)}")

            for i, order in enumerate(all_algo_orders, 1):
                print(f"   {i}. Algo ID: {order.get('algoId')}")
                print(f"      Symbol: {order.get('instId')}")
                print(f"      Type: {order.get('ordType')}")
                print(f"      Side: {order.get('side')}")
                print(f"      Size: {order.get('sz')}")
                print(f"      State: {order.get('state')}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 3. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        print("-" * 50)

        try:
            open_orders = await bot.client.get_open_orders()
            if isinstance(open_orders, list):
                orders_data = open_orders
            else:
                orders_data = open_orders.get("data", [])

            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders_data)}")

            for i, order in enumerate(orders_data, 1):
                order_id = order.id if hasattr(order, "id") else order.get("ordId")
                symbol = (
                    order.symbol if hasattr(order, "symbol") else order.get("instId")
                )
                side = order.side if hasattr(order, "side") else order.get("side")
                order_type = (
                    order.type if hasattr(order, "type") else order.get("ordType")
                )

                print(f"   {i}. ID: {order_id}")
                print(f"      Symbol: {symbol}")
                print(f"      Side: {side}")
                print(f"      Type: {order_type}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        await bot.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(test_oco_orders_fix())
