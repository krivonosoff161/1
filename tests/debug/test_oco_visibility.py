"""
–¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã OCO Visibility
–ü—Ä–æ–±–ª–µ–º–∞: OCO –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è, –Ω–æ –Ω–µ –≤–∏–¥–Ω—ã —á–µ—Ä–µ–∑ get_algo_orders
"""
import asyncio
import os
import sys
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    os.system("chcp 65001 >nul")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger

from src.config import load_config
from src.okx_client import OKXClient


async def test_oco_visibility():
    """–¢–µ—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ OCO –æ—Ä–¥–µ—Ä–æ–≤"""

    print("=" * 60)
    print("üîç –¢–ï–°–¢: OCO VISIBILITY")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_config()
    # config.api —ç—Ç–æ Dict[str, APIConfig], –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    api_config = list(config.api.values())[0]
    client = OKXClient(api_config)
    await client.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
        eth_price = await client.get_current_price("ETH-USDT")
        print(f"\nüìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${eth_price:.2f}")

        # –†–∞–∑–º–µ—â–∞–µ–º OCO –æ—Ä–¥–µ—Ä
        print(f"\nüõí –®–∞–≥ 1: –†–∞–∑–º–µ—â–∞–µ–º OCO –æ—Ä–¥–µ—Ä...")

        tp_price = eth_price * 1.005  # +0.5%
        sl_price = eth_price * 0.9965  # -0.35%

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
        oco_result = await client._make_request(
            "POST",
            "/trade/order-algo",
            data={
                "instId": "ETH-USDT",
                "tdMode": "cash",
                "side": "sell",
                "ordType": "oco",
                "sz": "0.005",
                "tpTriggerPx": str(tp_price),
                "slTriggerPx": str(sl_price),
                "tpOrdPx": "-1",
                "slOrdPx": "-1",
                "autoBorrow": "false",
            },
        )

        oco_id = oco_result.get("data", [{}])[0].get("algoId")
        print(f"‚úÖ OCO —Ä–∞–∑–º–µ—â–µ–Ω: {oco_id}")
        print(f"   TP: ${tp_price:.2f}")
        print(f"   SL: ${sl_price:.2f}")

        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print(f"\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        await asyncio.sleep(2)

        # –®–∞–≥ 2: –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OCO
        print(f"\nüîç –®–∞–≥ 2: –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OCO...")

        # 2.1 –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ get_algo_orders —Å —Ñ–∏–ª—å—Ç—Ä–æ–º OCO
        print(f"\nüìä 2.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ get_algo_orders (algo_type='oco'):")
        algo_orders_oco = await client.get_algo_orders(
            symbol="ETH-USDT", algo_type="oco"
        )
        print(f"   –ù–∞–π–¥–µ–Ω–æ OCO –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders_oco)}")

        # 2.2 –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞
        print(f"\nüìä 2.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
        all_algo = await client.get_algo_orders()
        print(f"   –í—Å–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(all_algo)}")

        if all_algo:
            print(f"   –î–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
            for i, order in enumerate(all_algo):
                print(f"   –û—Ä–¥–µ—Ä {i+1}:")
                print(f"   - algoId: {order.get('algoId')}")
                print(f"   - ordType: {order.get('ordType')}")
                print(f"   - instId: {order.get('instId')}")
                print(f"   - state: {order.get('state')}")
                print(f"   - tpTriggerPx: {order.get('tpTriggerPx')}")
                print(f"   - slTriggerPx: {order.get('slTriggerPx')}")
                if order.get("algoId") == oco_id:
                    print(f"   ‚úÖ –°–û–í–ü–ê–î–ê–ï–¢ –° –†–ê–ó–ú–ï–©–ï–ù–ù–´–ú OCO!")

        # 2.3 –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
        print(f"\nüìä 2.3 –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å –∫ /trade/orders-algo-pending:")
        try:
            direct_result = await client._make_request(
                "GET",
                "/trade/orders-algo-pending",
                params={"instType": "SPOT", "state": "live", "instId": "ETH-USDT"},
            )
            direct_orders = direct_result.get("data", [])
            print(f"   –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—à–µ–ª –æ—Ä–¥–µ—Ä–æ–≤: {len(direct_orders)}")

            if direct_orders:
                print(f"   –î–µ—Ç–∞–ª–∏ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
                for i, order in enumerate(direct_orders):
                    print(f"   –û—Ä–¥–µ—Ä {i+1}:")
                    print(f"   - algoId: {order.get('algoId')}")
                    print(f"   - ordType: {order.get('ordType')}")
                    print(f"   - instId: {order.get('instId')}")
                    print(f"   - state: {order.get('state')}")
                    if order.get("algoId") == oco_id:
                        print(f"   ‚úÖ –°–û–í–ü–ê–î–ê–ï–¢ –° –†–ê–ó–ú–ï–©–ï–ù–ù–´–ú OCO!")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # 2.4 –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ state
        print(f"\nüìä 2.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö state:")
        for state in ["live", "effective", "partially_filled", "filled", "cancelled"]:
            try:
                state_orders = await client._make_request(
                    "GET",
                    "/trade/orders-algo-pending",
                    params={"instType": "SPOT", "state": state, "instId": "ETH-USDT"},
                )
                state_count = len(state_orders.get("data", []))
                print(f"   state='{state}': {state_count} –æ—Ä–¥–µ—Ä–æ–≤")
            except Exception as e:
                print(f"   state='{state}': –æ—à–∏–±–∫–∞ - {e}")

        # 2.5 –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ instId
        print(f"\nüìä 2.5 –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ instId:")
        try:
            no_filter_result = await client._make_request(
                "GET",
                "/trade/orders-algo-pending",
                params={"instType": "SPOT", "state": "live"},
            )
            no_filter_orders = no_filter_result.get("data", [])
            print(f"   –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ instId: {len(no_filter_orders)} –æ—Ä–¥–µ—Ä–æ–≤")

            # –ò—â–µ–º –Ω–∞—à OCO —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
            found_our_oco = False
            for order in no_filter_orders:
                if order.get("algoId") == oco_id:
                    print(f"   ‚úÖ –ù–ê–® OCO –ù–ê–ô–î–ï–ù –ë–ï–ó –§–ò–õ–¨–¢–†–ê!")
                    print(f"   - instId: {order.get('instId')}")
                    print(f"   - ordType: {order.get('ordType')}")
                    print(f"   - state: {order.get('state')}")
                    found_our_oco = True
                    break

            if not found_our_oco:
                print(f"   ‚ùå –ù–ê–® OCO –ù–ï –ù–ê–ô–î–ï–ù –ë–ï–ó –§–ò–õ–¨–¢–†–ê")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

        # –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        print(f"   –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–π OCO ID: {oco_id}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ get_algo_orders: {len(algo_orders_oco)}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞: {len(all_algo)}")

        if len(all_algo) > 0 and len(algo_orders_oco) == 0:
            print(
                f"   üîç –ü–†–û–ë–õ–ï–ú–ê: OCO —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ —Ñ–∏–ª—å—Ç—Ä algo_type='oco' –µ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç!"
            )
            print(f"   üîç –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ get_algo_orders")
        elif len(all_algo) == 0:
            print(f"   üîç –ü–†–û–ë–õ–ï–ú–ê: OCO –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è!")
        else:
            print(f"   ‚úÖ OCO —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞...")

        # OCO –≤ sandbox –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç (–∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è/–æ—Ç–º–µ–Ω—è–µ—Ç—Å—è)
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω—è—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if oco_id:
            print(f"   ‚ÑπÔ∏è OCO {oco_id} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª–Ω–∏–ª—Å—è/–æ—Ç–º–µ–Ω–∏–ª—Å—è)")

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(test_oco_visibility())
