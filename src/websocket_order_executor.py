"""
WebSocket Order Executor –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—Ö–æ–¥–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏
–õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: 60-85 –º—Å (vs 180-220 –º—Å REST)
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Any, Dict, Optional

import aiohttp
from loguru import logger

from src.config import APIConfig
from src.models import Order, OrderSide, OrderType


class WebSocketOrderExecutor:
    """WebSocket-based order executor –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—Ö–æ–¥–æ–≤"""

    def __init__(self, api_config: APIConfig):
        self.api_config = api_config
        # OKX WebSocket URL (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è demo –∏ live)
        self.ws_url = "wss://ws.okx.com:8443/ws/v5/private"
        self.ws: Optional[aiohttp.ClientWebSocketResponse] = None
        self.connected = False
        self.pending_orders: Dict[str, Dict] = {}
        self.listener_task: Optional[asyncio.Task] = None
        self.heartbeat_task: Optional[asyncio.Task] = None

    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            # –°–æ–∑–¥–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.session = aiohttp.ClientSession()
            self.ws = await self.session.ws_connect(
                self.ws_url,
                heartbeat=20,  # OKX —Ç—Ä–µ–±—É–µ—Ç ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—â–µ
                timeout=aiohttp.ClientTimeout(total=600),  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                headers={
                    "Content-Type": "application/json",
                    "OK-ACCESS-KEY": self.api_config.api_key,
                    "OK-ACCESS-SIGN": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                    "OK-ACCESS-TIMESTAMP": "",
                    "OK-ACCESS-PASSPHRASE": self.api_config.passphrase,
                },
            )

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –°–†–ê–ó–£ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._authenticate()

            if not self.connected:
                logger.error("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º listener –∏ heartbeat –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self.listener_task = asyncio.create_task(self._listen_for_responses())
            self.heartbeat_task = asyncio.create_task(self._heartbeat())

            logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
            return False

    async def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ WebSocket"""
        # OKX WebSocket —Ç—Ä–µ–±—É–µ—Ç Unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Å—Ç—Ä–æ–∫–∞)
        import time

        timestamp = str(int(time.time()))
        message = f"{timestamp}GET/users/self/verify"

        logger.debug(f"WebSocket auth: timestamp={timestamp}, message={message}")

        # –ü–æ–¥–ø–∏—Å—å –¥–ª—è OKX WebSocket (–∫–∞–∫ –≤ REST API)
        import base64
        import hashlib
        import hmac

        signature = base64.b64encode(
            hmac.new(
                self.api_config.api_secret.encode("utf-8"),
                message.encode("utf-8"),
                hashlib.sha256,
            ).digest()
        ).decode("utf-8")

        auth_msg = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.api_config.api_key,
                    "passphrase": self.api_config.passphrase,
                    "timestamp": timestamp,
                    "sign": signature,
                }
            ],
        }

        await self.ws.send_str(json.dumps(auth_msg))
        logger.info(f"üîê WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (timestamp: {timestamp})")

        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–±—ã—Å—Ç—Ä–æ!)
        try:
            response = await asyncio.wait_for(self.ws.receive(), timeout=2.0)
            if response.type == aiohttp.WSMsgType.TEXT:
                data = json.loads(response.data)
                if data.get("event") == "login" and data.get("code") == "0":
                    logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data}")
                    self.connected = False
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.type}")
                self.connected = False
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket")
            self.connected = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            self.connected = False

    async def _heartbeat(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.connected and self.ws and not self.ws.closed:
            try:
                await asyncio.sleep(25)  # OKX —Ç—Ä–µ–±—É–µ—Ç ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if self.ws and not self.ws.closed:
                    await self.ws.ping()
                    logger.debug("üíì WebSocket ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat: {e}")
                self.connected = False
                break

    async def _listen_for_responses(self):
        """–°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç WebSocket"""
        try:
            if not self.ws:
                logger.warning("‚ö†Ô∏è WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è listener")
                return

            async for msg in self.ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = json.loads(msg.data)
                    await self._handle_websocket_message(data)
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"WebSocket error: {self.ws.exception()}")
                    self.connected = False
                    break
                elif msg.type == aiohttp.WSMsgType.CLOSE:
                    logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                    self.connected = False
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket listener: {e}")
            self.connected = False

    async def _handle_websocket_message(self, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket"""
        if data.get("event") == "login":
            if data.get("code") == "0":
                logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data}")

        elif data.get("arg", {}).get("channel") == "orders":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤
            order_data = data.get("data", [])
            for order in order_data:
                await self._handle_order_update(order)

    async def _handle_order_update(self, order_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤"""
        order_id = order_data.get("ordId")
        state = order_data.get("state")

        if order_id in self.pending_orders:
            self.pending_orders[order_id]["state"] = state

            if state == "filled":
                logger.info(f"‚úÖ WebSocket –æ—Ä–¥–µ—Ä {order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
                self.pending_orders[order_id]["filled"] = True
            elif state in ["canceled", "failed"]:
                logger.warning(f"‚ö†Ô∏è WebSocket –æ—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω/–Ω–µ—É–¥–∞—á–µ–Ω")
                self.pending_orders[order_id]["failed"] = True

    async def place_market_order(
        self, symbol: str, side: OrderSide, quantity: float, price: float
    ) -> Optional[Order]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ MARKET –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC-USDT)
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞)

        Returns:
            Order –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.connected or not self.ws:
            logger.error("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return None

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
            if self.ws.closed:
                logger.error("‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            if side == OrderSide.BUY:
                size = f"{quantity:.6f}"
            else:
                size = f"{quantity:.6f}"

            order_id = str(uuid.uuid4())

            # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –æ—Ä–¥–µ—Ä–∞
            payload = {
                "id": order_id,
                "op": "order",
                "args": [
                    {
                        "instId": symbol,
                        "tdMode": "cash",
                        "side": side.value,
                        "ordType": "market",
                        "sz": size,
                    }
                ],
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                await self.ws.send_str(json.dumps(payload))
                logger.debug(f"üì§ WebSocket –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {order_id}")
            except Exception as send_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket –æ—Ä–¥–µ—Ä–∞: {send_error}")
                return None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending orders
            self.pending_orders[order_id] = {
                "symbol": symbol,
                "side": side,
                "quantity": quantity,
                "price": price,
                "state": "pending",
                "filled": False,
                "failed": False,
                "timestamp": datetime.utcnow(),
            }

            logger.info(
                f"üöÄ WebSocket MARKET –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {symbol} {side.value} {size}"
            )

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            start_time = datetime.utcnow()
            while (datetime.utcnow() - start_time).total_seconds() < 3:
                if self.pending_orders[order_id]["filled"]:
                    # –°–æ–∑–¥–∞–µ–º Order –æ–±—ä–µ–∫—Ç
                    order = Order(
                        id=order_id,
                        symbol=symbol,
                        side=side,
                        type=OrderType.MARKET,
                        quantity=quantity,
                        price=price,
                        status="filled",
                        timestamp=datetime.utcnow(),
                    )

                    # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                    del self.pending_orders[order_id]

                    logger.info(f"‚úÖ WebSocket –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
                    return order

                elif self.pending_orders[order_id]["failed"]:
                    logger.error(f"‚ùå WebSocket –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
                    del self.pending_orders[order_id]
                    return None

                await asyncio.sleep(0.1)  # –ñ–¥–µ–º 100–º—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

            # Timeout
            logger.warning(f"‚è∞ WebSocket –æ—Ä–¥–µ—Ä timeout: {order_id}")
            del self.pending_orders[order_id]
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è WebSocket –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        self.connected = False

        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        if self.listener_task and not self.listener_task.done():
            self.listener_task.cancel()
        if self.heartbeat_task and not self.heartbeat_task.done():
            self.heartbeat_task.cancel()

        if self.ws:
            try:
                await self.ws.close()
            except:
                pass
            self.ws = None
        if self.session:
            try:
                await self.session.close()
            except:
                pass
            self.session = None
        logger.info("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")

    async def reconnect(self) -> bool:
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket...")
        await self.disconnect()
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        return await self.connect()

    async def get_latency(self) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket"""
        if not self.connected or not self.ws or self.ws.closed:
            logger.warning("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
            return float("inf")

        try:
            start_time = datetime.utcnow()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
            ping_msg = {"op": "ping"}
            await self.ws.send_str(json.dumps(ping_msg))

            # –ñ–¥–µ–º pong (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            await asyncio.sleep(0.1)

            latency = (datetime.utcnow() - start_time).total_seconds() * 1000
            logger.info(f"üìä WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f} –º—Å")
            return latency

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return float("inf")
