#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–ï–°–¢ WebSocket + Profit Harvesting
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ö–ê–ö –ë–´ —Ä–∞–±–æ—Ç–∞–ª –±–æ—Ç —Å WebSocket –≤–º–µ—Å—Ç–æ REST API
"""

import asyncio
import json
import time
from dataclasses import dataclass
from datetime import datetime
from typing import Optional

import aiohttp


# –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dataclass
class TestPosition:
    symbol: str
    side: str  # "LONG" –∏–ª–∏ "SHORT"
    entry_price: float
    size: float
    timestamp: datetime
    oco_id: Optional[str] = None
    tp_price: Optional[float] = None
    sl_price: Optional[float] = None


class OKXWebSocketTest:
    """–¢–µ—Å—Ç–æ–≤—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è OKX"""

    def __init__(
        self, api_key: str, api_secret: str, passphrase: str, sandbox: bool = True
    ):
        self.api_key = api_key
        self.api_secret = api_secret
        self.passphrase = passphrase

        # WebSocket URL
        if sandbox:
            self.ws_url = "wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999"
            # Note: OKX demo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π WS, –Ω–æ —Å demo API –∫–ª—é—á–∞–º–∏
        else:
            self.ws_url = "wss://ws.okx.com:8443/ws/v5/public"

        self.ws = None
        self.session = None

        # –î–ª—è —Ç–µ—Å—Ç–∞ PH
        self.test_position: Optional[TestPosition] = None
        self.ph_enabled = True
        self.ph_threshold = 0.08  # $0.08
        self.ph_time_limit = 60  # 60 —Å–µ–∫—É–Ω–¥

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.price_updates = 0
        self.ph_checks = 0
        self.last_check_time = time.time()

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        self.session = aiohttp.ClientSession()

        try:
            print("\nüîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ OKX WebSocket...")
            print(f"   URL: {self.ws_url}")

            self.ws = await self.session.ws_connect(
                self.ws_url, heartbeat=20, timeout=30  # Ping –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫
            )

            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!\n")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def subscribe_ticker(self, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä (—Ü–µ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)"""
        subscribe_msg = {
            "op": "subscribe",
            "args": [{"channel": "tickers", "instId": symbol}],
        }

        print(f"üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å –Ω–∞ —Ç–∏–∫–µ—Ä {symbol}...")
        await self.ws.send_json(subscribe_msg)

        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        async for msg in self.ws:
            if msg.type == aiohttp.WSMsgType.TEXT:
                data = json.loads(msg.data)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                if data.get("event") == "subscribe":
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {data.get('arg', {}).get('channel')}\n")
                    break
                elif "data" in data:
                    # –£–∂–µ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ
                    break

    async def listen_prices(self, symbol: str, duration_seconds: int = 60):
        """–°–ª—É—à–∞–µ—Ç —Ü–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print("=" * 80)
        print(f"üëÇ –°–õ–£–®–ê–Æ –¶–ï–ù–´ {symbol} –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds} —Å–µ–∫—É–Ω–¥")
        print("=" * 80 + "\n")

        start_time = time.time()
        last_price = None
        price_changes = []

        try:
            async for msg in self.ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = json.loads(msg.data)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if "event" in data:
                        continue

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
                    if "data" in data:
                        for ticker in data["data"]:
                            current_price = float(ticker.get("last", 0))
                            timestamp = int(ticker.get("ts", 0))

                            if current_price > 0:
                                self.price_updates += 1

                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                now = datetime.fromtimestamp(timestamp / 1000)
                                change = ""

                                if last_price:
                                    diff = current_price - last_price
                                    pct = (diff / last_price) * 100
                                    change = f" ({diff:+.2f}, {pct:+.3f}%)"
                                    price_changes.append(abs(diff))

                                print(
                                    f"üí∞ {now.strftime('%H:%M:%S.%f')[:-3]} | "
                                    f"${current_price:.2f}{change}"
                                )

                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º PH
                                if self.test_position:
                                    await self.check_profit_harvesting(current_price)

                                last_price = current_price

                elif msg.type == aiohttp.WSMsgType.ERROR:
                    print(f"‚ùå WebSocket error: {msg.data}")
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                if time.time() - start_time >= duration_seconds:
                    print(f"\n‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ ({duration_seconds}—Å)")
                    break

        except asyncio.CancelledError:
            print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WEBSOCKET")
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω—ã: {self.price_updates}")
        print(f"–ß–∞—Å—Ç–æ—Ç–∞: {self.price_updates / duration_seconds:.2f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")

        if price_changes:
            avg_change = sum(price_changes) / len(price_changes)
            max_change = max(price_changes)
            print(f"–°—Ä–µ–¥–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${avg_change:.4f}")
            print(f"–ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${max_change:.4f}")

        if self.test_position:
            print(f"\nPH –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.ph_checks}")
            print(f"–ß–∞—Å—Ç–æ—Ç–∞ PH: {self.ph_checks / duration_seconds:.2f} –ø—Ä–æ–≤–µ—Ä–æ–∫/—Å–µ–∫")

    async def open_test_position(
        self, symbol: str, side: str, entry_price: float, size: float
    ):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é"""
        self.test_position = TestPosition(
            symbol=symbol,
            side=side,
            entry_price=entry_price,
            size=size,
            timestamp=datetime.utcnow(),
        )

        print("\n" + "=" * 80)
        print("üìà –¢–ï–°–¢–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê")
        print("=" * 80)
        print(f"Symbol: {symbol}")
        print(f"Side: {side}")
        print(f"Entry: ${entry_price:.2f}")
        print(f"Size: {size}")
        print(f"\nüéØ Profit Harvesting:")
        print(f"   –ü–æ—Ä–æ–≥: ${self.ph_threshold}")
        print(f"   –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {self.ph_time_limit}s")
        print("=" * 80 + "\n")

    async def check_profit_harvesting(self, current_price: float):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è Profit Harvesting (–ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ú –ë–û–¢–ï)"""
        if not self.test_position:
            return

        self.ph_checks += 1

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        now = time.time()
        if now - self.last_check_time < 1.0:  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            return
        self.last_check_time = now

        position = self.test_position
        time_since_open = (datetime.utcnow() - position.timestamp).total_seconds()

        # –†–∞—Å—á–µ—Ç PnL
        if position.side == "LONG":
            pnl_usd = (current_price - position.entry_price) * position.size
            price_change_pct = (
                (current_price - position.entry_price) / position.entry_price
            ) * 100
        else:  # SHORT
            pnl_usd = (position.entry_price - current_price) * position.size
            price_change_pct = (
                (position.entry_price - current_price) / position.entry_price
            ) * 100

        # –í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status = "‚è≥" if pnl_usd < self.ph_threshold else "‚úÖ"
        time_status = "‚è∞" if time_since_open >= self.ph_time_limit else "‚è±Ô∏è"

        print(f"\n{status} PH CHECK #{self.ph_checks}:")
        print(f"   Time: {time_since_open:.1f}s / {self.ph_time_limit}s {time_status}")
        print(
            f"   PnL: ${pnl_usd:.4f} / ${self.ph_threshold:.2f} "
            f"({pnl_usd/self.ph_threshold*100:.0f}%)"
        )
        print(f"   Price Œî: {price_change_pct:+.3f}%")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π PH
        if pnl_usd >= self.ph_threshold and time_since_open < self.ph_time_limit:
            print("\n" + "üéâ" * 40)
            print("üí∞üí∞üí∞ PROFIT HARVESTING TRIGGERED! üí∞üí∞üí∞")
            print("üéâ" * 40)
            print(f"\n‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å: ${pnl_usd:.4f}")
            print(f"‚úÖ –ó–∞ –≤—Ä–µ–º—è: {time_since_open:.1f}s")
            print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_pct:+.3f}%")
            print(f"‚úÖ Entry: ${position.entry_price:.2f} ‚Üí Exit: ${current_price:.2f}")
            print("\n" + "=" * 80)
            print("üöÄ –í –†–ï–ê–õ–¨–ù–û–ú –ë–û–¢–ï: –°–µ–π—á–∞—Å –±—ã –∑–∞–∫—Ä—ã–ª–∏ –ø–æ–∑–∏—Ü–∏—é MARKET –æ—Ä–¥–µ—Ä–æ–º!")
            print("üöÄ –ò –æ—Ç–º–µ–Ω–∏–ª–∏ OCO —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å!")
            print("=" * 80 + "\n")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.test_position = None
            return True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ
        if time_since_open < self.ph_time_limit:
            if pnl_usd > 0:
                progress = pnl_usd / self.ph_threshold * 100
                print(
                    f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ PH: {'‚ñà' * int(progress/10)}{' ' * (10-int(progress/10))} {progress:.0f}%"
                )

        return False

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ws:
            await self.ws.close()
        if self.session:
            await self.session.close()

        print("\nüëã WebSocket –∑–∞–∫—Ä—ã—Ç")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""

    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢: WebSocket + Profit Harvesting")
    print("=" * 80)
    print("\n–¶–µ–ª—å: –ü–æ–∫–∞–∑–∞—Ç—å –ö–ê–ö –ë–´ —Ä–∞–±–æ—Ç–∞–ª PH —Å WebSocket –≤–º–µ—Å—Ç–æ REST API")
    print("\n–ß—Ç–æ –±—É–¥–µ—Ç:")
    print("1. –ü–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ OKX WebSocket")
    print("2. –ü–æ–¥–ø–∏—à–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä BTC-USDT")
    print("3. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é")
    print("4. –°–º–æ—Ç—Ä–∏–º –∫–∞–∫ PH –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ö–ê–ñ–î–û–ï –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã")
    print("5. –ñ–¥–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è PH –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞")
    print("=" * 80 + "\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ .env
    import os

    from dotenv import load_dotenv

    load_dotenv()

    api_key = os.getenv("OKX_API_KEY", "")
    api_secret = os.getenv("OKX_API_SECRET", "")
    passphrase = os.getenv("OKX_PASSPHRASE", "")

    if not api_key:
        print("‚ö†Ô∏è  API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        print("‚ö†Ô∏è  WebSocket –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã)\n")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    ws_client = OKXWebSocketTest(api_key, api_secret, passphrase, sandbox=True)

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if not await ws_client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket")
            return

        # 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä
        symbol = "BTC-USDT"
        await ws_client.subscribe_ticker(symbol)

        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–µ–Ω—É
        await asyncio.sleep(2)

        # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        # –°–∏–º—É–ª–∏—Ä—É–µ–º LONG –ø–æ–∑–∏—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É)
        print("üîÑ –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏...")

        # –°–ª—É—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É
        first_price = None
        async for msg in ws_client.ws:
            if msg.type == aiohttp.WSMsgType.TEXT:
                data = json.loads(msg.data)
                if "data" in data and data["data"]:
                    first_price = float(data["data"][0].get("last", 0))
                    if first_price > 0:
                        break

        if not first_price:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
            return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        entry_price = first_price
        size = 0.001  # 0.001 BTC
        await ws_client.open_test_position(symbol, "LONG", entry_price, size)

        # 4. –°–ª—É—à–∞–µ–º —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º PH
        duration = 120  # 2 –º–∏–Ω—É—Ç—ã
        await ws_client.listen_prices(symbol, duration)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")

    finally:
        await ws_client.close()

    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    print("\nüí° –í–´–í–û–î–´:")
    print("   ‚Ä¢ –° WebSocket –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ö–ê–ñ–î–£–Æ –°–ï–ö–£–ù–î–£ (–Ω–µ –∫–∞–∂–¥—ã–µ 5 –∫–∞–∫ REST)")
    print("   ‚Ä¢ PH –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ö–ê–ñ–î–û–ï –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã")
    print("   ‚Ä¢ –®–∞–Ω—Å –ø–æ–π–º–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –ø—Ä–∏–±—ã–ª—å –ù–ê–ú–ù–û–ì–û –í–´–®–ï!")
    print("   ‚Ä¢ OCO –Ω–µ —É—Å–ø–µ–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å - PH –±—ã—Å—Ç—Ä–µ–µ!")
    print("\n")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
