"""
Multi-Timeframe Confirmation Module

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ (5m).
–ï—Å–ª–∏ 1m –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç LONG —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 5m —Ç–æ–∂–µ –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ.

Logic:
1. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Å—Ç–∞—Ä—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (5m)
2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA8 –∏ EMA21
3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞:
   - –ë—ã—á–∏–π: EMA8 > EMA21 –∏ —Ü–µ–Ω–∞ –≤—ã—à–µ –æ–±–µ–∏—Ö
   - –ú–µ–¥–≤–µ–∂–∏–π: EMA8 < EMA21 –∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –æ–±–µ–∏—Ö
4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
"""

import time
from datetime import datetime
from typing import Dict, List, Optional

import numpy as np
from loguru import logger
from pydantic import BaseModel, Field

from src.models import OHLCV
from src.clients.spot_client import OKXClient


class MTFConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Multi-Timeframe –º–æ–¥—É–ª—è"""

    confirmation_timeframe: str = Field(
        default="5m", description="–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (5m, 15m, 1H)"
    )
    score_bonus: int = Field(
        default=2, ge=0, le=5, description="–ë–æ–Ω—É—Å –∫ score –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"
    )
    block_opposite: bool = Field(
        default=True, description="–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
    )
    ema_fast_period: int = Field(
        default=8, ge=3, le=20, description="–ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π EMA"
    )
    ema_slow_period: int = Field(
        default=21, ge=10, le=50, description="–ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA"
    )
    cache_ttl_seconds: int = Field(
        default=30, ge=10, le=300, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ —Å–≤–µ—á–µ–π (—Å–µ–∫—É–Ω–¥—ã)"
    )


class MTFResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç Multi-Timeframe –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    confirmed: bool = Field(description="–°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    blocked: bool = Field(description="–°–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    bonus: int = Field(default=0, description="–ë–æ–Ω—É—Å –∫ score")
    reason: str = Field(description="–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è")
    htf_trend: Optional[str] = Field(
        default=None, description="–¢—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º –¢–§ (BULLISH/BEARISH/NEUTRAL)"
    )


class MultiTimeframeFilter:
    """
    Multi-Timeframe —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –º–ª–∞–¥—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ.

    Example:
        >>> config = MTFConfig(confirmation_timeframe="5m", score_bonus=2)
        >>> mtf = MultiTimeframeFilter(client, config)
        >>> result = await mtf.check_confirmation("BTC-USDT", "LONG")
        >>> if result.confirmed:
        ...     score += result.bonus
    """

    def __init__(self, client: OKXClient, config: MTFConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTF —Ñ–∏–ª—å—Ç—Ä–∞.

        Args:
            client: OKX API –∫–ª–∏–µ–Ω—Ç
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MTF –º–æ–¥—É–ª—è
        """
        self.client = client
        self.config = config

        # –ö—ç—à –¥–ª—è —Å–≤–µ—á–µ–π —Å—Ç–∞—Ä—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        self._candles_cache: Dict[str, tuple[List[OHLCV], float]] = {}

        logger.info(
            f"MTF Filter initialized: {config.confirmation_timeframe}, "
            f"bonus={config.score_bonus}, block_opposite={config.block_opposite}"
        )

    def update_parameters(self, new_config: MTFConfig):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MTF (–ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ ARM).

        Args:
            new_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MTF
        """
        old_block = self.config.block_opposite
        old_bonus = self.config.score_bonus

        self.config = new_config

        logger.info(
            f"üîÑ MTF –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            f"   block_opposite: {old_block} ‚Üí {new_config.block_opposite}\n"
            f"   score_bonus: {old_bonus} ‚Üí {new_config.score_bonus}\n"
            f"   timeframe: {new_config.confirmation_timeframe}"
        )

    async def check_confirmation(self, symbol: str, signal_side: str) -> MTFResult:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC-USDT")
            signal_side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ("LONG" –∏–ª–∏ "SHORT")

        Returns:
            MTFResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π

        Example:
            >>> result = await mtf.check_confirmation("BTC-USDT", "LONG")
            >>> if result.confirmed:
            ...     logger.info(f"MTF confirmed: {result.reason}")
            >>> elif result.blocked:
            ...     logger.warning(f"MTF blocked: {result.reason}")
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Å—Ç–∞—Ä—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            candles = await self._get_htf_candles(symbol)

            if not candles or len(candles) < self.config.ema_slow_period:
                logger.warning(
                    f"MTF: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} "
                    f"({len(candles) if candles else 0} —Å–≤–µ—á–µ–π)"
                )
                return MTFResult(
                    confirmed=False,
                    blocked=False,
                    bonus=0,
                    reason="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                    htf_trend=None,
                )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º –¢–§
            htf_trend = self._calculate_trend(candles)

            # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if signal_side == "LONG":
                if htf_trend == "BULLISH":
                    # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 5m –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç LONG –Ω–∞ 1m
                    logger.info(
                        f"MTF ‚úÖ {symbol}: LONG confirmed by {self.config.confirmation_timeframe} BULLISH trend"
                    )
                    return MTFResult(
                        confirmed=True,
                        blocked=False,
                        bonus=self.config.score_bonus,
                        reason=f"{self.config.confirmation_timeframe} –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ (EMA8>EMA21)",
                        htf_trend=htf_trend,
                    )
                elif htf_trend == "BEARISH" and self.config.block_opposite:
                    # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 5m –±–ª–æ–∫–∏—Ä—É–µ—Ç LONG –Ω–∞ 1m
                    logger.info(
                        f"MTF ‚ùå {symbol}: LONG blocked by {self.config.confirmation_timeframe} BEARISH trend"
                    )
                    return MTFResult(
                        confirmed=False,
                        blocked=True,
                        bonus=0,
                        reason=f"{self.config.confirmation_timeframe} –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ - –±–ª–æ–∫–∏—Ä—É–µ–º LONG",
                        htf_trend=htf_trend,
                    )
                else:
                    # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, –Ω–æ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
                    logger.debug(
                        f"MTF ‚ö†Ô∏è {symbol}: LONG –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ({self.config.confirmation_timeframe} NEUTRAL)"
                    )
                    return MTFResult(
                        confirmed=False,
                        blocked=False,
                        bonus=0,
                        reason=f"{self.config.confirmation_timeframe} –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ",
                        htf_trend=htf_trend,
                    )

            elif signal_side == "SHORT":
                if htf_trend == "BEARISH":
                    # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 5m –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç SHORT –Ω–∞ 1m
                    logger.info(
                        f"MTF ‚úÖ {symbol}: SHORT confirmed by {self.config.confirmation_timeframe} BEARISH trend"
                    )
                    return MTFResult(
                        confirmed=True,
                        blocked=False,
                        bonus=self.config.score_bonus,
                        reason=f"{self.config.confirmation_timeframe} –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ (EMA8<EMA21)",
                        htf_trend=htf_trend,
                    )
                elif htf_trend == "BULLISH" and self.config.block_opposite:
                    # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 5m –±–ª–æ–∫–∏—Ä—É–µ—Ç SHORT –Ω–∞ 1m
                    logger.info(
                        f"MTF ‚ùå {symbol}: SHORT blocked by {self.config.confirmation_timeframe} BULLISH trend"
                    )
                    return MTFResult(
                        confirmed=False,
                        blocked=True,
                        bonus=0,
                        reason=f"{self.config.confirmation_timeframe} –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ - –±–ª–æ–∫–∏—Ä—É–µ–º SHORT",
                        htf_trend=htf_trend,
                    )
                else:
                    # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                    logger.debug(
                        f"MTF ‚ö†Ô∏è {symbol}: SHORT –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ({self.config.confirmation_timeframe} NEUTRAL)"
                    )
                    return MTFResult(
                        confirmed=False,
                        blocked=False,
                        bonus=0,
                        reason=f"{self.config.confirmation_timeframe} –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ",
                        htf_trend=htf_trend,
                    )

            else:
                logger.error(f"MTF: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {signal_side}")
                return MTFResult(
                    confirmed=False,
                    blocked=False,
                    bonus=0,
                    reason=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_side}",
                    htf_trend=None,
                )

        except Exception as e:
            logger.error(f"MTF: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {symbol}: {e}", exc_info=True)
            return MTFResult(
                confirmed=False,
                blocked=False,
                bonus=0,
                reason=f"–û—à–∏–±–∫–∞: {str(e)}",
                htf_trend=None,
            )

    async def _get_htf_candles(self, symbol: str) -> List[OHLCV]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å—Ç–∞—Ä—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            List[OHLCV]: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
        """
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if symbol in self._candles_cache:
            cached_candles, cached_time = self._candles_cache[symbol]
            if current_time - cached_time < self.config.cache_ttl_seconds:
                logger.debug(
                    f"MTF: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è {symbol} "
                    f"(–≤–æ–∑—Ä–∞—Å—Ç: {current_time - cached_time:.1f}—Å)"
                )
                return cached_candles

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–≤–µ—á–∏
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA
            limit = max(50, self.config.ema_slow_period * 2)
            candles = await self.client.get_candles(
                symbol=symbol, timeframe=self.config.confirmation_timeframe, limit=limit
            )

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._candles_cache[symbol] = (candles, current_time)

            logger.debug(
                f"MTF: –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π {self.config.confirmation_timeframe} –¥–ª—è {symbol}"
            )
            return candles

        except Exception as e:
            logger.error(
                f"MTF: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π {self.config.confirmation_timeframe} –¥–ª—è {symbol}: {e}"
            )
            return []

    def _calculate_trend(self, candles: List[OHLCV]) -> str:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA8 –∏ EMA21.

        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π OHLCV

        Returns:
            str: "BULLISH", "BEARISH" –∏–ª–∏ "NEUTRAL"
        """
        if len(candles) < self.config.ema_slow_period:
            return "NEUTRAL"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        closes = np.array([float(c.close) for c in candles])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
        ema_fast = self._calculate_ema(closes, self.config.ema_fast_period)
        ema_slow = self._calculate_ema(closes, self.config.ema_slow_period)

        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞)
        current_price = closes[-1]
        current_ema_fast = ema_fast[-1]
        current_ema_slow = ema_slow[-1]

        logger.debug(
            f"MTF Trend: Price={current_price:.2f}, "
            f"EMA{self.config.ema_fast_period}={current_ema_fast:.2f}, "
            f"EMA{self.config.ema_slow_period}={current_ema_slow:.2f}"
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if current_ema_fast > current_ema_slow and current_price > current_ema_fast:
            # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥: –±—ã—Å—Ç—Ä–∞—è EMA > –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA –∏ —Ü–µ–Ω–∞ –≤—ã—à–µ –±—ã—Å—Ç—Ä–æ–π EMA
            return "BULLISH"
        elif current_ema_fast < current_ema_slow and current_price < current_ema_fast:
            # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥: –±—ã—Å—Ç—Ä–∞—è EMA < –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA –∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –±—ã—Å—Ç—Ä–æ–π EMA
            return "BEARISH"
        else:
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π: –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            return "NEUTRAL"

    def _calculate_ema(self, prices: np.ndarray, period: int) -> np.ndarray:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å Exponential Moving Average.

        Args:
            prices: –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω
            period: –ü–µ—Ä–∏–æ–¥ EMA

        Returns:
            np.ndarray: –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π EMA
        """
        ema = np.zeros_like(prices)
        multiplier = 2 / (period + 1)

        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = SMA
        ema[0] = prices[0]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
        for i in range(1, len(prices)):
            ema[i] = (prices[i] - ema[i - 1]) * multiplier + ema[i - 1]

        return ema

    def clear_cache(self, symbol: Optional[str] = None):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–≤–µ—á–µ–π.

        Args:
            symbol: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞—Ä–∞ –∏–ª–∏ None –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ –∫—ç—à–∞
        """
        if symbol:
            if symbol in self._candles_cache:
                del self._candles_cache[symbol]
                logger.debug(f"MTF: –ö—ç—à –¥–ª—è {symbol} –æ—á–∏—â–µ–Ω")
        else:
            self._candles_cache.clear()
            logger.debug("MTF: –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
