import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç WebSocket Orchestrator —Å –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.config import load_config
from src.okx_client import OKXClient
from src.strategies.scalping.websocket_orchestrator import \
    WebSocketScalpingOrchestrator


async def test_orchestrator_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("üß™ Detailed WebSocket Orchestrator Test")
    print("=" * 60)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã Loading config...")
        config = load_config("config.yaml")

        # –°–æ–∑–¥–∞–µ–º OKX Client
        print("üîß Creating OKX Client...")
        okx_client = OKXClient(config.get_okx_config())

        # –°–æ–∑–¥–∞–µ–º WebSocket Orchestrator
        print("üîß Creating WebSocket Orchestrator...")
        orchestrator = WebSocketScalpingOrchestrator(config, okx_client)

        print("‚úÖ Orchestrator created successfully!")
        print(f"   WebSocket Manager: {orchestrator.websocket_manager}")
        print(f"   Is Running: {orchestrator.is_running}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ start() –æ—Ç–¥–µ–ª—å–Ω–æ
        print("\nüîç Testing start() method step by step...")

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket Manager
        print("1Ô∏è‚É£ Checking WebSocket Manager...")
        print(f"   Connected: {orchestrator.websocket_manager.is_connected}")
        print(f"   Running: {orchestrator.websocket_manager.is_running}")

        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º connect() –æ—Ç–¥–µ–ª—å–Ω–æ
        print("2Ô∏è‚É£ Testing WebSocket connect() separately...")
        try:
            connect_result = await asyncio.wait_for(
                orchestrator.websocket_manager.connect(), timeout=5.0
            )
            print(f"   Connect result: {connect_result}")

            if connect_result:
                print("‚úÖ WebSocket connected successfully!")

                # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                print("3Ô∏è‚É£ Testing subscriptions...")
                for symbol in config.trading.symbols:
                    print(f"   Subscribing to ticker: {symbol}")
                    await orchestrator.websocket_manager.subscribe_ticker(symbol)

                    for interval in config.scalping.candle_intervals:
                        print(f"   Subscribing to candles: {symbol} {interval}")
                        await orchestrator.websocket_manager.subscribe_candles(
                            symbol, interval
                        )

                print("‚úÖ All subscriptions completed!")

                # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º start_listening()
                print("4Ô∏è‚É£ Testing start_listening()...")
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º start_listening —Å timeout
                    await asyncio.wait_for(
                        orchestrator.websocket_manager.start_listening(), timeout=3.0
                    )
                    print("‚úÖ start_listening() completed!")
                except asyncio.TimeoutError:
                    print("‚è∞ start_listening() timed out (expected - it runs forever)")
                except Exception as e:
                    print(f"‚ùå start_listening() failed: {e}")

                # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
                print("üîå Disconnecting...")
                await orchestrator.websocket_manager.disconnect()
                print("‚úÖ Disconnected successfully!")

                return True
            else:
                print("‚ùå WebSocket connection failed")
                return False

        except asyncio.TimeoutError:
            print("‚è∞ WebSocket connect() timed out!")
            print("   This is the problem - websockets.connect() is hanging!")
            return False
        except Exception as e:
            print(f"‚ùå WebSocket connect() failed: {e}")
            import traceback

            traceback.print_exc()
            return False

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_orchestrator_detailed())

    if result:
        print("üéâ Test PASSED!")
    else:
        print("üí• Test FAILED!")
        sys.exit(1)
