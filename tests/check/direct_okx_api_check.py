"""
–ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö OKX API
–û–±—Ö–æ–¥–∏–º –Ω–∞—à –∫–ª–∏–µ–Ω—Ç –∏ –¥–µ–ª–∞–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ OKX
"""

import asyncio
import base64
import hashlib
import hmac
import json
import os
from datetime import datetime

import aiohttp


async def direct_okx_api_check():
    """–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OKX API"""
    print("üîß –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö OKX API")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OKX_API_KEY")
    api_secret = os.getenv("OKX_API_SECRET")
    passphrase = os.getenv("OKX_PASSPHRASE")

    if not all([api_key, api_secret, passphrase]):
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

    base_url = "https://www.okx.com"  # Sandbox URL

    async with aiohttp.ClientSession() as session:
        try:
            # 1. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í
            print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í:")
            print("-" * 50)

            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            method = "GET"
            request_path = "/api/v5/trade/orders-pending"
            body = ""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message = timestamp + method + request_path + body
            signature = base64.b64encode(
                hmac.new(
                    api_secret.encode("utf-8"), message.encode("utf-8"), hashlib.sha256
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": passphrase,
                "Content-Type": "application/json",
                "x-simulated-trading": "1",  # Sandbox
            }

            url = base_url + request_path
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"üìä Code: {result.get('code')}")
                print(f"üìä Message: {result.get('msg')}")
                print(f"üìä Data: {result.get('data', [])}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(result.get('data', []))}")

                for i, order in enumerate(result.get("data", []), 1):
                    print(f"   {i}. ID: {order.get('ordId')}")
                    print(f"      Symbol: {order.get('instId')}")
                    print(f"      Side: {order.get('side')}")
                    print(f"      Type: {order.get('ordType')}")
                    print(f"      Size: {order.get('sz')}")
                    print(f"      Price: {order.get('px')}")
                    print(f"      State: {order.get('state')}")
                    print()

            # 2. –ü–†–û–í–ï–†–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
            print(f"\nü§ñ –ü–†–û–í–ï–†–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í:")
            print("-" * 50)

            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            method = "GET"
            request_path = "/api/v5/trade/orders-algo-pending"
            body = ""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message = timestamp + method + request_path + body
            signature = base64.b64encode(
                hmac.new(
                    api_secret.encode("utf-8"), message.encode("utf-8"), hashlib.sha256
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": passphrase,
                "Content-Type": "application/json",
                "x-simulated-trading": "1",  # Sandbox
            }

            url = base_url + request_path
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"üìä Code: {result.get('code')}")
                print(f"üìä Message: {result.get('msg')}")
                print(f"üìä Data: {result.get('data', [])}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ algo –æ—Ä–¥–µ—Ä–æ–≤: {len(result.get('data', []))}")

                for i, order in enumerate(result.get("data", []), 1):
                    print(f"   {i}. Algo ID: {order.get('algoId')}")
                    print(f"      Symbol: {order.get('instId')}")
                    print(f"      Type: {order.get('ordType')}")
                    print(f"      Side: {order.get('side')}")
                    print(f"      Size: {order.get('sz')}")
                    print(f"      TP: {order.get('tpTriggerPx')}")
                    print(f"      SL: {order.get('slTriggerPx')}")
                    print(f"      State: {order.get('state')}")
                    print()

            # 3. –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô
            print(f"\nüíº –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô:")
            print("-" * 50)

            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            method = "GET"
            request_path = "/api/v5/account/positions"
            body = ""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message = timestamp + method + request_path + body
            signature = base64.b64encode(
                hmac.new(
                    api_secret.encode("utf-8"), message.encode("utf-8"), hashlib.sha256
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": passphrase,
                "Content-Type": "application/json",
                "x-simulated-trading": "1",  # Sandbox
            }

            url = base_url + request_path
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"üìä Code: {result.get('code')}")
                print(f"üìä Message: {result.get('msg')}")
                print(f"üìä Data: {result.get('data', [])}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(result.get('data', []))}")

                for i, pos in enumerate(result.get("data", []), 1):
                    print(f"   {i}. Symbol: {pos.get('instId')}")
                    print(f"      Side: {pos.get('posSide')}")
                    print(f"      Size: {pos.get('pos')}")
                    print(f"      Avg Price: {pos.get('avgPx')}")
                    print(f"      Unrealized PnL: {pos.get('upl')}")
                    print()

            # 4. –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í
            print(f"\nüìú –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í:")
            print("-" * 50)

            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            method = "GET"
            request_path = "/api/v5/trade/orders-history?instId=ETH-USDT&limit=20"
            body = ""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message = timestamp + method + request_path + body
            signature = base64.b64encode(
                hmac.new(
                    api_secret.encode("utf-8"), message.encode("utf-8"), hashlib.sha256
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": passphrase,
                "Content-Type": "application/json",
                "x-simulated-trading": "1",  # Sandbox
            }

            url = base_url + request_path
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"üìä Code: {result.get('code')}")
                print(f"üìä Message: {result.get('msg')}")
                print(f"üìä Data: {result.get('data', [])}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(result.get('data', []))}")

                for i, order in enumerate(
                    result.get("data", [])[:10], 1
                ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   {i}. ID: {order.get('ordId')}")
                    print(f"      Symbol: {order.get('instId')}")
                    print(f"      Side: {order.get('side')}")
                    print(f"      Type: {order.get('ordType')}")
                    print(f"      Size: {order.get('sz')}")
                    print(f"      Price: {order.get('px')}")
                    print(f"      State: {order.get('state')}")
                    print(f"      Fill Size: {order.get('fillSz')}")
                    print(f"      Fill Price: {order.get('fillPx')}")
                    print()

            print("‚úÖ –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False


if __name__ == "__main__":
    asyncio.run(direct_okx_api_check())
