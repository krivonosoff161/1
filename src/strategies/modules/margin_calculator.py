"""
Margin Calculator –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
- –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∞—Ä–∂–∏
"""

import math
from typing import Any, Dict, Optional, Tuple

from loguru import logger


class MarginCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Isolated margin (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞)
    - –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–µ–≤–µ—Ä–∏–¥–∂–∞
    - –†–∞—Å—á–µ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
    - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    """

    def __init__(
        self,
        default_leverage: int = 3,
        maintenance_margin_ratio: float = 0.01,
        initial_margin_ratio: float = 0.1,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Ä–∂–∏

        Args:
            default_leverage: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–ª–µ—á–æ (3x)
            maintenance_margin_ratio: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –º–∞—Ä–∂–∏ (1%)
            initial_margin_ratio: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏ (10%)
        """
        self.default_leverage = default_leverage
        self.maintenance_margin_ratio = maintenance_margin_ratio
        self.initial_margin_ratio = initial_margin_ratio

        logger.info(
            f"MarginCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: leverage={default_leverage}x, "
            f"maintenance={maintenance_margin_ratio:.1%}, initial={initial_margin_ratio:.1%}"
        )

    def calculate_max_position_size(
        self, equity: float, current_price: float, leverage: Optional[int] = None
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏

        Args:
            equity: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (USDT)
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
            leverage: –ü–ª–µ—á–æ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default_leverage)

        Returns:
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
        """
        if leverage is None:
            leverage = self.default_leverage

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è = (–ë–∞–ª–∞–Ω—Å * –ü–ª–µ—á–æ) / –¶–µ–Ω–∞
        max_position_value = equity * leverage
        max_position_size = max_position_value / current_price

        logger.debug(
            f"–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: equity={equity:.2f}, "
            f"leverage={leverage}x, price={current_price:.4f}, "
            f"max_size={max_position_size:.6f}"
        )

        return max_position_size

    def calculate_liquidation_price(
        self,
        side: str,
        entry_price: float,
        position_size: float,
        equity: float,
        leverage: Optional[int] = None,
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏

        Args:
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('buy' –∏–ª–∏ 'sell')
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            position_size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            equity: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            leverage: –ü–ª–µ—á–æ

        Returns:
            –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        """
        if leverage is None:
            leverage = self.default_leverage

        # –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
        position_value = position_size * entry_price
        margin_used = position_value / leverage

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        if side.lower() == "buy":
            # –î–ª—è –ª–æ–Ω–≥–∞: LiqPrice = EntryPrice * (1 - (1/Leverage) + MaintenanceMarginRatio)
            liquidation_price = entry_price * (
                1 - (1 / leverage) + self.maintenance_margin_ratio
            )
        else:  # sell
            # –î–ª—è —à–æ—Ä—Ç–∞: LiqPrice = EntryPrice * (1 + (1/Leverage) - MaintenanceMarginRatio)
            liquidation_price = entry_price * (
                1 + (1 / leverage) - self.maintenance_margin_ratio
            )

        logger.debug(
            f"–†–∞—Å—á–µ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: side={side}, entry={entry_price:.4f}, "
            f"size={position_size:.6f}, equity={equity:.2f}, "
            f"liq_price={liquidation_price:.4f}"
        )

        return liquidation_price

    def calculate_margin_ratio(
        self, position_value: float, equity: float, leverage: Optional[int] = None
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏

        Args:
            position_value: –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            equity: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            leverage: –ü–ª–µ—á–æ

        Returns:
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Ä–∂–∏ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
        """
        if leverage is None:
            leverage = self.default_leverage

        margin_used = position_value / leverage
        margin_ratio = equity / margin_used if margin_used > 0 else float("inf")

        logger.debug(
            f"–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏: position_value={position_value:.2f}, "
            f"equity={equity:.2f}, leverage={leverage}x, "
            f"margin_ratio={margin_ratio:.2f}"
        )

        return margin_ratio

    def is_position_safe(
        self,
        position_value: float,
        equity: float,
        current_price: float,
        entry_price: float,
        side: str,
        leverage: Optional[int] = None,
        safety_threshold: float = 1.5,
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏

        Args:
            position_value: –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            equity: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            leverage: –ü–ª–µ—á–æ
            safety_threshold: –ü–æ—Ä–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1.5 = 150%)

        Returns:
            Tuple[bool, Dict] - (–±–µ–∑–æ–ø–∞—Å–Ω–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è, –¥–µ—Ç–∞–ª–∏)
        """
        if leverage is None:
            leverage = self.default_leverage

        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: position_value —É–∂–µ –≤ USD (size_in_coins * current_price)
        # –ü–æ—ç—Ç–æ–º—É position_size (–≤ –º–æ–Ω–µ—Ç–∞—Ö) = position_value / current_price
        # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ —á–µ–º –¥–µ–ª–∏—Ç—å –Ω–∞ entry_price, –ø–æ—Ç–æ–º—É —á—Ç–æ position_value —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç current_price
        position_size = position_value / current_price if current_price > 0 else 0

        logger.debug(
            f"üîç margin_calculator: position_value={position_value:.2f} USD, "
            f"current_price={current_price:.2f}, position_size={position_size:.6f} –º–æ–Ω–µ—Ç"
        )

        if side.lower() == "buy" or side.lower() == "long":
            pnl = (current_price - entry_price) * position_size
        else:  # sell/short
            pnl = (entry_price - current_price) * position_size

        # –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
        margin_used = position_value / leverage

        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –î–õ–Ø –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–û–ô –ú–ê–†–ñ–ò:
        #
        # –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ OKX:
        # - equity –ø–æ–∑–∏—Ü–∏–∏ = margin (–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –º–∞—Ä–∂–∞) + unrealizedPnl
        # - margin_ratio –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
        #
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏:
        # margin_ratio = equity / margin_used
        # –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ equity –±–æ–ª—å—à–µ margin (–∑–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏)
        #
        # –ù–æ –µ—Å–ª–∏ equity –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å (fallback):
        # - balance —É–∂–µ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ margin –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
        # - –ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: total_balance = equity + margin_used

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ equity –æ—á–µ–Ω—å –º–∞–ª –∏–ª–∏ 0 - —ç—Ç–æ fallback –Ω–∞ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        if equity <= 0 or (equity <= margin_used * 0.3 and abs(pnl) < 1.0):
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback - –±–∞–ª–∞–Ω—Å —É–∂–µ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ margin
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: –µ—Å–ª–∏ equity = balance_after, —Ç–æ balance_before = equity + margin_used
            if equity > 0:
                total_balance = (
                    equity + margin_used
                )  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
                available_margin = total_balance - margin_used + pnl
            else:
                # equity = 0 - –æ—à–∏–±–∫–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º margin_used * 5 –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                available_margin = margin_used * 5  # margin_ratio = 5 (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        elif abs(equity - margin_used) < margin_used * 0.1 and abs(pnl) < 1.0:
            # equity ‚âà margin_used (–Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è, PnL ‚âà 0)
            # –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏: –µ—Å–ª–∏ equity = margin, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # margin_ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 1, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç: available_margin = equity - margin_used = 0
            # –ù–æ —ç—Ç–æ –¥–∞—Å—Ç margin_ratio = 0, —á—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!
            # –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å equity / margin_used –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è margin_ratio
            # –ò–ª–∏: available_margin = equity - maintenance_margin (–Ω–æ –µ–≥–æ –Ω–µ—Ç)
            # –í—Ä–µ–º–µ–Ω–Ω–æ: –µ—Å–ª–∏ equity ‚âà margin, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–ø–∞—Å = margin (margin_ratio = 1)
            # –ù–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            available_margin = margin_used * 2  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞: margin_ratio = 2
        else:
            # equity –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –Ω–µ —Ä–∞–≤–µ–Ω margin (–µ—Å—Ç—å PnL –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)
            # –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏: equity = margin + PnL
            # available_margin = equity - margin_used = (margin + PnL) - margin = PnL
            # –ù–æ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ:
            # margin_ratio = equity / margin_used (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Å)
            # –ù–æ –¥–ª—è consistency –∏—Å–ø–æ–ª—å–∑—É–µ–º available_margin:
            available_margin = equity - margin_used + pnl

        logger.debug(
            f"üîç margin_calculator: equity={equity:.2f}, pnl={pnl:.2f}, "
            f"margin_used={margin_used:.2f}, available_margin={available_margin:.2f}"
        )

        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏
        # margin_ratio –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–∞—Ä–∂–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
        # –ï—Å–ª–∏ available_margin < 0, —Ç–æ margin_ratio –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º = —Ä–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏!
        if margin_used > 0:
            margin_ratio = available_margin / margin_used
        else:
            margin_ratio = float("inf") if available_margin > 0 else float("-inf")

        logger.debug(
            f"üîç margin_calculator: margin_ratio={margin_ratio:.2f} (–¥–æ –∑–∞—â–∏—Ç—ã)"
        )

        # üõ°Ô∏è –ó–ê–©–ò–¢–ê –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π:
        # –ï—Å–ª–∏ margin_ratio –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ PnL –Ω–µ–±–æ–ª—å—à–æ–π (< 10% –æ—Ç equity),
        # —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ equity > 0 (–µ—Å–ª–∏ –Ω–µ—Ç - —ç—Ç–æ —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞)
        if margin_ratio < 0 and equity > 0:
            pnl_percent = abs(pnl) / equity if equity > 0 else 0
            # ‚ö†Ô∏è –£–í–ï–õ–ò–ß–ï–ù –ü–û–†–û–ì: –ï—Å–ª–∏ PnL –º–µ–Ω–µ–µ 15% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –∞ margin_ratio –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –≤–µ—Ä–æ—è—Ç–Ω–∞ –æ—à–∏–±–∫–∞
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ available_margin –Ω–µ —Å–ª–∏—à–∫–æ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ equity
            margin_deficit_percent = abs(available_margin) / equity if equity > 0 else 0
            if (
                pnl_percent < 0.15 and margin_deficit_percent < 2.0
            ):  # –î–µ—Ñ–∏—Ü–∏—Ç –º–∞—Ä–∂–∏ < 200% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                logger.debug(
                    f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π margin_ratio={margin_ratio:.2f} –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: "
                    f"available_margin={available_margin:.2f}, pnl={pnl:.2f} ({pnl_percent:.2%} –æ—Ç –±–∞–ª–∞–Ω—Å–∞), "
                    f"–¥–µ—Ñ–∏—Ü–∏—Ç={margin_deficit_percent:.2%}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç: –ø—Ä–æ—Å—Ç–æ equity / margin_used
                margin_ratio = equity / margin_used if margin_used > 0 else float("inf")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        is_safe = margin_ratio >= safety_threshold

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        liquidation_price = self.calculate_liquidation_price(
            side, entry_price, position_size, equity, leverage
        )

        details = {
            "margin_ratio": margin_ratio,
            "available_margin": available_margin,
            "margin_used": margin_used,
            "pnl": pnl,
            "equity": equity,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º equity –¥–ª—è –∑–∞—â–∏—Ç
            "liquidation_price": liquidation_price,
            "safety_threshold": safety_threshold,
            "distance_to_liquidation": abs(current_price - liquidation_price)
            / current_price
            * 100,
        }

        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: safe={is_safe}, "
            f"margin_ratio={margin_ratio:.2f}, pnl={pnl:.2f}, "
            f"liq_price={liquidation_price:.4f}"
        )

        return is_safe, details

    def calculate_optimal_position_size(
        self,
        equity: float,
        current_price: float,
        risk_percentage: float = 0.02,
        leverage: Optional[int] = None,
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞

        Args:
            equity: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            risk_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (2%)
            leverage: –ü–ª–µ—á–æ

        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        """
        if leverage is None:
            leverage = self.default_leverage

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤ USDT
        max_risk_usdt = equity * risk_percentage

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞
        max_position_value = max_risk_usdt * leverage
        optimal_position_size = max_position_value / current_price

        logger.info(
            f"–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: equity={equity:.2f}, "
            f"risk={risk_percentage:.1%}, leverage={leverage}x, "
            f"optimal_size={optimal_position_size:.6f}"
        )

        return optimal_position_size

    def get_margin_health_status(
        self, equity: float, total_margin_used: float
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏

        Args:
            equity: –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_margin_used: –û–±—â–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞

        Returns:
            –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏
        """
        if total_margin_used == 0:
            return {
                "status": "excellent",
                "level": 100.0,
                "message": "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π",
            }

        margin_ratio = equity / total_margin_used

        if margin_ratio >= 3.0:
            status = "excellent"
            message = "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä–∂–∏"
        elif margin_ratio >= 2.0:
            status = "good"
            message = "–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä–∂–∏"
        elif margin_ratio >= 1.5:
            status = "warning"
            message = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞"
        elif margin_ratio >= 1.2:
            status = "danger"
            message = "–û–ü–ê–°–ù–û: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞"
        else:
            status = "critical"
            message = "–ö–†–ò–¢–ò–ß–ù–û: —Ä–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏!"

        return {
            "status": status,
            "level": margin_ratio,
            "message": message,
            "equity": equity,
            "margin_used": total_margin_used,
            "available_margin": equity - total_margin_used,
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator = MarginCalculator(default_leverage=3)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    equity = 1000.0  # 1000 USDT
    current_price = 50000.0  # BTC —Ü–µ–Ω–∞
    entry_price = 49500.0  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞

    # –†–∞—Å—á–µ—Ç—ã
    max_size = calculator.calculate_max_position_size(equity, current_price)
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {max_size:.6f} BTC")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    position_value = 1000.0  # 1000 USDT –ø–æ–∑–∏—Ü–∏—è
    is_safe, details = calculator.is_position_safe(
        position_value, equity, current_price, entry_price, "buy"
    )
    print(f"–ü–æ–∑–∏—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞: {is_safe}")
    print(f"–î–µ—Ç–∞–ª–∏: {details}")
