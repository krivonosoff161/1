"""
–¢–µ—Å—Ç Batch Amend Orders –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π TP/SL
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–π vs –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(".")

from src.config import load_config
from src.okx_client import OKXClient
from src.strategies.scalping.batch_order_manager import BatchOrderManager


async def test_batch_amend_efficiency():
    """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ batch amend vs –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    print("üîÑ –¢–ï–°–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò BATCH AMEND")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –°–æ–∑–¥–∞–µ–º Batch Order Manager
        batch_manager = BatchOrderManager(client)

        # –¢–µ—Å—Ç 1: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
        print("üìä –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        start_time = datetime.utcnow()

        # –°–∏–º—É–ª–∏—Ä—É–µ–º 5 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        for i in range(5):
            batch_manager.add_order_update(
                inst_id="BTC-USDT", ord_id=f"test_tp_{i}", new_px="50000.0"
            )
            batch_manager.add_order_update(
                inst_id="BTC-USDT", ord_id=f"test_sl_{i}", new_px="49000.0"
            )

        # Flush –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = await batch_manager.force_flush()
        individual_time = (datetime.utcnow() - start_time).total_seconds() * 1000

        print(f"   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {individual_time:.1f} –º—Å")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('code', 'unknown')}")

        # –¢–µ—Å—Ç 2: Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
        print("\nüìä –¢–µ—Å—Ç batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        start_time = datetime.utcnow()

        # –°–∏–º—É–ª–∏—Ä—É–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 10 –æ—Ä–¥–µ—Ä–æ–≤
        orders_data = []
        for i in range(10):
            orders_data.append(
                {
                    "instId": "BTC-USDT",
                    "ordId": f"batch_test_{i}",
                    "newPx": f"{50000 + i}.0",
                }
            )

        result = await client.batch_amend_orders(orders_data)
        batch_time = (datetime.utcnow() - start_time).total_seconds() * 1000

        print(f"   Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {batch_time:.1f} –º—Å")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('code', 'unknown')}")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if individual_time > 0 and batch_time > 0:
            improvement = individual_time - batch_time
            improvement_percent = (improvement / individual_time) * 100
            print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–ï:")
            print(
                f"   –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {improvement:.1f} –º—Å ({improvement_percent:.1f}%)"
            )
            print(f"   API calls: 10 ‚Üí 1 (-90%)")

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


async def test_batch_manager_stats():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Batch Order Manager"""
    print("\nüìä –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò BATCH MANAGER")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        batch_manager = BatchOrderManager(client)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        for i in range(3):
            batch_manager.add_order_update(
                inst_id="BTC-USDT", ord_id=f"stat_test_{i}", new_px="50000.0"
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = batch_manager.get_stats()
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Batch Manager:")
        print(f"   Pending updates: {stats['pending_updates']}")
        print(f"   Max batch size: {stats['max_batch_size']}")
        print(f"   Auto flush threshold: {stats['auto_flush_threshold']}")
        print(f"   Ready for flush: {stats['ready_for_flush']}")

        # –¢–µ—Å—Ç auto-flush
        print(f"\nüîÑ –¢–µ—Å—Ç auto-flush...")
        for i in range(8):  # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 8, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å threshold (10)
            batch_manager.add_order_update(
                inst_id="ETH-USDT", ord_id=f"auto_test_{i}", new_px="4000.0"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ auto-flush
        stats_after = batch_manager.get_stats()
        print(f"   –ü–æ—Å–ª–µ auto-flush: {stats_after['pending_updates']} pending")

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def test_tp_sl_batch_update():
    """–¢–µ—Å—Ç batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\nüéØ –¢–ï–°–¢ BATCH TP/SL –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        batch_manager = BatchOrderManager(client)

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL
        result = await batch_manager.update_tp_sl_batch(
            inst_id="BTC-USDT",
            tp_ord_id="test_tp_123",
            sl_ord_id="test_sl_123",
            new_tp_price="51000.0",
            new_sl_price="49000.0",
            new_tp_trigger="50500.0",
            new_sl_trigger="49500.0",
        )

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç batch TP/SL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   Code: {result.get('code', 'unknown')}")
        print(f"   Message: {result.get('msg', 'No message')}")
        print(f"   Data: {result.get('data', [])}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = batch_manager.get_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ TP/SL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   Pending updates: {stats['pending_updates']}")

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TP/SL: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH AMEND ORDERS")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await test_batch_amend_efficiency()

    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    await test_batch_manager_stats()

    # –¢–µ—Å—Ç 3: TP/SL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await test_tp_sl_batch_update()

    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH AMEND –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
