"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –†–∞—Å—á–µ—Ç long/short score (0-12 –±–∞–ª–ª–æ–≤)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Phase 1 –º–æ–¥—É–ª—è–º–∏ (MTF, Correlation, Pivot, VP)
- ARM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
- –§–∏–ª—å—Ç—Ä—ã (min_volatility, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
"""

import asyncio
from datetime import datetime
from typing import Dict, List, Optional

from loguru import logger

from src.indicators import IndicatorManager
from src.models import OHLCV, OrderSide, Position, Signal


class SignalGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç scoring —Å–∏—Å—Ç–µ–º—É (0-12 –±–∞–ª–ª–æ–≤) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞.
    """

    def __init__(
        self,
        client,
        config,
        risk_config,
        modules: Dict,
        indicators_manager: IndicatorManager,
    ):
        """
        Args:
            client: OKX –∫–ª–∏–µ–Ω—Ç
            config: Scalping –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            risk_config: Risk –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            modules: –°–ª–æ–≤–∞—Ä—å Phase 1 –º–æ–¥—É–ª–µ–π (mtf, correlation, pivot, vp, arm, balance)
            indicators_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        self.client = client
        self.config = config
        self.risk_config = risk_config
        self.indicators_manager = indicators_manager

        # Phase 1 –º–æ–¥—É–ª–∏
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å–µ –º–æ–¥—É–ª–∏
        self.modules = modules

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        self.mtf_filter = modules.get("mtf")
        self.correlation_filter = modules.get("correlation")
        self.pivot_filter = modules.get("pivot")
        self.volume_profile_filter = modules.get("vp")
        self.balance_checker = modules.get("balance")
        self.adaptive_regime = modules.get("arm")
        self.time_filter = modules.get("time")

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.scoring_enabled = True
        self.strategy_id = "scalping_modular_v2"

        # ARM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.current_regime_type = None
        self.current_indicator_params = None
        self.current_module_params = None
        self.min_score_threshold = 3  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä–æ–≥

        # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–∑ –≤ 30 —Å–µ–∫)
        self._last_detail_log = {}

        logger.info("‚úÖ SignalGenerator initialized")

    async def generate_signal(
        self,
        symbol: str,
        indicators: Dict,
        tick,
        current_positions: Dict[str, Position],
        market_data=None,  # üÜï –î–ª—è ADX —Ñ–∏–ª—å—Ç—Ä–∞
    ) -> Optional[Signal]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ scoring —Å–∏—Å—Ç–µ–º—É.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            tick: –¢–µ–∫—É—â–∏–π —Ç–∏–∫
            current_positions: –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è ADX)

        Returns:
            Signal –∏–ª–∏ None
        """

        # üî• –ö–†–ò–¢–ò–ß–ù–´–ô –§–ò–ö–° #1: –ë–ª–æ–∫–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏!
        if symbol in current_positions:
            logger.debug(f"üö´ {symbol}: Position already open - skipping signal")
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma_fast = indicators.get("SMA_FAST")
        sma_slow = indicators.get("SMA_SLOW")
        ema_fast = indicators.get("EMA_FAST")
        ema_slow = indicators.get("EMA_SLOW")
        rsi = indicators.get("RSI")
        atr = indicators.get("ATR")
        bb = indicators.get("BB")
        volume = indicators.get("VOLUME")
        macd = indicators.get("MACD")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        required_indicators = [
            sma_fast,
            sma_slow,
            ema_fast,
            ema_slow,
            rsi,
            atr,
            bb,
            volume,
            macd,
        ]
        if not all(required_indicators):
            missing = []
            if not sma_fast:
                missing.append("SMA_FAST")
            if not sma_slow:
                missing.append("SMA_SLOW")
            if not ema_fast:
                missing.append("EMA_FAST")
            if not ema_slow:
                missing.append("EMA_SLOW")
            if not rsi:
                missing.append("RSI")
            if not atr:
                missing.append("ATR")
            if not bb:
                missing.append("BB")
            if not volume:
                missing.append("VOLUME")
            if not macd:
                missing.append("MACD")
            logger.debug(f"üö´ {symbol}: Missing indicators: {', '.join(missing)}")
            return None

        current_price = tick.price

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        min_volatility = self.config.entry.min_volatility_atr
        if self.current_indicator_params:
            min_volatility = self.current_indicator_params.min_volatility_atr

        if atr.value < min_volatility:
            if atr.value == 0.0:
                error_info = atr.metadata.get("error", "Unknown reason")
                logger.warning(f"üö´ {symbol}: ATR is ZERO! {error_info}")
            else:
                logger.debug(
                    f"üö´ {symbol}: Low volatility: ATR={atr.value:.6f} (min={min_volatility})"
                )
            return None

        # üìä SCORING –°–ò–°–¢–ï–ú–ê
        long_score = 0
        short_score = 0

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –∏ Volume –∏–∑ ARM
        rsi_oversold = (
            self.current_indicator_params.rsi_oversold
            if self.current_indicator_params
            else self.config.entry.rsi_oversold
        )
        rsi_overbought = (
            self.current_indicator_params.rsi_overbought
            if self.current_indicator_params
            else self.config.entry.rsi_overbought
        )
        volume_threshold = (
            self.current_indicator_params.volume_threshold
            if self.current_indicator_params
            else self.config.entry.volume_threshold
        )

        # === LONG SCORING ===

        # SMA Trend (+1 –±–∞–ª–ª)
        long_score += 1 if (current_price > sma_fast.value > sma_slow.value) else 0

        # EMA Trend (+2 –±–∞–ª–ª–∞)
        long_score += 2 if ema_fast.value > ema_slow.value else 0

        # RSI - –∑–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (+1 –¥–æ +4 –±–∞–ª–ª–æ–≤)
        if rsi.value <= (rsi_oversold - 5):  # Extreme
            long_score += 4
        elif rsi.value <= rsi_oversold:  # Strong
            long_score += 3
        elif rsi.value <= (rsi_oversold + 10):  # Weak
            long_score += 2
        elif rsi.value <= (rsi_oversold + 20):  # Neutral-bullish
            long_score += 1

        # Bollinger Bands (+2 –±–∞–ª–ª–∞)
        long_score += 2 if current_price <= bb.metadata["lower_band"] * 1.002 else 0

        # Volume (+2 –±–∞–ª–ª–∞)
        long_score += 2 if volume.value >= volume_threshold else 0

        # MACD (+2 –±–∞–ª–ª–∞)
        macd_line = macd.metadata.get("macd_line", 0)
        macd_signal = macd.metadata.get("signal_line", 0)
        long_score += 2 if (macd_line > macd_signal and macd_line > 0) else 0

        # === SHORT SCORING ===

        # SMA Trend (+1 –±–∞–ª–ª)
        short_score += 1 if (current_price < sma_fast.value < sma_slow.value) else 0

        # EMA Trend (+2 –±–∞–ª–ª–∞)
        short_score += 2 if ema_fast.value < ema_slow.value else 0

        # RSI - –∑–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (+1 –¥–æ +4 –±–∞–ª–ª–æ–≤)
        if rsi.value >= (rsi_overbought + 5):  # Extreme
            short_score += 4
        elif rsi.value >= rsi_overbought:  # Strong
            short_score += 3
        elif rsi.value >= (rsi_overbought - 10):  # Weak
            short_score += 2
        elif rsi.value >= (rsi_overbought - 20):  # Neutral-bearish
            short_score += 1

        # Bollinger Bands (+2 –±–∞–ª–ª–∞)
        short_score += 2 if current_price >= bb.metadata["upper_band"] * 0.998 else 0

        # Volume (+2 –±–∞–ª–ª–∞)
        short_score += 2 if volume.value >= volume_threshold else 0

        # MACD (+2 –±–∞–ª–ª–∞)
        short_score += 2 if (macd_line < macd_signal and macd_line < 0) else 0

        # –†–∞—Å—á–µ—Ç confidence
        long_confidence = long_score / 12.0
        short_confidence = short_score / 12.0

        # üîç –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π scoring (–¥–ª—è 2-—á–∞—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞)
        logger.debug(
            f"üìä {symbol} SCORING DETAILS:\n"
            f"  LONG: {long_score}/12\n"
            f"    SMA: +{1 if (current_price > sma_fast.value > sma_slow.value) else 0} "
            f"(Price: ${current_price:.2f} > Fast: ${sma_fast.value:.2f} > Slow: ${sma_slow.value:.2f})\n"
            f"    EMA: +{2 if ema_fast.value > ema_slow.value else 0} "
            f"(Fast: ${ema_fast.value:.2f} > Slow: ${ema_slow.value:.2f})\n"
            f"    RSI: +{self._calc_rsi_score_long(rsi.value, rsi_oversold)} "
            f"(Value: {rsi.value:.1f}, Oversold: {rsi_oversold})\n"
            f"    BB: +{2 if current_price <= bb.metadata['lower_band'] * 1.002 else 0} "
            f"(Price: ${current_price:.2f} vs Lower: ${bb.metadata['lower_band']:.2f})\n"
            f"    Vol: +{2 if volume.value >= volume_threshold else 0} "
            f"(Ratio: {volume.value:.2f}, Threshold: {volume_threshold})\n"
            f"    MACD: +{2 if (macd.metadata.get('macd_line', 0) > macd.metadata.get('signal_line', 0) and macd.metadata.get('macd_line', 0) > 0) else 0}\n"
            f"  SHORT: {short_score}/12\n"
            f"    SMA: +{1 if (current_price < sma_fast.value < sma_slow.value) else 0}\n"
            f"    EMA: +{2 if ema_fast.value < ema_slow.value else 0}\n"
            f"    RSI: +{self._calc_rsi_score_short(rsi.value, rsi_overbought)}\n"
            f"    BB: +{2 if current_price >= bb.metadata['upper_band'] * 0.998 else 0}\n"
            f"    Vol: +{2 if volume.value >= volume_threshold else 0}\n"
            f"    MACD: +{2 if (macd.metadata.get('macd_line', 0) < macd.metadata.get('signal_line', 0) and macd.metadata.get('macd_line', 0) < 0) else 0}"
        )

        # ARM - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ score
        current_score_threshold = await self._get_score_threshold(symbol, current_price)

        # PHASE 1: Time-Based Filter
        if self.time_filter:
            if not self.time_filter.is_trading_allowed():
                next_time = self.time_filter.get_next_trading_time()
                logger.info(
                    f"‚è∞ TIME FILTER BLOCKED: {symbol} | "
                    f"Reason: Outside trading hours | {next_time}"
                )
                return None

        # PHASE 1: Correlation Filter
        signal_direction = None
        if long_score >= current_score_threshold and long_score > short_score:
            signal_direction = "LONG"
        elif short_score >= current_score_threshold and short_score > long_score:
            signal_direction = "SHORT"

        if signal_direction and self.correlation_filter:
            corr_result = await self.correlation_filter.check_entry(
                symbol, signal_direction, current_positions
            )
            if corr_result.blocked:
                logger.warning(
                    f"üö´ CORRELATION BLOCKED: {symbol} {signal_direction} | "
                    f"Reason: {corr_result.reason} | "
                    f"Correlated: {corr_result.correlated_positions}"
                )
                return None

        # PHASE 1: Volume Profile (–æ–±—â–∏–π –±–æ–Ω—É—Å)
        if self.volume_profile_filter:
            vp_result = await self.volume_profile_filter.check_entry(
                symbol, current_price
            )
            if vp_result.bonus > 0:
                vp_multiplier = self._get_vp_multiplier()
                adjusted_bonus = int(round(vp_result.bonus * vp_multiplier))

                if signal_direction == "LONG":
                    long_score += adjusted_bonus
                    long_confidence = long_score / 12.0
                    logger.info(
                        f"‚úÖ VOLUME PROFILE BONUS: {symbol} LONG | "
                        f"Reason: {vp_result.reason} | Bonus: +{adjusted_bonus} | "
                        f"New score: {long_score}/12"
                    )
                elif signal_direction == "SHORT":
                    short_score += adjusted_bonus
                    short_confidence = short_score / 12.0
                    logger.info(
                        f"‚úÖ VOLUME PROFILE BONUS: {symbol} SHORT | "
                        f"Reason: {vp_result.reason} | Bonus: +{adjusted_bonus} | "
                        f"New score: {short_score}/12"
                    )

        # PHASE 1: Pivot Points
        if self.pivot_filter and signal_direction:
            pivot_result = await self.pivot_filter.check_entry(
                symbol, current_price, signal_direction
            )
            if pivot_result.near_level and pivot_result.bonus > 0:
                pivot_multiplier = self._get_pivot_multiplier()
                adjusted_bonus = int(round(pivot_result.bonus * pivot_multiplier))

                if signal_direction == "LONG":
                    long_score += adjusted_bonus
                    long_confidence = long_score / 12.0
                    logger.info(
                        f"‚úÖ PIVOT BONUS: {symbol} LONG near {pivot_result.level_name} | "
                        f"Bonus: +{adjusted_bonus} | New score: {long_score}/12"
                    )
                elif signal_direction == "SHORT":
                    short_score += adjusted_bonus
                    short_confidence = short_score / 12.0
                    logger.info(
                        f"‚úÖ PIVOT BONUS: {symbol} SHORT near {pivot_result.level_name} | "
                        f"Bonus: +{adjusted_bonus} | New score: {short_score}/12"
                    )

        # PHASE 1: Multi-Timeframe Confirmation
        if self.mtf_filter and signal_direction:
            mtf_result = await self.mtf_filter.check_confirmation(
                symbol, signal_direction
            )

            if mtf_result.blocked:
                logger.warning(
                    f"üö´ MTF BLOCKED: {symbol} {signal_direction} | "
                    f"Reason: {mtf_result.reason}"
                )
                return None

            if mtf_result.confirmed:
                if signal_direction == "LONG":
                    long_score += mtf_result.bonus
                    long_confidence = long_score / 12.0
                    logger.info(
                        f"‚úÖ MTF CONFIRMED: {symbol} LONG | "
                        f"Bonus: +{mtf_result.bonus} | New score: {long_score}/12"
                    )
                elif signal_direction == "SHORT":
                    short_score += mtf_result.bonus
                    short_confidence = short_score / 12.0
                    logger.info(
                        f"‚úÖ MTF CONFIRMED: {symbol} SHORT | "
                        f"Bonus: +{mtf_result.bonus} | New score: {short_score}/12"
                    )

        # üÜï PHASE 2: ADX Filter (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
        if self.modules.get("adx") and signal_direction and market_data:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è ADX (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º)
            candles = market_data.ohlcv_data[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º side –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            side = OrderSide.BUY if signal_direction == "LONG" else OrderSide.SELL

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX
            adx_result = self.modules["adx"].check_trend_strength(symbol, side, candles)

            if not adx_result.allowed:
                logger.warning(
                    f"üö´ ADX BLOCKED: {symbol} {signal_direction} | "
                    f"Reason: {adx_result.reason}"
                )
                return None

            logger.info(
                f"‚úÖ ADX CONFIRMED: {symbol} {signal_direction} | "
                f"{adx_result.reason}"
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥
        logger.info(
            f"üìä {symbol} FINAL SCORING: LONG {long_score}/12 ({long_confidence:.1%}) | "
            f"SHORT {short_score}/12 ({short_confidence:.1%}) | "
            f"Threshold: {current_score_threshold}/12"
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        if long_score >= current_score_threshold and long_score > short_score:
            logger.info(
                f"üéØ SIGNAL GENERATED: {symbol} LONG | "
                f"Score: {long_score}/12 | Confidence: {long_confidence:.1%} | "
                f"Price: ${current_price:,.2f}"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º indicators –≤ dict (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è)
            indicators_dict = {k: v.value for k, v in indicators.items()}

            logger.debug(f"üìä LONG Signal indicators: {list(indicators_dict.keys())}")

            return Signal(
                symbol=symbol,
                side=OrderSide.BUY,
                strength=long_confidence,
                price=current_price,
                timestamp=datetime.utcnow(),
                strategy_id=self.strategy_id,
                indicators=indicators_dict,
                confidence=long_confidence,
            )

        elif short_score >= current_score_threshold and short_score > long_score:
            logger.info(
                f"üéØ SIGNAL GENERATED: {symbol} SHORT | "
                f"Score: {short_score}/12 | Confidence: {short_confidence:.1%} | "
                f"Price: ${current_price:,.2f}"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º indicators –≤ dict (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è)
            indicators_dict = {k: v.value for k, v in indicators.items()}

            logger.debug(f"üìä SHORT Signal indicators: {list(indicators_dict.keys())}")

            return Signal(
                symbol=symbol,
                side=OrderSide.SELL,
                strength=short_confidence,
                price=current_price,
                timestamp=datetime.utcnow(),
                strategy_id=self.strategy_id,
                indicators=indicators_dict,
                confidence=short_confidence,
            )

        # –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ - –ª–æ–≥–∏—Ä—É–µ–º –ø–æ—á–µ–º—É
        if (
            long_score < current_score_threshold
            and short_score < current_score_threshold
        ):
            logger.debug(
                f"‚ö™ {symbol} No signal: Both scores too low "
                f"(L:{long_score}/12, S:{short_score}/12, need {current_score_threshold})"
            )
        elif long_score == short_score:
            logger.debug(
                f"‚ö™ {symbol} No signal: Equal scores "
                f"(L:{long_score}/12, S:{short_score}/12)"
            )

        return None

    async def _get_score_threshold(self, symbol: str, current_price: float) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ score —Å —É—á–µ—Ç–æ–º ARM.

        Returns:
            int: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        current_score_threshold = self.min_score_threshold

        if self.adaptive_regime:
            # ARM –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            regime_params = self.adaptive_regime.get_current_parameters()
            current_score_threshold = regime_params.min_score_threshold

            logger.debug(
                f"üß† Market Regime: {self.adaptive_regime.current_regime.value.upper()} | "
                f"Threshold: {current_score_threshold}/12"
            )

        return current_score_threshold

    def _get_vp_multiplier(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å Volume Profile bonus multiplier –∏–∑ ARM"""
        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            return regime_params.volume_profile_bonus_multiplier
        return 1.0

    def _get_pivot_multiplier(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å Pivot Points bonus multiplier –∏–∑ ARM"""
        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            return regime_params.pivot_bonus_multiplier
        return 1.0

    async def _log_scoring_details(
        self,
        symbol: str,
        long_score: int,
        short_score: int,
        current_price: float,
        sma_fast,
        sma_slow,
        ema_fast,
        ema_slow,
        rsi,
        bb,
        volume,
        macd,
        rsi_oversold: float,
        rsi_overbought: float,
        volume_threshold: float,
    ):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ scoring (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)"""
        current_time = datetime.utcnow()

        last_log = self._last_detail_log.get(symbol, current_time)
        if (current_time - last_log).total_seconds() < 30:
            return

        macd_line = macd.metadata.get("macd_line", 0)
        macd_signal_line = macd.metadata.get("signal_line", 0)

        logger.info(
            f"üìä {symbol} SCORING DETAILS:\n"
            f"  LONG: {long_score}/12\n"
            f"    SMA: +{1 if (current_price > sma_fast.value > sma_slow.value) else 0}\n"
            f"    EMA: +{2 if ema_fast.value > ema_slow.value else 0}\n"
            f"    RSI: +{self._calc_rsi_score_long(rsi.value, rsi_oversold)}\n"
            f"    BB: +{2 if current_price <= bb.metadata.get('lower_band', 0) * 1.002 else 0}\n"
            f"    Vol: +{2 if volume.value >= volume_threshold else 0}\n"
            f"    MACD: +{2 if (macd_line > macd_signal_line and macd_line > 0) else 0}\n"
            f"  SHORT: {short_score}/12\n"
            f"    SMA: +{1 if (current_price < sma_fast.value < sma_slow.value) else 0}\n"
            f"    EMA: +{2 if ema_fast.value < ema_slow.value else 0}\n"
            f"    RSI: +{self._calc_rsi_score_short(rsi.value, rsi_overbought)}\n"
            f"    BB: +{2 if current_price >= bb.metadata.get('upper_band', 0) * 0.998 else 0}\n"
            f"    Vol: +{2 if volume.value >= volume_threshold else 0}\n"
            f"    MACD: +{2 if (macd_line < macd_signal_line and macd_line < 0) else 0}"
        )

        self._last_detail_log[symbol] = current_time

    def _calc_rsi_score_long(self, rsi_value: float, oversold: float) -> int:
        """–†–∞—Å—á–µ—Ç RSI score –¥–ª—è LONG"""
        if rsi_value <= (oversold - 5):
            return 4
        elif rsi_value <= oversold:
            return 3
        elif rsi_value <= (oversold + 10):
            return 2
        elif rsi_value <= (oversold + 20):
            return 1
        return 0

    def _calc_rsi_score_short(self, rsi_value: float, overbought: float) -> int:
        """–†–∞—Å—á–µ—Ç RSI score –¥–ª—è SHORT"""
        if rsi_value >= (overbought + 5):
            return 4
        elif rsi_value >= overbought:
            return 3
        elif rsi_value >= (overbought - 10):
            return 2
        elif rsi_value >= (overbought - 20):
            return 1
        return 0

    async def update_regime_parameters(
        self, candles: List[OHLCV], current_price: float
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ ARM.

        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Orchestrator –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–∞.
        """
        if not self.adaptive_regime:
            return

        new_regime = self.adaptive_regime.update_regime(candles, current_price)

        if new_regime and new_regime != self.current_regime_type:
            logger.info(f"üîÑ Regime changed: {self.current_regime_type} ‚Üí {new_regime}")
            self.current_regime_type = new_regime

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            regime_params = self.adaptive_regime.get_current_parameters()
            self.current_indicator_params = regime_params.indicators
            self.current_module_params = regime_params.modules
            self.min_score_threshold = regime_params.min_score_threshold

            # üî• –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ú–û–î–£–õ–ï–ô!
            self._update_module_parameters(regime_params.modules)

            logger.info(
                f"‚úÖ Parameters updated for {new_regime.value.upper()} regime:\n"
                f"  Score threshold: {regime_params.min_score_threshold}/12\n"
                f"  TP multiplier: {regime_params.tp_atr_multiplier}x\n"
                f"  SL multiplier: {regime_params.sl_atr_multiplier}x\n"
                f"  Max holding: {regime_params.max_holding_minutes} min\n"
                f"  Position size: {regime_params.position_size_multiplier}x"
            )
        elif not self.current_regime_type:
            # üîç –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –î–ï–¢–ê–õ–¨–ù–û
            self.current_regime_type = self.adaptive_regime.current_regime
            regime_params = self.adaptive_regime.get_current_parameters()

            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(
                f"üéØ ARM –ù–ê–ß–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: {self.current_regime_type.value.upper()}"
            )
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"  Score threshold: {regime_params.min_score_threshold}/12")
            logger.info(
                f"  TP/SL: {regime_params.tp_atr_multiplier}/{regime_params.sl_atr_multiplier} ATR"
            )
            logger.info(f"  Max holding: {regime_params.max_holding_minutes} min")
            logger.info(f"  Position size: {regime_params.position_size_multiplier}x")
            logger.info("")
            logger.info(f"  üìä –ò–ù–î–ò–ö–ê–¢–û–†–´:")
            logger.info(
                f"     Volume threshold: {regime_params.indicators.volume_threshold}"
            )
            logger.info(
                f"     RSI boundaries: {regime_params.indicators.rsi_oversold}-{regime_params.indicators.rsi_overbought}"
            )
            logger.info("")
            logger.info(f"  ‚ú® PROFIT HARVESTING:")
            logger.info(f"     Enabled: {'YES' if regime_params.ph_enabled else 'NO'}")
            logger.info(f"     Threshold: ${regime_params.ph_threshold:.2f}")
            logger.info(
                f"     Time Limit: {regime_params.ph_time_limit}s ({regime_params.ph_time_limit/60:.1f} min)"
            )
            logger.info("")
            logger.info(f"  üîß –ú–û–î–£–õ–ò:")
            logger.info(
                f"     MTF block_opposite: {regime_params.modules.mtf_block_opposite}"
            )
            logger.info(
                f"     MTF score_bonus: {regime_params.modules.mtf_score_bonus}"
            )
            logger.info(
                f"     Correlation threshold: {regime_params.modules.correlation_threshold}"
            )
            logger.info(
                f"     Correlation max_positions: {regime_params.modules.max_correlated_positions}"
            )
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    def _update_module_parameters(self, module_params):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π Phase 1 –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ ARM.

        Args:
            module_params: ModuleParameters –∏–∑ ARM
        """
        from src.strategies.modules.correlation_filter import \
            CorrelationFilterConfig
        from src.strategies.modules.multi_timeframe import MTFConfig

        logger.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª–µ–π...")

        # 1. Multi-Timeframe
        if self.mtf_filter:
            mtf_config = MTFConfig(
                enabled=True,
                confirmation_timeframe=module_params.mtf_confirmation_timeframe,
                score_bonus=module_params.mtf_score_bonus,
                block_opposite=module_params.mtf_block_opposite,
                ema_fast_period=8,
                ema_slow_period=21,
            )
            self.mtf_filter.update_parameters(mtf_config)

        # 2. Correlation Filter
        if self.correlation_filter:
            corr_config = CorrelationFilterConfig(
                enabled=True,
                correlation_threshold=module_params.correlation_threshold,
                max_correlated_positions=module_params.max_correlated_positions,
                block_same_direction_only=module_params.block_same_direction_only,
            )
            self.correlation_filter.update_parameters(corr_config)

        # 3. üÜï ADX Filter
        if self.modules.get("adx"):
            from src.strategies.modules.adx_filter import ADXFilterConfig

            adx_config = ADXFilterConfig(
                enabled=True,
                adx_threshold=module_params.adx_threshold,
                di_difference=module_params.adx_di_difference,
                adx_period=14,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                timeframe="15m",  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            )
            self.modules["adx"].update_parameters(adx_config)

        logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
