"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL
- –ü—Ä–æ–≤–µ—Ä–∫–∞ OCO —Å—Ç–∞—Ç—É—Å–∞
- Profit Harvesting (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥)
- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TIME_LIMIT
- Partial TP
- PHANTOM detection
"""

import asyncio
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from loguru import logger

from src.models import OrderSide, OrderType, Position, PositionSide


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""

    symbol: str
    side: str
    entry_price: float
    exit_price: float
    size: float
    gross_pnl: float
    commission: float
    net_pnl: float
    duration_sec: float
    reason: str
    timestamp: datetime


class PositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π.
    """

    def __init__(self, client, config, adaptive_regime=None):
        """
        Args:
            client: OKX –∫–ª–∏–µ–Ω—Ç
            config: Scalping –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            adaptive_regime: ARM –º–æ–¥—É–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.client = client
        self.config = config
        self.adaptive_regime = adaptive_regime

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_close_value_usd = 15.0

        # ‚ú® PROFIT HARVESTING: –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ ARM! (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥ —Ä–µ–∂–∏–º)
        # Default –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ ARM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        self.profit_harvesting_enabled = False
        self.quick_profit_threshold = 0.20
        self.quick_profit_time_limit = 120

        # –ï—Å–ª–∏ ARM –µ—Å—Ç—å - –±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            self.profit_harvesting_enabled = regime_params.ph_enabled
            self.quick_profit_threshold = regime_params.ph_threshold
            self.quick_profit_time_limit = regime_params.ph_time_limit

            logger.info(
                f"‚úÖ PositionManager initialized | "
                f"Profit Harvesting: ADAPTIVE (from ARM)"
            )
            logger.debug(
                f"   üîç PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM —Ä–µ–∂–∏–º–∞ '{self.adaptive_regime.current_regime.value}':\n"
                f"      Enabled: {self.profit_harvesting_enabled}\n"
                f"      Threshold: ${self.quick_profit_threshold:.2f}\n"
                f"      Time Limit: {self.quick_profit_time_limit}s"
            )
        else:
            logger.info(
                f"‚úÖ PositionManager initialized | "
                f"Profit Harvesting: {'ON' if self.profit_harvesting_enabled else 'OFF'} "
                f"(${self.quick_profit_threshold} in {self.quick_profit_time_limit}s)"
            )

        # Partial TP
        self.partial_tp_enabled = getattr(config, "partial_tp_enabled", False)

    async def monitor_positions(
        self, positions: Dict[str, Position], current_prices: Dict[str, float]
    ) -> List[Tuple[str, str]]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        1. OCO —Å—Ç–∞—Ç—É—Å (TP/SL —Å—Ä–∞–±–æ—Ç–∞–ª?)
        2. Profit Harvesting (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥)
        3. TIME_LIMIT (–º–∞–∫—Å –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è)
        4. Partial TP (—á–∞—Å—Ç–∏—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã)

        Args:
            positions: –°–ª–æ–≤–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_prices: –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º

        Returns:
            List[(symbol, reason)] - —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        to_close = []

        for symbol, position in list(positions.items()):
            current_price = current_prices.get(symbol)
            if not current_price:
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏
            position.update_price(current_price)

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ OCO —Å—Ç–∞—Ç—É—Å–∞
            # ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: Invalid Sign –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
            # if position.algo_order_id:
            #     oco_status = await self._check_oco_status(position)
            #     if oco_status:
            #         to_close.append((symbol, oco_status))
            #         continue

            # 2. ‚ú® PROFIT HARVESTING (–¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –º–∏–∫—Ä–æ-–ø—Ä–æ—Ñ–∏—Ç–æ–º)
            # –û–±–Ω–æ–≤–ª—è–µ–º PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM (–µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è —Ä–µ–∂–∏–º)
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                self.profit_harvesting_enabled = regime_params.ph_enabled
                self.quick_profit_threshold = regime_params.ph_threshold
                self.quick_profit_time_limit = regime_params.ph_time_limit

            if self.profit_harvesting_enabled:
                should_harvest = await self._check_profit_harvesting(
                    position, current_price
                )
                if should_harvest:
                    to_close.append((symbol, "profit_harvesting"))
                    continue

            # 3. TIME_LIMIT
            max_holding = self.config.exit.max_holding_minutes
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                max_holding = regime_params.max_holding_minutes

            time_in_position = (
                datetime.utcnow() - position.timestamp
            ).total_seconds() / 60

            if time_in_position >= max_holding:
                to_close.append((symbol, "time_limit"))
                continue

            # 4. Partial TP (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.partial_tp_enabled:
                await self._check_partial_tp(symbol, position, current_price)

        return to_close

    async def _check_oco_status(self, position: Position) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OCO –æ—Ä–¥–µ—Ä–∞.

        Returns:
            str: Reason –µ—Å–ª–∏ OCO —Å—Ä–∞–±–æ—Ç–∞–ª, None –∏–Ω–∞—á–µ
        """
        try:
            oco_status = await self.client.get_algo_order_status(position.algo_order_id)

            if oco_status.get("state") == "filled":
                actual_px = float(oco_status.get("actualPx", 0))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                if abs(actual_px - position.take_profit) < abs(
                    actual_px - position.stop_loss
                ):
                    reason = "oco_take_profit"
                else:
                    reason = "oco_stop_loss"

                logger.info(
                    f"‚úÖ OCO triggered for {position.symbol}: "
                    f"{reason} @ ${actual_px:.4f}"
                )
                return reason

        except Exception as e:
            logger.debug(f"Failed to check OCO status: {e}")

        return None

    async def _check_profit_harvesting(
        self, position: Position, current_price: float
    ) -> bool:
        """
        ‚ú® PROFIT HARVESTING (–∏–∑ Perplexity AI + ARM –∞–¥–∞–ø—Ç–∞—Ü–∏—è)

        –î–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ —Å—Ä–∞–∑—É –≤ –ø–ª—é—Å!

        –ù–û–í–û–ï (18.10.2025): –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ARM:
        - TRENDING: $0.16 –∑–∞ 60 —Å–µ–∫ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ!)
        - RANGING: $0.20 –∑–∞ 120 —Å–µ–∫ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        - CHOPPY: $0.25 –∑–∞ 180 —Å–µ–∫ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!)

        Args:
            position: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
        """
        time_since_open = (datetime.utcnow() - position.timestamp).total_seconds()

        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL –≤ USD
        if position.side == PositionSide.LONG:
            # LONG: (exit - entry) * quantity
            pnl_usd = (current_price - position.entry_price) * position.size
            price_change_pct = (
                (current_price - position.entry_price) / position.entry_price
            ) * 100
        else:
            # SHORT: (entry - exit) * quantity
            pnl_usd = (position.entry_price - current_price) * position.size
            price_change_pct = (
                (position.entry_price - current_price) / position.entry_price
            ) * 100

        # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ö–ê–ñ–î–£–Æ –ø—Ä–æ–≤–µ—Ä–∫—É
        logger.debug(
            f"üîç PH Check: {position.symbol} {position.side.value.upper()} | "
            f"Time: {time_since_open:.1f}s/{self.quick_profit_time_limit}s | "
            f"PnL: ${pnl_usd:.4f}/${self.quick_profit_threshold:.2f} | "
            f"Price Œî: {price_change_pct:+.3f}%"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π Profit Harvesting
        if (
            pnl_usd >= self.quick_profit_threshold
            and time_since_open < self.quick_profit_time_limit
        ):
            logger.info(
                f"üí∞ PROFIT HARVESTING TRIGGERED! {position.symbol} {position.side.value.upper()}\n"
                f"   Quick profit: ${pnl_usd:.4f} (threshold: ${self.quick_profit_threshold:.2f})\n"
                f"   Time: {time_since_open:.1f}s (limit: {self.quick_profit_time_limit}s)\n"
                f"   Price change: {price_change_pct:+.3f}%\n"
                f"   Entry: ${position.entry_price:.4f} ‚Üí Exit: ${current_price:.4f}"
            )
            return True

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–µ—Å–ª–∏ –±–ª–∏–∑–∫–æ)
        if time_since_open < self.quick_profit_time_limit:
            if pnl_usd > 0 and pnl_usd >= self.quick_profit_threshold * 0.5:
                logger.debug(
                    f"   ‚è≥ PH –±–ª–∏–∑–∫–æ: ${pnl_usd:.4f} / ${self.quick_profit_threshold:.2f} "
                    f"({pnl_usd/self.quick_profit_threshold*100:.0f}%)"
                )

        return False

    async def _check_partial_tp(
        self, symbol: str, position: Position, current_price: float
    ):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ Take Profit.

        (–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Partial TP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        pass

    async def close_position(
        self, symbol: str, position: Position, current_price: float, reason: str
    ) -> Optional[TradeResult]:
        """
        –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é.

        –®–∞–≥–∏:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PHANTOM (–±–∞–ª–∞–Ω—Å < expected)
        2. –ü—Ä–æ–≤–µ—Ä–∫–∞ min_close_value ($15)
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è SHORT
        4. –†–∞–∑–º–µ—â–µ–Ω–∏–µ MARKET –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        5. –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π + NET PnL
        6. –°–æ–∑–¥–∞–Ω–∏–µ TradeResult

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            position: –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è

        Returns:
            TradeResult –∏–ª–∏ None
        """
        try:
            # 1. PHANTOM detection
            if position.side == PositionSide.LONG:
                base_currency = symbol.split("-")[0]
                actual_balance = await self.client.get_balance(base_currency)

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                if (
                    actual_balance < position.size * 0.95
                ):  # 95% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å (–±—ã–ª–æ 99%)
                    time_since_open = (
                        datetime.utcnow() - position.timestamp
                    ).total_seconds()

                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ä–∞—è (>10 –º–∏–Ω) - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ PHANTOM
                    if time_since_open > 600:  # 10 –º–∏–Ω—É—Ç (–±—ã–ª–æ 5 –º–∏–Ω)
                        logger.error(
                            f"‚ùå PHANTOM position detected: {symbol}\n"
                            f"   Expected: {position.size:.8f}, Actual: {actual_balance:.8f}\n"
                            f"   Age: {time_since_open/60:.1f} min\n"
                            f"   Removing from tracking (likely closed on exchange)"
                        )
                        return None  # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º - —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!
                    else:
                        # –ú–æ–ª–æ–¥–∞—è –ø–æ–∑–∏—Ü–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–∏—Å—Å–∏—è –∏–ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                        logger.warning(
                            f"‚ö†Ô∏è Suspicious position size: {symbol}\n"
                            f"   Expected: {position.size:.8f}, Actual: {actual_balance:.8f}\n"
                            f"   Difference: {(1 - actual_balance/position.size)*100:.2f}%\n"
                            f"   Age: {time_since_open:.1f}s\n"
                            f"   Proceeding with close..."
                        )

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–∞
            position_value = position.size * current_price

            if position_value < self.min_close_value_usd:
                logger.debug(
                    f"‚ö™ Position too small to close: ${position_value:.2f} < "
                    f"${self.min_close_value_usd}"
                )
                return None

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è SHORT
            if position.side == PositionSide.SHORT:
                required_usdt = position.size * current_price * 1.01
                base_balance = await self.client.get_account_balance()
                usdt_available = next(
                    (b.free for b in base_balance if b.currency == "USDT"), 0.0
                )

                if usdt_available < required_usdt:
                    logger.warning(
                        f"‚ö†Ô∏è Cannot close SHORT {symbol}: "
                        f"Need ${required_usdt:.2f} USDT, have ${usdt_available:.2f}"
                    )
                    return None

            # 4. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            order_side = (
                OrderSide.SELL if position.side == PositionSide.LONG else OrderSide.BUY
            )

            logger.info(
                f"üî¥ CLOSING ORDER: {order_side.value.upper()} {position.size:.8f} "
                f"{symbol} @ ${current_price:.4f} | Reason: {reason}"
            )

            close_order = await self.client.place_order(
                symbol=symbol,
                side=order_side,
                order_type=OrderType.MARKET,
                quantity=position.size,
            )

            if not close_order:
                logger.error(f"‚ùå Failed to close position {symbol}")
                return None

            # 5. –†–∞—Å—á–µ—Ç PnL —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
            duration_sec = (datetime.utcnow() - position.timestamp).total_seconds()

            # Gross PnL
            gross_pnl = position.unrealized_pnl

            # –ö–æ–º–∏—Å—Å–∏–∏ (0.1% –Ω–∞ –≤—Ö–æ–¥ + 0.1% –Ω–∞ –≤—ã—Ö–æ–¥)
            commission_rate = 0.001
            open_value = position.size * position.entry_price
            close_value = position.size * current_price
            open_commission = open_value * commission_rate
            close_commission = close_value * commission_rate
            total_commission = open_commission + close_commission

            # NET PnL
            net_pnl = gross_pnl - total_commission

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"üí∞ TRADE CLOSED: {symbol} {position.side.value.upper()}")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"   Entry: ${position.entry_price:.4f}")
            logger.info(f"   Exit: ${current_price:.4f}")
            logger.info(f"   Size: {position.size:.8f}")
            logger.info(f"   Duration: {duration_sec:.0f}s ({duration_sec/60:.1f} min)")
            logger.info(f"   Gross PnL: ${gross_pnl:.4f}")
            logger.info(f"   Commission: -${total_commission:.4f}")
            logger.info(f"   NET PnL: ${net_pnl:.4f}")
            logger.info(f"   Reason: {reason}")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

            # –°–æ–∑–¥–∞–Ω–∏–µ TradeResult
            trade_result = TradeResult(
                symbol=symbol,
                side=position.side.value,
                entry_price=position.entry_price,
                exit_price=current_price,
                size=position.size,
                gross_pnl=gross_pnl,
                commission=total_commission,
                net_pnl=net_pnl,
                duration_sec=duration_sec,
                reason=reason,
                timestamp=datetime.utcnow(),
            )

            return trade_result

        except Exception as e:
            logger.error(f"‚ùå Error closing position {symbol}: {e}", exc_info=True)
            return None

    async def update_position_prices(
        self, positions: Dict[str, Position], current_prices: Dict[str, float]
    ):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.

        Args:
            positions: –°–ª–æ–≤–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_prices: –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        """
        for symbol, position in positions.items():
            current_price = current_prices.get(symbol)
            if current_price:
                position.update_price(current_price)
