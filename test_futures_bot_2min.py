#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ Futures –±–æ—Ç–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from loguru import logger

from src.config import BotConfig
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Futures Orchestrator
from src.strategies.scalping.futures.orchestrator import \
    FuturesScalpingOrchestrator

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
should_stop = False


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C"""
    global should_stop
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    should_stop = True


async def run_futures_bot_for_2_minutes():
    """–ó–∞–ø—É—Å–∫ Futures –±–æ—Ç–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã"""
    global should_stop

    orchestrator = None

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Futures –±–æ—Ç–∞ (—Ç–µ—Å—Ç –Ω–∞ 2 –º–∏–Ω—É—Ç—ã)...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = BotConfig.load_from_file("config/config_futures.yaml")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = FuturesScalpingOrchestrator(config)
        logger.info("‚úÖ Orchestrator —Å–æ–∑–¥–∞–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª...")
        bot_task = asyncio.create_task(orchestrator.start())

        # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        wait_time = 120  # 2 –º–∏–Ω—É—Ç—ã
        step = 1  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        for _ in range(wait_time):
            if should_stop:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)...")
                break
            await asyncio.sleep(step)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if orchestrator:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            await orchestrator.stop()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        await asyncio.wait_for(bot_task, timeout=5.0)

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt...")
        if orchestrator:
            await orchestrator.stop()
    except asyncio.TimeoutError:
        logger.info("‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        if orchestrator:
            try:
                await orchestrator.stop()
            except:
                pass
    finally:
        logger.info("‚úÖ Futures –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
    import io

    if sys.platform == "win32":
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout, level="INFO", format="{time:HH:mm:ss} | {level: <8} | {message}"
    )
    logger.add(
        "logs/futures_test.log",
        level="DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        rotation="10 MB",
        retention="1 day",
    )

    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(run_futures_bot_for_2_minutes())
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)
