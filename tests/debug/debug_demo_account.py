import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def debug_demo_account():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ï–ú–û –ê–ö–ö–ê–£–ù–¢–ê")
    print("=" * 50)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
            print("\n1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê:")
            print("-" * 30)
            account_config = await client.get_account_config()
            print(f"   Account Level: {account_config.get('acctLv', 'N/A')}")
            print(f"   Position Mode: {account_config.get('posMode', 'N/A')}")
            print(f"   Auto Loan: {account_config.get('autoLoan', 'N/A')}")
            print(f"   Level: {account_config.get('level', 'N/A')}")
            print(f"   Level Temporary: {account_config.get('levelTmp', 'N/A')}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
            print("\n2Ô∏è‚É£ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ API:")
            print("-" * 30)
            try:
                result = await client._make_request("GET", "/account/config")
                print(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

            # 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("-" * 30)

            if account_config.get("acctLv") == "1":
                print("‚úÖ Account Level: 1 (Simple mode - SPOT only)")
            else:
                print(f"‚ùå Account Level: {account_config.get('acctLv')} (Margin mode)")

            if account_config.get("posMode") == "net_mode":
                print("‚úÖ Position Mode: net_mode (SPOT)")
            elif account_config.get("posMode") == "long_short_mode":
                print("‚ùå Position Mode: long_short_mode (MARGIN)")
                print("   –ü–†–û–ë–õ–ï–ú–ê: –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å MARGIN —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            else:
                print(f"‚ö†Ô∏è Position Mode: {account_config.get('posMode')} (Unknown)")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–π–º—ã
            print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í:")
            print("-" * 30)
            btc_borrowed = await client.get_borrowed_balance("BTC")
            usdt_borrowed = await client.get_borrowed_balance("USDT")
            print(f"   BTC –∑–∞–π–º: {btc_borrowed}")
            print(f"   USDT –∑–∞–π–º: {usdt_borrowed}")

            if float(btc_borrowed) > 0 or float(usdt_borrowed) > 0:
                print("‚ùå –ï—Å—Ç—å –∑–∞–π–º—ã - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é")
            else:
                print("‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

            # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)

            if account_config.get("posMode") == "long_short_mode":
                print("üîß –ü–†–û–ë–õ–ï–ú–ê: –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç –≤ MARGIN —Ä–µ–∂–∏–º–µ")
                print("   –†–ï–®–ï–ù–ò–ï 1: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–π–º–æ–≤ –≤ –±–æ—Ç–µ")
                print("   –†–ï–®–ï–ù–ò–ï 2: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                print("   –†–ï–®–ï–ù–ò–ï 3: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å Position Mode –¥–ª—è –¥–µ–º–æ")

            # 6. –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            print("\n6Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                test_order = await client.place_order(
                    inst_id="BTC-USDT",
                    side="buy",
                    order_type="LIMIT",
                    quantity="0.0001",
                    price="50000",
                    post_only=True,
                )
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(
                    f"   Order ID: {test_order.get('data', [{}])[0].get('ordId', 'N/A')}"
                )

                # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                if test_order.get("data"):
                    order_id = test_order["data"][0]["ordId"]
                    await client.cancel_order("BTC-USDT", order_id)
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")

                print("\nüéâ –û–†–î–ï–†–ê –†–ê–ë–û–¢–ê–Æ–¢!")
                print("   –ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–π–º–æ–≤")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_demo_account())
