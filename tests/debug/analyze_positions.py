#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ª–æ–≥–æ–≤ - —á—Ç–æ —Å –Ω–∏–º–∏ —Å–ª—É—á–∏–ª–æ—Å—å?
"""

import re
from datetime import datetime
from pathlib import Path
from typing import Dict, List


def parse_positions_from_logs():
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ª–æ–≥–æ–≤"""

    logs_dir = Path("logs/temp_analysis")

    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs/temp_analysis –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    positions = []

    for log_file in sorted(logs_dir.glob("*.log")):
        with open(log_file, "r", encoding="utf-8") as f:
            content = f.read()

        # –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        opened_pattern = r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}).*POSITION OPENED: (\w+-\w+) (\w+)"
        for match in re.finditer(opened_pattern, content):
            timestamp = match.group(1)
            symbol = match.group(2)
            side = match.group(3)

            # –ò—â–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
            # Order ID, Entry price, OCO ID
            lines = content[match.start() : match.start() + 2000].split("\n")

            order_id = None
            entry_price = None
            oco_id = None
            tp_price = None
            sl_price = None

            for line in lines[:20]:
                if "Order ID:" in line:
                    match_id = re.search(r"Order ID: (\d+)", line)
                    if match_id:
                        order_id = match_id.group(1)

                if "position size" in line:
                    match_price = re.search(r"@ \$?([\d.]+)", line)
                    if match_price:
                        entry_price = float(match_price.group(1))

                if "OCO order placed:" in line:
                    match_oco = re.search(r"placed: (\d+)", line)
                    if match_oco:
                        oco_id = match_oco.group(1)

                    match_tp_sl = re.search(r"TP @ \$?([\d.]+), SL @ \$?([\d.]+)", line)
                    if match_tp_sl:
                        tp_price = float(match_tp_sl.group(1))
                        sl_price = float(match_tp_sl.group(2))

            positions.append(
                {
                    "timestamp": timestamp,
                    "symbol": symbol,
                    "side": side,
                    "order_id": order_id,
                    "entry_price": entry_price,
                    "oco_id": oco_id,
                    "tp_price": tp_price,
                    "sl_price": sl_price,
                    "status": "OPENED",
                    "close_reason": None,
                    "close_timestamp": None,
                    "exit_price": None,
                }
            )

    # –ò—â–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    for log_file in sorted(logs_dir.glob("*.log")):
        with open(log_file, "r", encoding="utf-8") as f:
            content = f.read()

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        closed_patterns = [
            r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}).*POSITION CLOSED.*(\w+-\w+)",
            r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}).*–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.*(\w+-\w+)",
            r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}).*closed by (time|tp|sl|ph).*(\w+-\w+)",
        ]

        for pattern in closed_patterns:
            for match in re.finditer(pattern, content):
                timestamp = match.group(1)
                symbol = match.group(2) if len(match.groups()) >= 2 else None

                # –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
                lines = content[match.start() - 500 : match.start() + 500].split("\n")
                reason = None
                exit_price = None

                for line in lines:
                    if "Reason:" in line or "closed by" in line:
                        if "time" in line.lower():
                            reason = "TIME_LIMIT"
                        elif "tp" in line.lower() or "take profit" in line.lower():
                            reason = "TAKE_PROFIT"
                        elif "sl" in line.lower() or "stop loss" in line.lower():
                            reason = "STOP_LOSS"
                        elif (
                            "ph" in line.lower() or "profit harvesting" in line.lower()
                        ):
                            reason = "PROFIT_HARVESTING"

                    if "@ $" in line:
                        match_price = re.search(r"@ \$?([\d.]+)", line)
                        if match_price:
                            exit_price = float(match_price.group(1))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
                for pos in positions:
                    if pos["symbol"] == symbol and pos["status"] == "OPENED":
                        pos["status"] = "CLOSED"
                        pos["close_reason"] = reason
                        pos["close_timestamp"] = timestamp
                        pos["exit_price"] = exit_price
                        break

    return positions


def print_report(positions: List[Dict]):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""

    print("\n" + "=" * 120)
    print("üìä –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –ò–ó –õ–û–ì–û–í")
    print("=" * 120 + "\n")

    if not positions:
        print("‚ùå –ü–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö!")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    opened = [p for p in positions if p["status"] == "OPENED"]
    closed = [p for p in positions if p["status"] == "CLOSED"]

    print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {len(opened)}")
    print(f"üèÅ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {len(closed)}")
    print()

    # –î–µ—Ç–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    if opened:
        print("=" * 120)
        print("üìà –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò (–ë–û–¢ –î–£–ú–ê–ï–¢ –ß–¢–û –û–ù–ò –û–¢–ö–†–´–¢–´):")
        print("=" * 120 + "\n")

        for i, pos in enumerate(opened, 1):
            print(f"{i}. {pos['symbol']} {pos['side']}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {pos['timestamp']}")
            print(f"   Order ID: {pos['order_id']}")
            print(
                f"   Entry: ${pos['entry_price']:.2f}"
                if pos["entry_price"]
                else "   Entry: N/A"
            )
            print(f"   OCO ID: {pos['oco_id']}")
            print(f"   TP: ${pos['tp_price']:.2f}" if pos["tp_price"] else "   TP: N/A")
            print(f"   SL: ${pos['sl_price']:.2f}" if pos["sl_price"] else "   SL: N/A")
            print()

    # –î–µ—Ç–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    if closed:
        print("=" * 120)
        print("üèÅ –ó–ê–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò (–í –õ–û–ì–ê–• –ï–°–¢–¨ –ó–ê–ü–ò–°–¨ –û –ó–ê–ö–†–´–¢–ò–ò):")
        print("=" * 120 + "\n")

        for i, pos in enumerate(closed, 1):
            print(f"{i}. {pos['symbol']} {pos['side']}")
            print(f"   –û—Ç–∫—Ä—ã—Ç–∞: {pos['timestamp']}")
            print(f"   –ó–∞–∫—Ä—ã—Ç–∞: {pos['close_timestamp']}")
            print(
                f"   Entry: ${pos['entry_price']:.2f}"
                if pos["entry_price"]
                else "   Entry: N/A"
            )
            print(
                f"   Exit: ${pos['exit_price']:.2f}"
                if pos["exit_price"]
                else "   Exit: N/A"
            )
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {pos['close_reason']}")

            # –†–∞—Å—á–µ—Ç PnL –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã
            if pos["entry_price"] and pos["exit_price"]:
                diff = pos["exit_price"] - pos["entry_price"]
                pct = (diff / pos["entry_price"]) * 100
                print(f"   PnL: ${diff:.2f} ({pct:+.2f}%)")
            print()

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
    if closed:
        print("=" * 120)
        print("üìâ –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –ó–ê–ö–†–´–¢–ò–Ø:")
        print("=" * 120 + "\n")

        reasons = {}
        for pos in closed:
            reason = pos["close_reason"] or "UNKNOWN"
            reasons[reason] = reasons.get(reason, 0) + 1

        for reason, count in sorted(reasons.items(), key=lambda x: x[1], reverse=True):
            print(f"  {reason}: {count} –ø–æ–∑–∏—Ü–∏–π")

    print("\n" + "=" * 120)
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û!")
    print("=" * 120)
    print()
    print("–ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ OPENED –≤ –ª–æ–≥–∞—Ö, –Ω–æ –Ω–∞ –±–∏—Ä–∂–µ –æ–Ω–∏ –∑–∞–∫—Ä—ã—Ç—ã:")
    print("  ‚Üí –≠—Ç–æ –î–ï–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –±–æ—Ç–∞ —Å –±–∏—Ä–∂–µ–π!")
    print("  ‚Üí –ë–æ—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OCO –æ—Ä–¥–µ—Ä–æ–≤")
    print("  ‚Üí –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ API")
    print()
    print("–ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã 'by market' –Ω–∞ –±–∏—Ä–∂–µ:")
    print("  ‚Üí –≠—Ç–æ –ª–∏–±–æ TIME_LIMIT (–±–æ—Ç –∑–∞–∫—Ä—ã–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
    print("  ‚Üí –õ–∏–±–æ OCO —Å—Ä–∞–±–æ—Ç–∞–ª (TP/SL)")
    print()


def main():
    positions = parse_positions_from_logs()
    print_report(positions)


if __name__ == "__main__":
    main()
