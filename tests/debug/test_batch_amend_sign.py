#!/usr/bin/env python3
"""
Debug-TEST: Batch-amend signature (Error 50113)
–ó–∞–ø—É—Å–∫: python tests/debug/test_batch_amend_sign.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).resolve().parents[2]))

from src.config import load_config
from src.okx_client import OKXClient


async def main():
    print("=" * 60)
    print("üîß –¢–ï–°–¢: BATCH AMEND SIGNATURE")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    api_config = list(config.api.values())[0]
    client = OKXClient(api_config)
    await client.connect()

    try:
        # 1. –†–∞–∑–º–µ—â–∞–µ–º 2 —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ (–¥–ª—è batch-amend)
        symbol = "ETH-USDT"
        orders = []

        print(f"\nüõí –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞...")

        for i in range(2):
            res = await client.place_order(
                symbol=symbol, side="buy", order_type="market", quantity=0.001
            )
            if hasattr(res, "id") and res.id:
                orders.append(res.id)
                print(f"   ‚úÖ –û—Ä–¥–µ—Ä {i+1}: {res.id}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {i+1}: {res}")

        if not orders:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ—Ä–¥–µ—Ä–∞: {orders}")

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º batch-amend payload
        print(f"\nüîß –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º batch-amend payload...")

        amend_payload = [
            {"instId": symbol, "ordId": oid, "newPx": "2000"}  # –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ (–ª—é–±–∞—è)
            for oid in orders
        ]

        print(f"   Payload: {amend_payload}")

        # 3. –ü—Ä–æ–±—É–µ–º batch-amend
        print(f"\nüöÄ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º batch-amend...")

        try:
            resp = await client.batch_amend_orders(amend_payload)
            print("‚úÖ Batch-amend —É—Å–ø–µ—à–Ω–æ:", resp)
        except Exception as e:
            print("‚ùå Batch-amend –æ—à–∏–±–∫–∞:", e)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            print(f"   –û—Ä–¥–µ—Ä–∞: {orders}")
            print(f"   Payload: {amend_payload}")
            print(f"   –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

        # 4. –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        print(f"\nüßπ –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞...")

        for oid in orders:
            try:
                await client.cancel_order(symbol, oid)
                print(f"   ‚úÖ –û—Ä–¥–µ—Ä {oid} –æ—Ç–º–µ–Ω–µ–Ω")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {oid}: {e}")

        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")

    finally:
        await client.disconnect()
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
