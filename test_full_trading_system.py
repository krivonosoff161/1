"""
–ü–û–õ–ù–´–ô –¢–ï–°–¢ –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´
–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Å—å —Ü–∏–∫–ª: –æ—Ç–∫—Ä—ã—Ç–∏–µ ‚Üí OCO ‚Üí PH ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner
from src.models import OrderSide, OrderType, Signal


async def test_full_trading_cycle():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
    print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: –û—Ç–∫—Ä—ã—Ç–∏–µ ‚Üí OCO ‚Üí PH ‚Üí –ó–∞–∫—Ä—ã—Ç–∏–µ")
    print("=" * 70)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SPOT —Ä–µ–∂–∏–º–∞
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SPOT —Ä–µ–∂–∏–º–∞...")
        if await bot.client.set_trading_mode("spot"):
            print("‚úÖ SPOT —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SPOT —Ä–µ–∂–∏–º (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç)")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = await bot.client.get_current_price("ETH-USDT")
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${current_price:.2f}")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        test_signal = Signal(
            timestamp=datetime.utcnow(),
            symbol="ETH-USDT",
            side=OrderSide.BUY,
            price=current_price,
            confidence=10.0,
            strength=10.0,
            strategy_id="test_strategy",
            indicators={"ATR": 100.0},
        )

        print(f"\nüõí –¢–ï–°–¢ 1: –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("-" * 50)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        position = await bot.strategy.order_executor.execute_signal(test_signal, {})

        # üî• –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ orchestrator –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞!
        if position:
            bot.strategy.positions["ETH-USDT"] = position
            print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ orchestrator tracking")

        if position:
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {position.id}")
            print(f"   Entry Price: ${position.entry_price:.2f}")
            print(f"   Size: {position.size:.8f} ETH")
            print(f"   OCO Order ID: {position.algo_order_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OCO –æ—Ä–¥–µ—Ä–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
            print(f"\nüîÑ –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê OCO –û–†–î–ï–†–û–í")
            print("-" * 50)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OCO –æ—Ä–¥–µ—Ä–∞
            print("   –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è OCO –æ—Ä–¥–µ—Ä–∞...")
            await asyncio.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ (OCO –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç–∞–º)
            # –ò—â–µ–º OCO –æ—Ä–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            algo_orders = await bot.client.get_algo_orders(
                symbol="ETH-USDT", algo_type="oco"
            )
            oco_found = False

            print(f"   –ò—â–µ–º OCO –æ—Ä–¥–µ—Ä ID: {position.algo_order_id}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

            if algo_orders and len(algo_orders) > 0:
                for order in algo_orders:
                    print(
                        f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä: {order.get('algoId')} (—Ç–∏–ø: {order.get('ordType')})"
                    )
                    if order.get("algoId") == position.algo_order_id:
                        oco_found = True
                        print(
                            f"‚úÖ OCO Order –Ω–∞–π–¥–µ–Ω: {order.get('tpTriggerPx', 'N/A')} @ {order.get('sz', 'N/A')} ({order.get('ordType', 'N/A')})"
                        )
                        break

            if oco_found:
                print("‚úÖ OCO –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ùå OCO –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞
                try:
                    algo_orders = await bot.client.get_algo_orders()
                    print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")
                    for algo_order in algo_orders:
                        print(
                            f"   Algo ID: {algo_order.get('algoId')}, Type: {algo_order.get('ordType')}"
                        )
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # –¢–µ—Å—Ç Profit Harvesting
            print(f"\nüí∞ –¢–ï–°–¢ 3: PROFIT HARVESTING")
            print("-" * 50)

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è PH
            profit_price = position.entry_price * 1.001  # +0.1% –ø—Ä–∏–±—ã–ª—å
            print(f"   –ò–º–∏—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É: ${profit_price:.2f} (+0.1%)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PH –ª–æ–≥–∏–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞)
            ph_result = await bot.strategy.position_manager._check_profit_harvesting(
                position, profit_price
            )

            if ph_result:
                print("‚úÖ PH —Å—Ä–∞–±–æ—Ç–∞–ª - –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–∫—Ä—ã—Ç—å—Å—è")
            else:
                print("‚ö™ PH –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π")

            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TP/SL —á–µ—Ä–µ–∑ Batch
            print(f"\nüîÑ –¢–ï–°–¢ 4: BATCH –û–ë–ù–û–í–õ–ï–ù–ò–ï TP/SL")
            print("-" * 50)

            new_tp_price = position.take_profit * 1.001
            new_sl_price = position.stop_loss * 0.999

            print(f"   –û–±–Ω–æ–≤–ª—è–µ–º TP: ${position.take_profit:.2f} ‚Üí ${new_tp_price:.2f}")
            print(f"   –û–±–Ω–æ–≤–ª—è–µ–º SL: ${position.stop_loss:.2f} ‚Üí ${new_sl_price:.2f}")

            batch_result = await bot.strategy.position_manager.batch_update_tp_sl(
                symbol="ETH-USDT",
                tp_ord_id=position.algo_order_id,  # OCO –æ—Ä–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ TP –∏ SL
                sl_ord_id=position.algo_order_id,  # OCO –æ—Ä–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ TP –∏ SL
                new_tp_price=new_tp_price,
                new_sl_price=new_sl_price,
            )

            if batch_result.get("code") == "0":
                print("‚úÖ Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
            else:
                print(f"‚ùå Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {batch_result.get('msg')}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º batch
            await bot.strategy.position_manager.flush_pending_updates()
            print("‚úÖ Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

            # –¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            print(f"\nüî¥ –¢–ï–°–¢ 5: –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò")
            print("-" * 50)

            close_price = position.entry_price * 1.0005  # +0.05% –ø—Ä–∏–±—ã–ª—å
            print(f"   –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ü–µ–Ω–µ: ${close_price:.2f}")

            trade_result = await bot.strategy.position_manager.close_position(
                "ETH-USDT", position, close_price, "test_close"
            )

            if trade_result:
                print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"   PnL: ${trade_result.net_pnl:.4f}")
                print(f"   Commission: ${trade_result.commission:.4f}")
                print(f"   Duration: {trade_result.duration_sec:.1f} —Å–µ–∫")

                # üî• –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ orchestrator –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è!
                if "ETH-USDT" in bot.strategy.positions:
                    del bot.strategy.positions["ETH-USDT"]
                    print("‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ orchestrator tracking")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            print(f"\nüîç –¢–ï–°–¢ 6: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
            print("-" * 50)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
            final_orders = await bot.client.get_open_orders(symbol="ETH-USDT")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if isinstance(final_orders, dict) and "data" in final_orders:
                orders_data = final_orders["data"]
            elif isinstance(final_orders, list):
                orders_data = final_orders
            else:
                orders_data = []

            remaining_orders = [
                o
                for o in orders_data
                if (o.get("ordId") if isinstance(o, dict) else o.id)
                == position.algo_order_id
            ]

            if not remaining_orders:
                print("‚úÖ –í—Å–µ OCO –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(remaining_orders)}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            algo_orders = await bot.client.get_algo_orders()
            if algo_orders:
                print(f"üìä –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")
                for order in algo_orders:
                    if order.get("algoId") == position.algo_order_id:
                        print(
                            f"   ‚úÖ OCO –Ω–∞–π–¥–µ–Ω: {order.get('ordType')} - {order.get('state')}"
                        )
            else:
                print("üìä –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: 0")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Batch Manager
            batch_stats = bot.strategy.position_manager.get_batch_stats()
            print(f"üìä Batch —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {batch_stats['pending_updates']}")
            print(f"   –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_stats['max_batch_size']}")
            print(f"   –ê–≤—Ç–æ-flush –ø–æ—Ä–æ–≥: {batch_stats['auto_flush_threshold']}")
            print(f"   –ì–æ—Ç–æ–≤ –∫ flush: {batch_stats['ready_for_flush']}")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")

        # Cleanup
        await bot.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False


async def test_websocket_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò WEBSOCKET")
    print("=" * 50)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        # –¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket
        # WebSocket —Ç–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–Ω)
        print("‚ö™ WebSocket —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–Ω)")

        # –¢–µ—Å—Ç REST API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        import time

        rest_start = time.time()
        await bot.client.get_current_price("BTC-USDT")
        rest_latency = (time.time() - rest_start) * 1000
        print(f"üìä REST API Latency: {rest_latency:.2f} –º—Å")

        print("‚úÖ WebSocket –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: OK")

        await bot.shutdown()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def test_maker_strategy():
    """–¢–µ—Å—Ç Maker-First —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüí∞ –¢–ï–°–¢ MAKER-FIRST –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 50)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        current_price = await bot.client.get_current_price("ETH-USDT")
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

        # –¢–µ—Å—Ç POST-ONLY –æ—Ä–¥–µ—Ä–∞
        test_signal = Signal(
            timestamp=datetime.utcnow(),
            symbol="ETH-USDT",
            side=OrderSide.BUY,
            price=current_price,
            confidence=10.0,
            strength=10.0,
            strategy_id="test_strategy",
            indicators={"ATR": 100.0},
        )

        print("üõí –ü–æ–ø—ã—Ç–∫–∞ POST-ONLY –æ—Ä–¥–µ—Ä–∞...")

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å POST-ONLY
        position = await bot.strategy.order_executor.execute_signal(test_signal, {})

        # üî• –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ orchestrator –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞!
        if position:
            bot.strategy.positions["ETH-USDT"] = position

        if position:
            print("‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏
            close_price = position.entry_price * 1.0001
            trade_result = await bot.strategy.position_manager.close_position(
                "ETH-USDT", position, close_price, "maker_test"
            )

            if trade_result:
                commission_rate = trade_result.commission / (
                    position.entry_price * position.size
                )
                print(f"üìä Commission Rate: {commission_rate:.6f}")

                if commission_rate < 0.001:  # –ú–µ–Ω—å—à–µ 0.1% = Maker
                    print("‚úÖ Maker –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                else:
                    print("‚ö†Ô∏è Taker –∫–æ–º–∏—Å—Å–∏—è (POST-ONLY –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            await bot.strategy.position_manager.close_position(
                "ETH-USDT", position, close_price, "cleanup"
            )

            # üî• –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ orchestrator –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è!
            if "ETH-USDT" in bot.strategy.positions:
                del bot.strategy.positions["ETH-USDT"]
        else:
            print("‚ùå POST-ONLY –æ—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω")

        await bot.shutdown()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Maker: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: –û—Ç–∫—Ä—ã—Ç–∏–µ ‚Üí OCO ‚Üí PH ‚Üí Batch ‚Üí –ó–∞–∫—Ä—ã—Ç–∏–µ")
    print("=" * 80)

    results = {}

    # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    results["trading_cycle"] = await test_full_trading_cycle()

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WebSocket
    results["websocket_performance"] = await test_websocket_performance()

    # –¢–µ—Å—Ç 3: Maker —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    results["maker_strategy"] = await test_maker_strategy()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)

    if results["trading_cycle"]:
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –ü–æ–ª–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: –û–®–ò–ë–ö–ê")

    if results["websocket_performance"]:
        print("‚úÖ WebSocket –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå WebSocket –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û–®–ò–ë–ö–ê")

    if results["maker_strategy"]:
        print("‚úÖ Maker —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå Maker —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–®–ò–ë–ö–ê")

    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = all(results.values())

    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ!")
        print("\nüìà –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ WebSocket: –ë—ã—Å—Ç—Ä—ã–µ –≤—Ö–æ–¥—ã")
        print("   ‚Ä¢ Batch: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ Maker: –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π")
        print("   ‚Ä¢ OCO: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        print("   ‚Ä¢ PH: –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

    print("\n‚úÖ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
