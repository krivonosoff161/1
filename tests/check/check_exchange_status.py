import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

"""
–ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ù–ê –ë–ò–†–ñ–ï
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤: Market, Limit, TP/SL
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def check_exchange_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ù–ê –ë–ò–†–ñ–ï")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        print("-" * 40)

        open_orders = await bot.client.get_open_orders()
        print(
            f"üìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders) if isinstance(open_orders, list) else len(open_orders.get('data', []))}"
        )

        if isinstance(open_orders, list):
            orders_data = open_orders
        else:
            orders_data = open_orders.get("data", [])

        for i, order in enumerate(orders_data, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            if hasattr(order, "get"):
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                print(f"   {i}. ID: {order.get('ordId', 'N/A')}")
                print(f"      Symbol: {order.get('instId', 'N/A')}")
                print(f"      Side: {order.get('side', 'N/A')}")
                print(f"      Type: {order.get('ordType', 'N/A')}")
                print(f"      Size: {order.get('sz', 'N/A')}")
                print(f"      Price: {order.get('px', 'N/A')}")
                print(f"      State: {order.get('state', 'N/A')}")
                print(f"      Time: {order.get('cTime', 'N/A')}")
            else:
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Order
                print(f"   {i}. ID: {getattr(order, 'id', 'N/A')}")
                print(f"      Symbol: {getattr(order, 'symbol', 'N/A')}")
                print(f"      Side: {getattr(order, 'side', 'N/A')}")
                print(f"      Type: {getattr(order, 'type', 'N/A')}")
                print(f"      Size: {getattr(order, 'size', 'N/A')}")
                print(f"      Price: {getattr(order, 'price', 'N/A')}")
                print(f"      State: {getattr(order, 'state', 'N/A')}")
                print(f"      Time: {getattr(order, 'timestamp', 'N/A')}")
            print()

        # 2. –ü–†–û–í–ï–†–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í (TP/SL)
        print(f"ü§ñ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–ï –û–†–î–ï–†–ê (TP/SL):")
        print("-" * 40)

        algo_orders = await bot.client.get_algo_orders()
        print(f"üìä –í—Å–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

        for i, order in enumerate(algo_orders, 1):
            print(f"   {i}. Algo ID: {order.get('algoId', 'N/A')}")
            print(f"      Symbol: {order.get('instId', 'N/A')}")
            print(f"      Type: {order.get('ordType', 'N/A')}")
            print(f"      Side: {order.get('side', 'N/A')}")
            print(f"      Size: {order.get('sz', 'N/A')}")
            print(f"      TP Price: {order.get('tpTriggerPx', 'N/A')}")
            print(f"      SL Price: {order.get('slTriggerPx', 'N/A')}")
            print(f"      State: {order.get('state', 'N/A')}")
            print(f"      Time: {order.get('cTime', 'N/A')}")
            print()

        # 3. –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô
        print(f"üíº –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
        print("-" * 40)

        positions = await bot.client.get_positions()
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

        for i, pos in enumerate(positions, 1):
            print(f"   {i}. Symbol: {pos.get('instId', 'N/A')}")
            print(f"      Side: {pos.get('posSide', 'N/A')}")
            print(f"      Size: {pos.get('pos', 'N/A')}")
            print(f"      Avg Price: {pos.get('avgPx', 'N/A')}")
            print(f"      Unrealized PnL: {pos.get('upl', 'N/A')}")
            print()

        # 4. –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í
        print(f"üí∞ –ü–†–û–í–ï–†–ö–ê –ó–ê–ô–ú–û–í:")
        print("-" * 40)

        eth_borrowed = await bot.client.get_borrowed_balance("ETH")
        usdt_borrowed = await bot.client.get_borrowed_balance("USDT")
        btc_borrowed = await bot.client.get_borrowed_balance("BTC")

        print(f"   ETH –∑–∞–π–º—ã: {eth_borrowed:.8f}")
        print(f"   USDT –∑–∞–π–º—ã: {usdt_borrowed:.2f}")
        print(f"   BTC –∑–∞–π–º—ã: {btc_borrowed:.8f}")

        if eth_borrowed > 0 or usdt_borrowed > 0 or btc_borrowed > 0:
            print("   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ó–ê–ô–ú–´!")
        else:
            print("   ‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

        # 5. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
        print(f"\nüí≥ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:")
        print("-" * 40)

        balances = await bot.client.get_account_balance()
        for balance in balances:
            if balance.currency in ["ETH", "USDT", "BTC"]:
                print(
                    f"   {balance.currency}: {balance.free:.8f} (free) | {balance.used:.8f} (used)"
                )

        # 6. –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        print(f"\nüìú –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê (–∏—Å—Ç–æ—Ä–∏—è):")
        print("-" * 40)

        order_history = await bot.client.get_order_history("ETH-USDT", limit=10)
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ ETH-USDT: {len(order_history)}")

        for i, order in enumerate(order_history[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. ID: {order.get('ordId', 'N/A')}")
            print(f"      Side: {order.get('side', 'N/A')}")
            print(f"      Type: {order.get('ordType', 'N/A')}")
            print(f"      Size: {order.get('sz', 'N/A')}")
            print(f"      Price: {order.get('px', 'N/A')}")
            print(f"      State: {order.get('state', 'N/A')}")
            print(f"      Time: {order.get('cTime', 'N/A')}")
            print()

        await bot.shutdown()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(check_exchange_status())
