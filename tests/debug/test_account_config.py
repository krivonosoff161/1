#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Account Config "Invalid Sign" –æ—à–∏–±–∫–∏
"""

import asyncio
import os
import sys
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    os.system("chcp 65001 >nul")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.config import load_config
from src.okx_client import OKXClient


async def test_account_config():
    """–¢–µ—Å—Ç Account Config —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    print("=" * 60)
    print("üîß –¢–ï–°–¢: ACCOUNT CONFIG")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    api_config = list(config.api.values())[0]
    client = OKXClient(api_config)
    await client.connect()

    try:
        print(f"\nüîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞...")

        try:
            result = await client.check_account_mode()
            print(f"‚úÖ Account config —É—Å–ø–µ—à–µ–Ω!")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        except Exception as e:
            print(f"‚ùå Account config failed: {e}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            print(f"   –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ endpoints...")

            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π endpoint
                balance = await client.get_account_balance()
                print(f"   ‚úÖ get_account_balance —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(balance)} –∞–∫—Ç–∏–≤–æ–≤")
            except Exception as e2:
                print(f"   ‚ùå get_account_balance failed: {e2}")

            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–æ–π endpoint
                price = await client.get_current_price("ETH-USDT")
                print(f"   ‚úÖ get_current_price —Ä–∞–±–æ—Ç–∞–µ—Ç: ${price:.2f}")
            except Exception as e3:
                print(f"   ‚ùå get_current_price failed: {e3}")

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(test_account_config())
