#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Batch Amend "Invalid Sign" –æ—à–∏–±–∫–∏
"""

import asyncio
import os
import sys
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == "win32":
    os.system("chcp 65001 >nul")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.config import load_config
from src.okx_client import OKXClient


async def test_batch_amend():
    """–¢–µ—Å—Ç Batch Amend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    print("=" * 60)
    print("üîß –¢–ï–°–¢: BATCH AMEND")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    api_config = list(config.api.values())[0]
    client = OKXClient(api_config)
    await client.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
        eth_price = await client.get_current_price("ETH-USDT")
        print(f"\nüìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${eth_price:.2f}")

        # –†–∞–∑–º–µ—â–∞–µ–º OCO –æ—Ä–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è batch amend
        print(f"\nüõí –®–∞–≥ 1: –†–∞–∑–º–µ—â–∞–µ–º OCO –æ—Ä–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        tp_price = eth_price * 1.005  # +0.5%
        sl_price = eth_price * 0.9965  # -0.35%

        oco_result = await client._make_request(
            "POST",
            "/trade/order-algo",
            data={
                "instId": "ETH-USDT",
                "tdMode": "cash",
                "side": "sell",
                "ordType": "oco",
                "sz": "0.005",
                "tpTriggerPx": str(tp_price),
                "slTriggerPx": str(sl_price),
                "tpOrdPx": "-1",
                "slOrdPx": "-1",
                "autoBorrow": "false",
            },
        )

        oco_id = oco_result.get("data", [{}])[0].get("algoId")
        print(f"‚úÖ OCO —Ä–∞–∑–º–µ—â–µ–Ω: {oco_id}")
        print(f"   TP: ${tp_price:.2f}")
        print(f"   SL: ${sl_price:.2f}")

        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print(f"\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        await asyncio.sleep(2)

        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º Batch Amend
        print(f"\nüîß –®–∞–≥ 2: –¢–ï–°–¢–ò–†–£–ï–ú BATCH AMEND...")

        # –ù–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è TP/SL
        new_tp_price = eth_price * 1.006  # +0.6%
        new_sl_price = eth_price * 0.996  # -0.4%

        print(f"   –û–±–Ω–æ–≤–ª—è–µ–º TP: ${tp_price:.2f} ‚Üí ${new_tp_price:.2f}")
        print(f"   –û–±–Ω–æ–≤–ª—è–µ–º SL: ${sl_price:.2f} ‚Üí ${new_sl_price:.2f}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch amend
        orders_data = [
            {
                "instId": "ETH-USDT",
                "algoId": oco_id,
                "newTpTriggerPx": str(new_tp_price),
                "newSlTriggerPx": str(new_sl_price),
            }
        ]

        try:
            # –í—ã–∑—ã–≤–∞–µ–º batch amend
            result = await client.batch_amend_orders(orders_data)
            print(f"‚úÖ Batch amend —É—Å–ø–µ—à–µ–Ω!")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        except Exception as e:
            print(f"‚ùå Batch amend failed: {e}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            print(f"   OCO ID: {oco_id}")
            print(f"   –ù–æ–≤—ã–µ —Ü–µ–Ω—ã: TP={new_tp_price:.2f}, SL={new_sl_price:.2f}")
            print(f"   –î–∞–Ω–Ω—ã–µ: {orders_data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ OCO
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ OCO...")
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å OCO —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                algo_orders = await client.get_algo_orders(symbol="ETH-USDT")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

                if algo_orders:
                    for order in algo_orders:
                        print(f"   - {order.get('algoId')}: {order.get('state')}")
                        if order.get("algoId") == oco_id:
                            print(f"   ‚úÖ –ù–ê–® OCO –ù–ê–ô–î–ï–ù!")
                else:
                    print(f"   ‚ùå OCO –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è")

            except Exception as e2:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OCO: {e2}")

        # –û—á–∏—Å—Ç–∫–∞
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞...")
        if oco_id:
            try:
                await client.cancel_algo_order(oco_id, "ETH-USDT")
                print(f"   ‚úÖ OCO –æ—Ç–º–µ–Ω–µ–Ω")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã OCO: {e}")

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(test_batch_amend())
