"""
–¢–µ—Å—Ç WebSocket Order Executor –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—Ö–æ–¥–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(".")

from src.config import load_config
from src.models import OrderSide
from src.okx_client import OKXClient
from src.websocket_order_executor import WebSocketOrderExecutor


async def test_websocket_latency():
    """–¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket vs REST"""
    print("üîç –¢–ï–°–¢ –õ–ê–¢–ï–ù–¢–ù–û–°–¢–ò WEBSOCKET vs REST")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –¢–µ—Å—Ç REST –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        print("üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ REST API –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
        start_time = datetime.utcnow()
        ticker = await client.get_ticker("BTC-USDT")
        rest_latency = (datetime.utcnow() - start_time).total_seconds() * 1000
        print(f"   REST API: {rest_latency:.1f} –º—Å")

        # –¢–µ—Å—Ç WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        print("üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
        ws_executor = WebSocketOrderExecutor(config.api["okx"])
        if await ws_executor.connect():
            ws_latency = await ws_executor.get_latency()
            print(f"   WebSocket: {ws_latency:.1f} –º—Å")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            improvement = rest_latency - ws_latency
            improvement_percent = (improvement / rest_latency) * 100
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f} –º—Å ({improvement_percent:.1f}%)")

            await ws_executor.disconnect()
        else:
            print("   ‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


async def test_websocket_order():
    """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket"""
    print("\nüöÄ –¢–ï–°–¢ WEBSOCKET –û–†–î–ï–†–ê")
    print("=" * 50)

    try:
        config = load_config()
        ws_executor = WebSocketOrderExecutor(config.api["okx"])

        if await ws_executor.connect():
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (–¥–µ–º–æ)
            print("üì§ –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
            print("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–µ—Å—Ç –Ω–∞ –°–ê–ù–î–ë–û–ö–°–ï!")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            client = OKXClient(config.api["okx"])
            await client.connect()
            ticker = await client.get_ticker("BTC-USDT")
            current_price = float(ticker.get("last", 0))
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price:.2f}")

            # –¢–µ—Å—Ç –æ—Ä–¥–µ—Ä–∞ (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)
            test_quantity = 0.0001  # $10 –ø—Ä–∏ —Ü–µ–Ω–µ $100k
            print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {test_quantity} BTC")

            # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
            start_time = datetime.utcnow()
            order = await ws_executor.place_market_order(
                symbol="BTC-USDT",
                side=OrderSide.BUY,
                quantity=test_quantity,
                price=current_price,
            )
            order_time = (datetime.utcnow() - start_time).total_seconds() * 1000

            if order:
                print(f"   ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –∑–∞ {order_time:.1f} –º—Å")
                print(f"   Order ID: {order.id}")
                print(f"   Status: {order.status}")
            else:
                print(f"   ‚ùå –û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω –∑–∞ {order_time:.1f} –º—Å")

            await ws_executor.disconnect()
            await client.disconnect()

        else:
            print("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ä–¥–µ—Ä–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET ORDER EXECUTOR")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    await test_websocket_latency()

    # –¢–µ—Å—Ç 2: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    await test_websocket_order()

    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
