"""
Adaptive Regime Manager - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ (TRENDING, RANGING, CHOPPY) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
–∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional

from loguru import logger

from src.models import OHLCV


class RegimeType(Enum):
    """–¢–∏–ø—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤."""

    TRENDING = "trending"  # –¢—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
    RANGING = "ranging"  # –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫ (–¥–∏–∞–ø–∞–∑–æ–Ω)
    CHOPPY = "choppy"  # –•–∞–æ—Ç–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫ (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)


@dataclass
class IndicatorParameters:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""

    rsi_overbought: float
    rsi_oversold: float
    volume_threshold: float
    sma_fast: int
    sma_slow: int
    ema_fast: int
    ema_slow: int
    atr_period: int
    min_volatility_atr: float


@dataclass
class ModuleParameters:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""

    # Multi-Timeframe
    mtf_block_opposite: bool
    mtf_score_bonus: int
    mtf_confirmation_timeframe: str

    # Correlation Filter
    correlation_threshold: float
    max_correlated_positions: int
    block_same_direction_only: bool

    # Time Filter
    prefer_overlaps: bool
    avoid_low_liquidity_hours: bool

    # Pivot Points
    pivot_level_tolerance_percent: float
    pivot_score_bonus_near_level: int
    pivot_use_last_n_days: int

    # Volume Profile
    vp_score_bonus_in_value_area: int
    vp_score_bonus_near_poc: int
    vp_poc_tolerance_percent: float
    vp_lookback_candles: int

    # üÜï ADX Filter (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
    adx_threshold: float = 25.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    adx_di_difference: float = 5.0  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É +DI –∏ -DI

    # Time Filter (—Å default –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –∫–æ–Ω—Ü–µ)
    avoid_weekends: bool = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤


@dataclass
class RegimeParameters:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""

    # Scoring
    min_score_threshold: int
    # Trade frequency
    max_trades_per_hour: int
    # Position sizing
    position_size_multiplier: float
    # Exit levels
    tp_atr_multiplier: float
    sl_atr_multiplier: float
    max_holding_minutes: int  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    # Risk management
    cooldown_after_loss_minutes: int
    # Module bonuses
    pivot_bonus_multiplier: float  # –£—Å–∏–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç Pivot Points
    volume_profile_bonus_multiplier: float  # –£—Å–∏–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç Volume Profile

    # –ù–û–í–û–ï: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥—É–ª–µ–π
    indicators: IndicatorParameters
    modules: ModuleParameters

    # ‚ú® –ù–û–í–û–ï (18.10.2025): Profit Harvesting (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥ —Ä–µ–∂–∏–º)
    # –í–ê–ñ–ù–û: –ü–æ–ª—è —Å default –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ü–û–°–õ–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö!
    ph_enabled: bool = True  # –í–∫–ª—é—á–µ–Ω –ª–∏ Profit Harvesting
    ph_threshold: float = 0.20  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ USD –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    ph_time_limit: int = 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ–∫) –¥–ª—è PH


@dataclass
class RegimeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Adaptive Regime Manager."""

    enabled: bool = True
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
    trending_adx_threshold: float = 25.0  # ADX >25 = —Ç—Ä–µ–Ω–¥
    ranging_adx_threshold: float = 20.0  # ADX <20 = –±–æ–∫–æ–≤–∏–∫
    high_volatility_threshold: float = 0.05  # >5% = –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    low_volatility_threshold: float = 0.02  # <2% = –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    trend_strength_percent: float = 2.0  # –¶–µ–Ω–∞ >2% –æ—Ç SMA = —Ç—Ä–µ–Ω–¥
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    min_regime_duration_minutes: int = 15  # –ú–∏–Ω–∏–º—É–º 15 –º–∏–Ω –≤ –æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ
    required_confirmations: int = 3  # –ù—É–∂–Ω–æ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
    trending_params: RegimeParameters = field(
        default_factory=lambda: RegimeParameters(
            min_score_threshold=3.0,
            max_trades_per_hour=15,
            position_size_multiplier=1.2,
            tp_atr_multiplier=2.5,
            sl_atr_multiplier=1.2,
            max_holding_minutes=20,
            cooldown_after_loss_minutes=3,
            pivot_bonus_multiplier=1.2,
            volume_profile_bonus_multiplier=1.1,
            indicators={},
            modules={},
        )
    )
    ranging_params: RegimeParameters = field(
        default_factory=lambda: RegimeParameters(
            min_score_threshold=4.0,
            max_trades_per_hour=10,
            position_size_multiplier=1.0,
            tp_atr_multiplier=2.0,
            sl_atr_multiplier=1.5,
            max_holding_minutes=15,
            cooldown_after_loss_minutes=5,
            pivot_bonus_multiplier=1.0,
            volume_profile_bonus_multiplier=1.0,
            indicators={},
            modules={},
        )
    )
    choppy_params: RegimeParameters = field(
        default_factory=lambda: RegimeParameters(
            min_score_threshold=5.0,
            max_trades_per_hour=8,
            position_size_multiplier=0.8,
            tp_atr_multiplier=1.5,
            sl_atr_multiplier=2.0,
            max_holding_minutes=10,
            cooldown_after_loss_minutes=8,
            pivot_bonus_multiplier=0.8,
            volume_profile_bonus_multiplier=0.9,
            indicators={},
            modules={},
        )
    )


@dataclass
class RegimeDetectionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞."""

    regime: RegimeType
    confidence: float  # 0.0-1.0
    indicators: Dict[str, float]  # –ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    reason: str  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ä–µ–∂–∏–º


class AdaptiveRegimeManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ (TRENDING/RANGING/CHOPPY) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """

    def __init__(self, config: RegimeConfig):
        self.config = config
        # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        self.current_regime: RegimeType = RegimeType.RANGING  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.regime_start_time: datetime = datetime.utcnow()
        self.last_regime_check: datetime = datetime.utcnow()
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self.regime_confirmations: List[RegimeType] = []
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.regime_switches: Dict[str, int] = {}
        self.time_in_regime: Dict[RegimeType, timedelta] = {
            RegimeType.TRENDING: timedelta(0),
            RegimeType.RANGING: timedelta(0),
            RegimeType.CHOPPY: timedelta(0),
        }

        logger.info(
            f"ARM initialized: ADX trend={config.trending_adx_threshold}, "
            f"volatility={config.low_volatility_threshold:.1%}-{config.high_volatility_threshold:.1%}"
        )

    def detect_regime(
        self, candles: List[OHLCV], current_price: float
    ) -> RegimeDetectionResult:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.

        Args:
            candles: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π (–º–∏–Ω–∏–º—É–º 50)
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            RegimeDetectionResult —Å —Ç–∏–ø–æ–º —Ä–µ–∂–∏–º–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        """
        if len(candles) < 50:
            return RegimeDetectionResult(
                regime=self.current_regime,
                confidence=0.0,
                indicators={},
                reason="Insufficient data (need 50+ candles)",
            )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        indicators = self._calculate_regime_indicators(candles, current_price)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        regime, confidence, reason = self._classify_regime(indicators)

        # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é —Ä–µ–∂–∏–º–∞
        logger.debug(
            f"üß† ARM Detect Regime:\n"
            f"   Detected: {regime.value.upper()} (confidence: {confidence:.1%})\n"
            f"   Reason: {reason}\n"
            f"   ADX proxy: {indicators.get('adx_proxy', 0):.1f}\n"
            f"   Volatility: {indicators.get('volatility_percent', 0):.2%}\n"
            f"   Reversals: {indicators.get('reversals', 0)}"
        )

        return RegimeDetectionResult(
            regime=regime, confidence=confidence, indicators=indicators, reason=reason
        )

    def _calculate_regime_indicators(
        self, candles: List[OHLCV], current_price: float
    ) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞."""
        closes = [c.close for c in candles]
        highs = [c.high for c in candles]
        lows = [c.low for c in candles]

        # SMA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        sma_20 = sum(closes[-20:]) / 20
        sma_50 = sum(closes[-50:]) / 50

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        true_ranges = []
        for i in range(1, len(candles)):
            high_low = highs[i] - lows[i]
            high_close = abs(highs[i] - closes[i - 1])
            low_close = abs(lows[i] - closes[i - 1])
            true_ranges.append(max(high_low, high_close, low_close))

        atr = sum(true_ranges[-14:]) / 14 if len(true_ranges) >= 14 else 0
        volatility_percent = (atr / current_price) * 100 if current_price > 0 else 0

        # ADX (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É High-Low –∑–∞ –ø–µ—Ä–∏–æ–¥
        directional_movement = sum([abs(highs[i] - lows[i]) for i in range(-14, 0)])
        total_movement = sum([highs[i] - lows[i] for i in range(-14, 0)])
        adx_proxy = (
            (directional_movement / total_movement * 100) if total_movement > 0 else 0
        )

        # Trend strength (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç SMA)
        trend_deviation = ((current_price - sma_50) / sma_50) * 100

        # Range detection (—Ü–µ–Ω–∞ –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ?)
        recent_high = max(highs[-20:])
        recent_low = min(lows[-20:])
        range_width = ((recent_high - recent_low) / recent_low) * 100

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤ (–¥–ª—è choppy)
        reversals = 0
        for i in range(-20, -1):
            if i > -20:
                prev_direction = closes[i - 1] > closes[i - 2]
                curr_direction = closes[i] > closes[i - 1]
                if prev_direction != curr_direction:
                    reversals += 1

        return {
            "sma_20": sma_20,
            "sma_50": sma_50,
            "current_price": current_price,
            "atr": atr,
            "volatility_percent": volatility_percent,
            "adx_proxy": adx_proxy,
            "trend_deviation": abs(trend_deviation),
            "range_width": range_width,
            "reversals": reversals,
        }

    def _classify_regime(
        self, indicators: Dict[str, float]
    ) -> tuple[RegimeType, float, str]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.

        Returns:
            (regime_type, confidence, reason)
        """
        vol = indicators["volatility_percent"]
        trend_dev = indicators["trend_deviation"]
        adx = indicators["adx_proxy"]
        range_width = indicators["range_width"]
        reversals = indicators["reversals"]

        # CHOPPY: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å + –º–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤
        if vol > self.config.high_volatility_threshold and reversals > 10:
            confidence = min(1.0, (vol / 0.1) * 0.5 + (reversals / 20) * 0.5)
            reason = (
                f"High volatility ({vol:.2%}) + {reversals} reversals "
                f"‚Üí Chaotic market"
            )
            return RegimeType.CHOPPY, confidence, reason

        # TRENDING: –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (
            trend_dev > self.config.trend_strength_percent
            and adx > self.config.trending_adx_threshold
        ):
            confidence = min(1.0, (trend_dev / 5.0) * 0.6 + (adx / 50.0) * 0.4)
            reason = (
                f"Strong trend (deviation {trend_dev:.2%}, ADX {adx:.1f}) "
                f"‚Üí Trending market"
            )
            return RegimeType.TRENDING, confidence, reason

        # RANGING: –£–∑–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω + —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
        if (
            range_width < 3.0
            and trend_dev < self.config.trend_strength_percent
            and adx < self.config.ranging_adx_threshold
        ):
            confidence = min(1.0, (3.0 - range_width) / 3.0)
            reason = (
                f"Narrow range ({range_width:.2%}), weak trend (ADX {adx:.1f}) "
                f"‚Üí Ranging market"
            )
            return RegimeType.RANGING, confidence, reason

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: RANGING (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
        return (
            RegimeType.RANGING,
            0.5,
            "No clear regime detected ‚Üí default to RANGING",
        )

    def update_regime(
        self, candles: List[OHLCV], current_price: float
    ) -> Optional[RegimeType]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π.

        Returns:
            –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ None
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        detection = self.detect_regime(candles, current_price)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self.regime_confirmations.append(detection.regime)
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        if len(self.regime_confirmations) > self.config.required_confirmations:
            self.regime_confirmations.pop(0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        new_regime = self._should_switch_regime(detection)

        if new_regime and new_regime != self.current_regime:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
            time_in_current = datetime.utcnow() - self.regime_start_time
            self.time_in_regime[self.current_regime] += time_in_current

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            self._log_regime_switch(
                old=self.current_regime, new=new_regime, detection=detection
            )

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            self.current_regime = new_regime
            self.regime_start_time = datetime.utcnow()
            self.regime_confirmations.clear()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
            switch_key = f"{self.current_regime.value} ‚Üí {new_regime.value}"
            self.regime_switches[switch_key] = (
                self.regime_switches.get(switch_key, 0) + 1
            )

            return new_regime

        return None

    def _should_switch_regime(
        self, detection: RegimeDetectionResult
    ) -> Optional[RegimeType]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å –∑–∞—â–∏—Ç–∞–º–∏.

        Returns:
            –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ None –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
        time_in_current = datetime.utcnow() - self.regime_start_time
        if time_in_current < timedelta(minutes=self.config.min_regime_duration_minutes):
            # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: CHOPPY —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∑–∞—â–∏—Ç–∞!)
            if detection.regime != RegimeType.CHOPPY or detection.confidence < 0.8:
                return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π?
        if len(self.regime_confirmations) < self.config.required_confirmations:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø—Ä–æ–≤–µ—Ä–æ–∫ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º?
        if all(r == detection.regime for r in self.regime_confirmations):
            return detection.regime

        return None

    def get_current_parameters(self, balance_manager=None) -> RegimeParameters:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.

        Args:
            balance_manager: AdaptiveBalanceManager –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        Returns:
            RegimeParameters —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –±–∞–ª–∞–Ω—Å)
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞
        if self.current_regime == RegimeType.TRENDING:
            base_params = self.config.trending_params
        elif self.current_regime == RegimeType.RANGING:
            base_params = self.config.ranging_params
        else:  # CHOPPY
            base_params = self.config.choppy_params

        # –ï—Å–ª–∏ –µ—Å—Ç—å balance_manager - –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é
        if balance_manager and base_params:
            regime_type = (
                self.current_regime.value.lower()
            )  # "trending", "ranging", "choppy"
            adapted_params = balance_manager.apply_to_regime_params(
                base_params.__dict__, regime_type
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π RegimeParameters —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            return RegimeParameters(
                min_score_threshold=adapted_params.get(
                    "min_score_threshold", base_params.min_score_threshold
                ),
                max_trades_per_hour=adapted_params.get(
                    "max_trades_per_hour", base_params.max_trades_per_hour
                ),
                position_size_multiplier=adapted_params.get(
                    "position_size_multiplier", base_params.position_size_multiplier
                ),
                tp_atr_multiplier=adapted_params.get(
                    "tp_atr_multiplier", base_params.tp_atr_multiplier
                ),
                sl_atr_multiplier=adapted_params.get(
                    "sl_atr_multiplier", base_params.sl_atr_multiplier
                ),
                max_holding_minutes=adapted_params.get(
                    "max_holding_minutes", base_params.max_holding_minutes
                ),
                cooldown_after_loss_minutes=adapted_params.get(
                    "cooldown_after_loss_minutes",
                    base_params.cooldown_after_loss_minutes,
                ),
                pivot_bonus_multiplier=adapted_params.get(
                    "pivot_bonus_multiplier", base_params.pivot_bonus_multiplier
                ),
                volume_profile_bonus_multiplier=adapted_params.get(
                    "volume_profile_bonus_multiplier",
                    base_params.volume_profile_bonus_multiplier,
                ),
                indicators=base_params.indicators,
                modules=base_params.modules,
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç balance_manager –∏–ª–∏ base_params - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if base_params:
            return base_params
        else:
            # Fallback - —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            return RegimeParameters(
                min_score_threshold=4.0,
                max_trades_per_hour=10,
                position_size_multiplier=1.0,
                tp_atr_multiplier=2.0,
                sl_atr_multiplier=1.5,
                max_holding_minutes=15,
                cooldown_after_loss_minutes=5,
                pivot_bonus_multiplier=1.0,
                volume_profile_bonus_multiplier=1.0,
                indicators={},
                modules={},
            )

    def _log_regime_switch(
        self,
        old: RegimeType,
        new: RegimeType,
        detection: RegimeDetectionResult,
    ) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞."""
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info("üîÑ MARKET REGIME SWITCH")
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info(f"   Old regime: {old.value.upper()}")
        logger.info(f"   New regime: {new.value.upper()}")
        logger.info(f"   Confidence: {detection.confidence:.1%}")
        logger.info(f"   Reason: {detection.reason}")
        logger.info("")
        logger.info("üìä Market Indicators:")
        for key, value in detection.indicators.items():
            if "percent" in key or "volatility" in key or "deviation" in key:
                logger.info(f"   {key}: {value:.3%}")
            else:
                logger.info(f"   {key}: {value:.2f}")
        logger.info("")

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = self.get_current_parameters()
        logger.info("‚öôÔ∏è New Parameters:")
        logger.info(f"   Score threshold: {params.min_score_threshold}/12")
        logger.info(f"   Max trades/hour: {params.max_trades_per_hour}")
        logger.info(f"   Position size: {params.position_size_multiplier}x")
        logger.info(f"   TP: {params.tp_atr_multiplier} ATR")
        logger.info(f"   SL: {params.sl_atr_multiplier} ATR")
        logger.info(f"   Max holding: {params.max_holding_minutes} min")
        logger.info(f"   Cooldown after loss: {params.cooldown_after_loss_minutes} min")
        logger.info("")
        logger.info("‚ú® Profit Harvesting (adaptive):")
        logger.info(f"   Enabled: {'YES' if params.ph_enabled else 'NO'}")
        logger.info(f"   Threshold: ${params.ph_threshold:.2f}")
        logger.info(
            f"   Time Limit: {params.ph_time_limit}s ({params.ph_time_limit/60:.1f} min)"
        )
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    def get_statistics(self) -> Dict[str, any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã ARM.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        """
        total_time = sum(
            [td.total_seconds() for td in self.time_in_regime.values()],
            start=0.0,
        )

        time_distribution = {}
        if total_time > 0:
            for regime, td in self.time_in_regime.items():
                time_distribution[regime.value] = td.total_seconds() / total_time * 100

        return {
            "current_regime": self.current_regime.value,
            "time_in_current_regime": str(datetime.utcnow() - self.regime_start_time),
            "total_switches": sum(self.regime_switches.values()),
            "switches_by_type": self.regime_switches,
            "time_distribution": time_distribution,
        }

    def log_statistics(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥."""
        stats = self.get_statistics()

        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info("üìä ADAPTIVE REGIME MANAGER STATISTICS")
        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info(f"Current regime: {stats['current_regime'].upper()}")
        logger.info(f"Time in current: {stats['time_in_current_regime']}")
        logger.info(f"Total switches: {stats['total_switches']}")

        if stats["time_distribution"]:
            logger.info("\nTime distribution:")
            for regime, percent in stats["time_distribution"].items():
                logger.info(f"  {regime.upper()}: {percent:.1f}%")

        if stats["switches_by_type"]:
            logger.info("\nRegime switches:")
            for switch, count in sorted(
                stats["switches_by_type"].items(), key=lambda x: x[1], reverse=True
            ):
                logger.info(f"  {switch}: {count} times")

        logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
