"""
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ entry –æ—Ä–¥–µ—Ä–æ–≤ (MARKET)
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ OCO –æ—Ä–¥–µ—Ä–æ–≤ (TP + SL)
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OKX
- Retry –ª–æ–≥–∏–∫–∞
"""

from datetime import datetime
from typing import Optional, Tuple

from loguru import logger

from src.models import OrderSide, OrderType, Position, PositionSide, Signal


class OrderExecutor:
    """
    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Position –æ–±—ä–µ–∫—Ç–æ–≤.
    """

    def __init__(
        self, client, config, risk_config, balance_checker=None, adaptive_regime=None
    ):
        """
        Args:
            client: OKX –∫–ª–∏–µ–Ω—Ç
            config: Scalping –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            risk_config: Risk –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            balance_checker: Balance Checker –º–æ–¥—É–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            adaptive_regime: ARM –º–æ–¥—É–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.client = client
        self.config = config
        self.risk_config = risk_config
        self.balance_checker = balance_checker
        self.adaptive_regime = adaptive_regime

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        self.min_order_value_usd = (
            60.0  # üî• –°–ù–ò–ñ–ï–ù–û: $35 ‚Üí $60 (–±–∞–ª–∞–Ω—Å –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–¥–µ–ª–æ–∫!)
        )
        self.MIN_LONG_OCO = 60.0  # –î–ª—è LONG OCO (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!)
        self.MIN_SHORT_OCO = 60.0  # –î–ª—è SHORT OCO (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!)

        logger.info("‚úÖ OrderExecutor initialized")

    async def execute_signal(self, signal: Signal, market_data) -> Optional[Position]:
        """
        –ò—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

        –®–∞–≥–∏:
        1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å position_size
        2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Balance Checker
        3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–π–º—ã (–ö–†–ò–¢–ò–ß–ù–û!)
        4. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å entry –æ—Ä–¥–µ—Ä (MARKET)
        5. –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å (–¥–ª—è LONG)
        6. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL
        7. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å OCO –æ—Ä–¥–µ—Ä
        8. –°–æ–∑–¥–∞—Ç—å Position –æ–±—ä–µ–∫—Ç

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR

        Returns:
            Position –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # 1. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self._calculate_position_size(
                signal.symbol, signal.price
            )

            if position_size <= 0:
                logger.warning(f"‚ùå Invalid position size for {signal.symbol}")
                return None

            # 2. Balance Checker - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if self.balance_checker:
                balances = await self.client.get_account_balance()

                # 3. –ö–†–ò–¢–ò–ß–ù–û! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–æ–≤
                base_asset = signal.symbol.split("-")[0]
                quote_asset = signal.symbol.split("-")[1]

                try:
                    borrowed_base = await self.client.get_borrowed_balance(base_asset)
                    borrowed_quote = await self.client.get_borrowed_balance(quote_asset)

                    if borrowed_base > 0 or borrowed_quote > 0:
                        logger.error(
                            f"‚õî {signal.symbol} {signal.side.value} BLOCKED: "
                            f"BORROWED FUNDS DETECTED! "
                            f"{base_asset}: {borrowed_base:.6f} | "
                            f"{quote_asset}: {borrowed_quote:.6f}"
                        )
                        logger.error(
                            "üö® TRADING SUSPENDED! Repay loans and switch to SPOT mode!"
                        )
                        return None
                except Exception as e:
                    logger.error(f"‚ùå Failed to check borrowed balance: {e}")
                    logger.error(
                        "‚õî Trade blocked due to borrowed balance check failure"
                    )
                    return None

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Balance Checker
                balance_check = self.balance_checker.check_balance(
                    symbol=signal.symbol,
                    side=signal.side,
                    required_amount=position_size,
                    current_price=signal.price,
                    balances=balances,
                )

                if not balance_check.allowed:
                    logger.warning(
                        f"‚õî {signal.symbol} {signal.side.value} "
                        f"BLOCKED by Balance Checker: {balance_check.reason}"
                    )
                    return None

            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ SHORT –±–µ–∑ –∞–∫—Ç–∏–≤–∞
            if signal.side == OrderSide.SELL:
                base_asset = signal.symbol.split("-")[0]
                asset_balance = await self.client.get_balance(base_asset)

                if asset_balance < position_size:
                    logger.error(
                        f"üö® {signal.symbol} SHORT BLOCKED: No {base_asset} on balance! "
                        f"Have: {asset_balance:.8f}, Need: {position_size:.8f}"
                    )
                    return None

            # 4. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –∏–∑ signal.indicators (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤ SignalGenerator)
            atr = signal.indicators.get("ATR")
            if not atr:
                logger.warning(f"‚ùå No ATR in signal indicators for {signal.symbol}")
                logger.debug(
                    f"   Available indicators: {list(signal.indicators.keys())}"
                )
                return None

            stop_loss, take_profit = self._calculate_exit_levels(
                signal.price, signal.side, atr
            )

            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è OCO
            min_position_value = (
                self.MIN_LONG_OCO
                if signal.side == OrderSide.BUY
                else self.MIN_SHORT_OCO
            )
            position_value = position_size * signal.price

            if position_value < min_position_value:
                required_value = min_position_value * 1.05
                old_size = position_size
                position_size = round(required_value / signal.price, 8)
                new_value = position_size * signal.price

                logger.info(
                    f"‚¨ÜÔ∏è Position size increased for OCO: "
                    f"{old_size:.6f} ‚Üí {position_size:.6f} "
                    f"(${position_value:.2f} ‚Üí ${new_value:.2f})"
                )
                position_value = new_value

            # 6. –†–∞–∑–º–µ—â–µ–Ω–∏–µ entry –æ—Ä–¥–µ—Ä–∞
            if signal.side == OrderSide.BUY:
                logger.info(
                    f"üì§ Placing LONG order: BUY ${position_value:.2f} USDT "
                    f"{signal.symbol} @ ${signal.price:.2f}"
                )
                logger.info(f"   üìä TP/SL: TP=${take_profit:.2f}, SL=${stop_loss:.2f}")

                order = await self.client.place_order(
                    symbol=signal.symbol,
                    side=signal.side,
                    order_type=OrderType.MARKET,
                    quantity=position_value,  # –°—É–º–º–∞ –≤ USDT
                )
            else:
                logger.info(
                    f"üì§ Placing SHORT order: SELL {position_size} "
                    f"{signal.symbol} @ ${signal.price:.2f}"
                )
                logger.info(f"   üìä TP/SL: TP=${take_profit:.2f}, SL=${stop_loss:.2f}")

                order = await self.client.place_order(
                    symbol=signal.symbol,
                    side=signal.side,
                    order_type=OrderType.MARKET,
                    quantity=position_size,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
                )

            if not order:
                logger.error(f"‚ùå Order placement FAILED: {signal.symbol}")
                return None

            # 7. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if signal.side == OrderSide.BUY:
                actual_position_size = position_value / signal.price
                logger.info(
                    f"üìä BUY completed: position size {actual_position_size:.8f} "
                    f"(${position_value:.2f} @ ${signal.price:.2f})"
                )
            else:
                actual_position_size = position_size
                logger.info(
                    f"üìä SELL completed: position size {actual_position_size:.8f}"
                )

            # 8. –°–æ–∑–¥–∞–Ω–∏–µ Position –æ–±—ä–µ–∫—Ç–∞
            position = Position(
                id=order.id,
                symbol=signal.symbol,
                side=PositionSide.LONG
                if signal.side == OrderSide.BUY
                else PositionSide.SHORT,
                entry_price=signal.price,
                current_price=signal.price,
                size=actual_position_size,
                stop_loss=stop_loss,
                take_profit=take_profit,
                timestamp=datetime.utcnow(),
            )

            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(
                f"‚úÖ POSITION OPENED: {signal.symbol} {position.side.value.upper()}"
            )
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            logger.info(f"   Order ID: {order.id}")
            logger.info(f"   Side: {signal.side.value.upper()}")
            logger.info(
                f"   Size: {actual_position_size:.8f} {signal.symbol.split('-')[0]}"
            )
            logger.info(f"   Entry: ${signal.price:.2f}")
            logger.info(f"   Take Profit: ${take_profit:.2f}")
            logger.info(f"   Stop Loss: ${stop_loss:.2f}")
            rr_ratio = abs(take_profit - signal.price) / abs(signal.price - stop_loss)
            logger.info(f"   Risk/Reward: 1:{rr_ratio:.2f}")
            logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

            # 9. –†–∞–∑–º–µ—â–µ–Ω–∏–µ OCO –æ—Ä–¥–µ—Ä–∞
            # üî• –ö–†–ò–¢–ò–ß–ù–´–ô –§–ò–ö–° #2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OCO!
            try:
                close_side = (
                    OrderSide.SELL if signal.side == OrderSide.BUY else OrderSide.BUY
                )

                # üî• –ù–û–í–´–ô –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–µ—Ä–µ–¥ OCO
                # (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –º–µ–∂–¥—É MARKET –∏ OCO)
                current_price = await self.client.get_current_price(signal.symbol)
                logger.debug(
                    f"   üíπ Price check: Entry=${signal.price:.2f}, "
                    f"Current=${current_price:.2f}"
                )

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º TP/SL –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–∏–ª—å–Ω–æ —É—à–ª–∞
                adjusted_tp = take_profit
                adjusted_sl = stop_loss

                if signal.side == OrderSide.BUY:  # LONG –ø–æ–∑–∏—Ü–∏—è
                    # SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    if stop_loss >= current_price:
                        adjusted_sl = current_price * 0.995  # -0.5% –æ—Ç —Ç–µ–∫—É—â–µ–π
                        logger.warning(
                            f"‚ö†Ô∏è Price moved DOWN! Adjusting SL: "
                            f"${stop_loss:.2f} ‚Üí ${adjusted_sl:.2f}"
                        )
                    # TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    if take_profit <= current_price:
                        adjusted_tp = current_price * 1.005  # +0.5% –æ—Ç —Ç–µ–∫—É—â–µ–π
                        logger.warning(
                            f"‚ö†Ô∏è Price moved UP! Adjusting TP: "
                            f"${take_profit:.2f} ‚Üí ${adjusted_tp:.2f}"
                        )
                else:  # SHORT –ø–æ–∑–∏—Ü–∏—è
                    # SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    if stop_loss <= current_price:
                        adjusted_sl = current_price * 1.005  # +0.5% –æ—Ç —Ç–µ–∫—É—â–µ–π
                        logger.warning(
                            f"‚ö†Ô∏è Price moved UP! Adjusting SL: "
                            f"${stop_loss:.2f} ‚Üí ${adjusted_sl:.2f}"
                        )
                    # TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    if take_profit >= current_price:
                        adjusted_tp = current_price * 0.995  # -0.5% –æ—Ç —Ç–µ–∫—É—â–µ–π
                        logger.warning(
                            f"‚ö†Ô∏è Price moved DOWN! Adjusting TP: "
                            f"${take_profit:.2f} ‚Üí ${adjusted_tp:.2f}"
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Position –µ—Å–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏
                if adjusted_tp != take_profit or adjusted_sl != stop_loss:
                    position.take_profit = adjusted_tp
                    position.stop_loss = adjusted_sl
                    logger.info(
                        f"‚úèÔ∏è Position TP/SL updated: TP=${adjusted_tp:.2f}, "
                        f"SL=${adjusted_sl:.2f}"
                    )

                oco_order_id = await self.client.place_oco_order(
                    symbol=signal.symbol,
                    side=close_side,
                    quantity=actual_position_size,
                    tp_trigger_price=adjusted_tp,
                    sl_trigger_price=adjusted_sl,
                )

                if oco_order_id:
                    position.algo_order_id = oco_order_id
                    logger.info(
                        f"‚úÖ OCO order placed: ID={oco_order_id} | "
                        f"TP @ ${take_profit:.2f}, SL @ ${stop_loss:.2f}"
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è OCO order returned None for {signal.symbol} - "
                        f"position without automatic TP/SL protection!"
                    )

            except Exception as e:
                logger.error(
                    f"‚ùå OCO FAILED for {signal.symbol}:\n"
                    f"   Error: {e}\n"
                    f"   TP: ${take_profit:.4f}, SL: ${stop_loss:.4f}\n"
                    f"   Quantity: {actual_position_size:.8f}\n"
                    f"   Side: {close_side.value}\n"
                    f"   ‚ö†Ô∏è Position will be managed by TIME_LIMIT only!"
                )
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ë–ï–ó OCO (–ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ TIME_LIMIT)

            return position

        except Exception as e:
            logger.error(
                f"‚ùå Error executing signal {signal.symbol}: {e}", exc_info=True
            )
            return None

    async def _calculate_position_size(self, symbol: str, price: float) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (0 –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        """
        logger.info(f"üîç CALCULATING POSITION SIZE for {symbol} @ ${price:.2f}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            balances = await self.client.get_account_balance()
            base_balance = next(
                (b.free for b in balances if b.currency == "USDT"),
                0.0,
            )

            logger.info(f"üí∞ USDT Balance: ${base_balance:.2f}")

            if base_balance <= 0:
                logger.warning(f"‚ùå No USDT balance for {symbol}")
                return 0.0

            # –†–∞—Å—á–µ—Ç risk amount (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            risk_amount = base_balance * (self.risk_config.risk_per_trade_percent / 100)
            logger.info(
                f"üéØ Risk amount: ${risk_amount:.2f} "
                f"({self.risk_config.risk_per_trade_percent}%)"
            )

            # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ stop distance

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ market_data —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ
            # TODO: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å market_data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω)
            atr_value = price * 0.01  # 1% –æ—Ç —Ü–µ–Ω—ã –∫–∞–∫ fallback

            # ARM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SL
            sl_multiplier = self.config.exit.stop_loss_atr_multiplier
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                sl_multiplier = regime_params.sl_atr_multiplier

            stop_distance = atr_value * sl_multiplier

            # Position size = risk / stop_distance
            position_size = risk_amount / stop_distance

            # –õ–∏–º–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            max_position_value = base_balance * (
                self.risk_config.max_position_size_percent / 100
            )
            max_position_size = max_position_value / price

            final_position_size = min(position_size, max_position_size)

            # ARM - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if self.adaptive_regime:
                regime_params = self.adaptive_regime.get_current_parameters()
                multiplier = regime_params.position_size_multiplier
                final_position_size *= multiplier
                logger.debug(
                    f"üß† ARM: {self.adaptive_regime.current_regime.value.upper()} "
                    f"‚Üí size multiplier {multiplier}x"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–∞
            position_value_usd = final_position_size * price
            logger.info(
                f"üìä Final position size: {final_position_size:.6f} = "
                f"${position_value_usd:.2f} (min: ${self.min_order_value_usd})"
            )

            if position_value_usd < self.min_order_value_usd:
                final_position_size = (self.min_order_value_usd * 1.02) / price
                final_value = final_position_size * price
                logger.info(
                    f"‚¨ÜÔ∏è {symbol} Position size increased: "
                    f"${position_value_usd:.2f} ‚Üí ${final_value:.2f}"
                )

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
                if self.balance_checker:
                    balances_check = await self.client.get_account_balance()
                    balance_result = self.balance_checker._check_usdt_balance(
                        symbol, final_position_size, price, balances_check
                    )

                    if not balance_result.allowed:
                        logger.error(
                            f"‚õî {symbol}: Insufficient balance after increase! "
                            f"{balance_result.reason}"
                        )
                        return 0.0

            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
            rounded_size = round(final_position_size, 8)
            return rounded_size

        except Exception as e:
            logger.error(f"‚ùå Error calculating position size: {e}")
            return 0.0

    def _calculate_exit_levels(
        self, entry_price: float, side: OrderSide, atr: float
    ) -> Tuple[float, float]:
        """
        –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR.

        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            atr: ATR value

        Returns:
            (stop_loss, take_profit)
        """
        # ARM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            sl_multiplier = regime_params.sl_atr_multiplier
            tp_multiplier = regime_params.tp_atr_multiplier
        else:
            sl_multiplier = self.config.exit.stop_loss_atr_multiplier
            tp_multiplier = self.config.exit.take_profit_atr_multiplier

        stop_distance = atr * sl_multiplier
        profit_distance = atr * tp_multiplier

        if side == OrderSide.BUY:
            stop_loss = entry_price - stop_distance
            take_profit = entry_price + profit_distance
        else:
            stop_loss = entry_price + stop_distance
            take_profit = entry_price - profit_distance

        return stop_loss, take_profit

    async def _get_atr(self, symbol: str, market_data) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å ATR –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            from src.indicators import IndicatorManager

            indicators_mgr = IndicatorManager()
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            indicators = indicators_mgr.calculate_all(market_data)
            atr_result = indicators.get("ATR")
            return atr_result.value if atr_result else None
        except Exception as e:
            logger.error(f"‚ùå Failed to get ATR: {e}")
            return None
