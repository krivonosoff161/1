"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∑–∞–π–º–∞–º–∏
"""

import asyncio
import sys

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.okx_client import OKXClient


async def debug_balance_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    config = load_config()
    okx_config = config.api["okx"]

    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–û–ú")
    logger.info("=" * 50)

    async with OKXClient(okx_config) as client:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            logger.info("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ë–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê:")
            balance_data = await client.get_balance("USDT")
            logger.info(f"   USDT Balance: {balance_data}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            logger.info("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ï–ú–ù–´–• –°–†–ï–î–°–¢–í:")
            borrowed_btc = await client.get_borrowed_balance("BTC")
            borrowed_usdt = await client.get_borrowed_balance("USDT")
            logger.info(f"   BTC Borrowed: {borrowed_btc}")
            logger.info(f"   USDT Borrowed: {borrowed_usdt}")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            logger.info("\n3Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–°:")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                result = await client._make_request("GET", "/account/balance")
                if result and result.get("data"):
                    for account in result["data"]:
                        logger.info(f"   Account: {account.get('totalEq', 'N/A')} USDT")
                        for detail in account.get("details", []):
                            if float(detail.get("eq", 0)) > 0:
                                logger.info(
                                    f"     {detail['ccy']}: {detail['eq']} (Available: {detail['availBal']})"
                                )
                                if float(detail.get("liab", 0)) > 0:
                                    logger.warning(
                                        f"     ‚ö†Ô∏è LIABILITY: {detail['liab']}"
                                    )
            except Exception as e:
                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            logger.info("\n4Ô∏è‚É£ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò:")
            try:
                result = await client._make_request("GET", "/account/config")
                if result and result.get("data"):
                    for config_item in result["data"]:
                        logger.info(
                            f"   Account Level: {config_item.get('acctLv', 'N/A')}"
                        )
                        logger.info(
                            f"   Position Mode: {config_item.get('posMode', 'N/A')}"
                        )
                        logger.info(
                            f"   Auto Loan: {config_item.get('autoLoan', 'N/A')}"
                        )
            except Exception as e:
                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            logger.info("\n5Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê:")
            try:
                result = await client._make_request(
                    "GET",
                    "/trade/orders-history",
                    params={"instType": "SPOT", "limit": 5},
                )
                if result and result.get("data"):
                    for order in result["data"]:
                        logger.info(
                            f"   {order['instId']} {order['side']} {order['sz']} @ {order.get('avgPx', 'N/A')} - {order['state']}"
                        )
            except Exception as e:
                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")


if __name__ == "__main__":
    asyncio.run(debug_balance_issue())
