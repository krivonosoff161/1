"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
WebSocket + Batch + Maker + AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def test_bot_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üöÄ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–û–¢–ê")
    print("=" * 50)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º BotRunner
        bot = BotRunner(config, mode="rest")
        print("‚úÖ BotRunner —Å–æ–∑–¥–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        await bot.initialize()
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")

        # WebSocket
        if hasattr(bot.strategy, "ws_initialized"):
            print(f"   WebSocket: {'‚úÖ' if bot.strategy.ws_initialized else '‚ùå'}")
        else:
            print("   WebSocket: ‚ö™ (–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")

        # Batch Manager
        if hasattr(bot.strategy.position_manager, "batch_manager"):
            batch_stats = bot.strategy.position_manager.get_batch_stats()
            print(f"   Batch Manager: ‚úÖ (pending: {batch_stats['pending_updates']})")
        else:
            print("   Batch Manager: ‚ùå")

        # Maker Strategy
        if hasattr(bot.strategy.order_executor, "_try_maker_order"):
            print("   Maker Strategy: ‚úÖ")
        else:
            print("   Maker Strategy: ‚ùå")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")

        # ARM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if hasattr(bot.strategy.modules, "get") and bot.strategy.modules.get("arm"):
            arm = bot.strategy.modules.get("arm")
            print(f"   ARM: ‚úÖ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤ —á–µ—Ä–µ–∑ config
            try:
                arm_config = bot.strategy.config.adaptive_regime
                trending = arm_config["trending"]
                ranging = arm_config["ranging"]
                choppy = arm_config["choppy"]

                print(
                    f"   TRENDING: Score {trending['min_score_threshold']}, "
                    f"TP {trending['tp_atr_multiplier']}, "
                    f"Time {trending['max_holding_minutes']} –º–∏–Ω"
                )

                print(
                    f"   RANGING: Score {ranging['min_score_threshold']}, "
                    f"TP {ranging['tp_atr_multiplier']}, "
                    f"Time {ranging['max_holding_minutes']} –º–∏–Ω"
                )

                print(
                    f"   CHOPPY: Score {choppy['min_score_threshold']}, "
                    f"TP {choppy['tp_atr_multiplier']}, "
                    f"Time {choppy['max_holding_minutes']} –º–∏–Ω"
                )
            except Exception as e:
                print(f"   ARM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ‚ö†Ô∏è {e}")
        else:
            print("   ARM: ‚ùå")

        # Balance Profiles
        try:
            balance_config = config.scalping.balance_profiles
            print(f"\nüí∞ Balance Profiles:")
            for profile_name, profile in balance_config.items():
                print(
                    f"   {profile_name.upper()}: ${profile['base_position_usd']} base, "
                    f"{profile['max_open_positions']} max positions, "
                    f"{profile['max_position_percent']}% max"
                )
        except Exception as e:
            print(f"   Balance Profiles: ‚ö†Ô∏è {e}")

        # Cleanup
        await bot.shutdown()
        print("\n‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def test_parameter_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüîç –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 50)

    try:
        config = load_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤
        try:
            arm_config = config.scalping.adaptive_regime

            print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∂–∏–º–æ–≤:")

            for regime_name in ["trending", "ranging", "choppy"]:
                regime = arm_config[regime_name]

                print(f"\n   {regime_name.upper()}:")
                print(
                    f"     Score: {regime['min_score_threshold']}/12 ({regime['min_score_threshold']/12*100:.0f}%)"
                )
                print(f"     TP: {regime['tp_atr_multiplier']}x ATR")
                print(f"     SL: {regime['sl_atr_multiplier']}x ATR")
                print(f"     Time: {regime['max_holding_minutes']} –º–∏–Ω")
                print(f"     PH: {regime['ph_threshold']*100:.0f}% –æ—Ç TP")

                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if (
                    regime["min_score_threshold"] < 3
                    or regime["min_score_threshold"] > 7
                ):
                    print(f"     ‚ö†Ô∏è Score threshold –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 3-7")

                if (
                    regime["tp_atr_multiplier"] < 0.5
                    or regime["tp_atr_multiplier"] > 1.0
                ):
                    print(f"     ‚ö†Ô∏è TP multiplier –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0.5-1.0")

                if (
                    regime["max_holding_minutes"] < 5
                    or regime["max_holding_minutes"] > 15
                ):
                    print(f"     ‚ö†Ô∏è Holding time –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 5-15 –º–∏–Ω")
        except Exception as e:
            print(f"   ARM Config: ‚ö†Ô∏è {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º balance profiles
        try:
            print(f"\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ Balance Profiles:")

            for profile_name, profile in config.scalping.balance_profiles.items():
                print(f"   {profile_name.upper()}:")
                print(f"     Base: ${profile['base_position_size']}")
                print(
                    f"     Range: ${profile['min_position_size']}-${profile['max_position_size']}"
                )
                print(f"     Max positions: {profile['max_open_positions']}")
                print(f"     Max %: {profile['max_position_percent']}%")

                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if profile["min_position_size"] > profile["base_position_size"]:
                    print(f"     ‚ö†Ô∏è Min size > base size")

                if profile["base_position_size"] > profile["max_position_size"]:
                    print(f"     ‚ö†Ô∏è Base size > max size")
        except Exception as e:
            print(f"   Balance Profiles: ‚ö†Ô∏è {e}")

        print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


async def test_improvements_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 50)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π:")

        # 1. WebSocket Entry
        if hasattr(bot.strategy.order_executor, "market_ws"):
            print("   ‚úÖ WebSocket Order Executor –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("   ‚ùå WebSocket Order Executor –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # 2. Batch Amend
        if hasattr(bot.strategy.position_manager, "batch_manager"):
            print("   ‚úÖ Batch Order Manager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("   ‚ùå Batch Order Manager –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # 3. Maker Strategy
        if hasattr(bot.strategy.order_executor, "_try_maker_order"):
            print("   ‚úÖ Maker-First Strategy –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("   ‚ùå Maker-First Strategy –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # 4. AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            arm_config = bot.strategy.config.adaptive_regime
            trending = arm_config["trending"]
            if trending["min_score_threshold"] == 4:
                print("   ‚úÖ AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            else:
                print("   ‚ö†Ô∏è AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"   AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å: ‚ö†Ô∏è {e}")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")

        # WebSocket + Batch
        if hasattr(bot.strategy.order_executor, "market_ws") and hasattr(
            bot.strategy.position_manager, "batch_manager"
        ):
            print("   ‚úÖ WebSocket + Batch: —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        else:
            print("   ‚ùå WebSocket + Batch: –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")

        # Batch + Maker
        if hasattr(bot.strategy.position_manager, "batch_manager") and hasattr(
            bot.strategy.order_executor, "_try_maker_order"
        ):
            print("   ‚úÖ Batch + Maker: —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        else:
            print("   ‚ùå Batch + Maker: –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")

        # Maker + WebSocket
        if hasattr(bot.strategy.order_executor, "_try_maker_order") and hasattr(
            bot.strategy.order_executor, "market_ws"
        ):
            print("   ‚úÖ Maker + WebSocket: —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        else:
            print("   ‚ùå Maker + WebSocket: –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã")

        await bot.shutdown()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê")
    print("=" * 70)
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: WebSocket + Batch + Maker + AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å")
    print("=" * 70)

    results = {}

    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    results["initialization"] = await test_bot_initialization()

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    results["validation"] = await test_parameter_validation()

    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    results["integration"] = await test_improvements_integration()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    if results["initialization"]:
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –û–®–ò–ë–ö–ê")

    if results["validation"]:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –û–®–ò–ë–ö–ê")

    if results["integration"]:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π: –û–®–ò–ë–ö–ê")

    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = all(results.values())

    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å –Ω–æ–≤—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!")
        print("\nüìà –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ WebSocket: +20-30% —Å–∫–æ—Ä–æ—Å—Ç–∏")
        print("   ‚Ä¢ Batch: -90% API calls")
        print("   ‚Ä¢ Maker: -20% –∫–æ–º–∏—Å—Å–∏–π")
        print("   ‚Ä¢ AI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: +40-50% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –°—É–º–º–∞—Ä–Ω–æ: +60-80% –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

    print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 70)


if __name__ == "__main__":
    asyncio.run(main())
