#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Batch API
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def debug_batch_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Batch API"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BATCH API")
    print("=" * 60)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
            print("\n1Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò API:")
            print("-" * 30)
            print(f"   API Key: {client.api_key[:10]}...")
            print(f"   Secret: {client.api_secret[:10]}...")
            print(f"   Passphrase: {client.passphrase}")
            print(f"   Base URL: {client.base_url}")
            print(f"   Sandbox: {client.sandbox}")

            # 2. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            print("\n2Ô∏è‚É£ –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û –ó–ê–ü–†–û–°–ê:")
            print("-" * 30)
            try:
                account_config = await client.get_account_config()
                print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   Account Level: {account_config.get('acctLv')}")
                print(f"   Position Mode: {account_config.get('posMode')}")
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                return

            # 3. –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            print("\n3Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê:")
            print("-" * 30)
            try:
                test_order = await client.place_order(
                    inst_id="BTC-USDT",
                    side="buy",
                    order_type="LIMIT",
                    quantity="0.0001",
                    price="50000",
                    post_only=True,
                )
                if test_order.get("data"):
                    order_id = test_order["data"][0]["ordId"]
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")

                    # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                    await client.cancel_order("BTC-USDT", order_id)
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
                return

            # 4. –¢–µ—Å—Ç batch amend —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print("\n4Ô∏è‚É£ –¢–ï–°–¢ BATCH AMEND:")
            print("-" * 30)
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                test_order = await client.place_order(
                    inst_id="BTC-USDT",
                    side="buy",
                    order_type="LIMIT",
                    quantity="0.0001",
                    price="50000",
                    post_only=True,
                )

                if test_order.get("data"):
                    order_id = test_order["data"][0]["ordId"]
                    print(f"   –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {order_id}")

                    # –¢–µ—Å—Ç batch amend
                    test_batch = [
                        {"instId": "BTC-USDT", "ordId": order_id, "newPx": "51000"}
                    ]

                    print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch amend...")
                    result = await client.batch_amend_orders(test_batch)
                    print(f"   Batch result: {result}")

                    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                    await client.cancel_order("BTC-USDT", order_id)
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")

                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä")

            except Exception as e:
                print(f"‚ùå Batch amend –æ—à–∏–±–∫–∞: {e}")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if "APIKey does not match current environment" in str(e):
                    print("\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–ö–ò:")
                    print("   –ü—Ä–æ–±–ª–µ–º–∞: API –∫–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–¥—ã")
                    print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   1. API –∫–ª—é—á –¥–ª—è live, –∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ sandbox")
                    print("   2. API –∫–ª—é—á –¥–ª—è sandbox, –∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ live")
                    print("   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ sandbox —Ä–µ–∂–∏–º–∞")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í:")
                    print(f"   x-simulated-trading: 1 (sandbox)")
                    print(f"   Base URL: {client.base_url}")
                    print(f"   Sandbox: {client.sandbox}")

                    if client.sandbox:
                        print("   ‚úÖ Sandbox —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
                        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: API –∫–ª—é—á –Ω–µ –¥–ª—è sandbox")
                    else:
                        print("   ‚ùå Sandbox —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")
                        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–µ–Ω sandbox API –∫–ª—é—á")

            # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è sandbox")
            print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ sandbox: true –≤ config.yaml")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("4. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫–ª—é—á–∏—Ç—å batch amend –¥–ª—è –¥–µ–º–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_batch_detailed())
