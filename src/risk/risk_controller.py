"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∏—Å–∫–æ–≤.

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ daily loss/profit limits
- Consecutive losses tracking
- Extended cooldown
- Emergency stop conditions
"""

import asyncio
from datetime import datetime
from typing import Dict, Tuple

from loguru import logger

from src.models import Position


class RiskController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∏—Å–∫–æ–≤.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π.
    """

    def __init__(
        self, config, risk_config, adaptive_regime=None, telegram_notifier=None
    ):
        """
        Args:
            config: Scalping –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            risk_config: Risk –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            adaptive_regime: ARM –º–æ–¥—É–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            telegram_notifier: Telegram notifier (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config = config
        self.risk_config = risk_config
        self.adaptive_regime = adaptive_regime
        self.telegram = telegram_notifier

        # –õ–∏–º–∏—Ç—ã
        self.max_consecutive_losses = 10  # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: 3‚Üí10 (–¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞!)
        self.max_daily_loss_percent = risk_config.max_daily_loss_percent
        self.daily_profit_target_percent = 5.0  # –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏
        self.max_open_positions = risk_config.max_open_positions

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.consecutive_losses = 0
        self.last_trade_time = {}
        self.trade_count_hourly = 0
        self.hourly_reset_time = datetime.utcnow()

        logger.info(
            f"‚úÖ RiskController initialized | "
            f"Max consecutive losses: {self.max_consecutive_losses} | "
            f"Max daily loss: {self.max_daily_loss_percent}% | "
            f"Telegram: {'ON' if self.telegram and self.telegram.enabled else 'OFF'}"
        )

    def can_trade(
        self, symbol: str, current_positions: Dict[str, Position], stats: Dict
    ) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        1. Max –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        2. Daily loss limit
        3. Daily profit target (lock profits)
        4. Consecutive losses
        5. Extended cooldown
        6. Hourly trade limit (ARM)
        7. Cooldown –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            current_positions: –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        Returns:
            (bool: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, str: –ø—Ä–∏—á–∏–Ω–∞)
        """

        # 1. Max –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if len(current_positions) >= self.max_open_positions:
            return False, f"Max open positions ({self.max_open_positions})"

        # 2. Daily loss limit
        daily_pnl = stats.get("daily_pnl", 0.0)
        start_balance = stats.get("start_balance", 1000.0)

        if start_balance > 0:
            daily_loss_percent = (daily_pnl / start_balance) * 100

            if daily_loss_percent <= -self.max_daily_loss_percent:
                return (
                    False,
                    f"Daily loss limit ({daily_loss_percent:.2f}% <= -{self.max_daily_loss_percent}%)",
                )

        # 3. Daily profit target (—Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏)
        if start_balance > 0:
            daily_profit_percent = (daily_pnl / start_balance) * 100

            if daily_profit_percent >= self.daily_profit_target_percent:
                return (
                    False,
                    f"Daily profit target reached ({daily_profit_percent:.2f}% >= {self.daily_profit_target_percent}%)",
                )

        # 4. Consecutive losses
        if self.consecutive_losses >= self.max_consecutive_losses:
            return (
                False,
                f"Max consecutive losses ({self.consecutive_losses}/{self.max_consecutive_losses})",
            )

        # 5. Extended cooldown (–ø–æ—Å–ª–µ 2+ —É–±—ã—Ç–∫–æ–≤)
        if self.consecutive_losses >= 2:
            extended_cooldown_minutes = 15
            last_trade = self.last_trade_time.get(symbol)

            if last_trade:
                time_since_last = (datetime.utcnow() - last_trade).total_seconds() / 60

                if time_since_last < extended_cooldown_minutes:
                    remaining = extended_cooldown_minutes - time_since_last
                    return (
                        False,
                        f"Extended cooldown active ({remaining:.1f} min remaining)",
                    )

        # 6. Hourly trade limit (ARM)
        max_trades_per_hour = self.config.max_trades_per_hour

        if self.adaptive_regime:
            regime_params = self.adaptive_regime.get_current_parameters()
            max_trades_per_hour = regime_params.max_trades_per_hour

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        if (datetime.utcnow() - self.hourly_reset_time).total_seconds() >= 3600:
            self.trade_count_hourly = 0
            self.hourly_reset_time = datetime.utcnow()

        if self.trade_count_hourly >= max_trades_per_hour:
            return (
                False,
                f"Hourly trade limit ({self.trade_count_hourly}/{max_trades_per_hour})",
            )

        # 7. üî• –ö–£–õ–î–ê–£–ù –£–ë–†–ê–ù! –¢–µ–ø–µ—Ä—å —Ç–æ—Ä–≥—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–µ–∑ –ø–∞—É–∑!
        # –ü—Ä–∏—á–∏–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
        # –†–µ—à–µ–Ω–∏–µ: —É–±—Ä–∞—Ç—å –∫—É–ª–¥–∞—É–Ω, –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ hourly trade limit (ARM)

        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        return True, "OK"

    def record_trade_opened(self, symbol: str):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏.

        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Ç–∞–π–º—Å—Ç–∞–º–ø—ã.
        """
        self.last_trade_time[symbol] = datetime.utcnow()
        self.trade_count_hourly += 1

    def record_trade_closed(self, net_pnl: float):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏.

        –û–±–Ω–æ–≤–ª—è–µ—Ç consecutive_losses —Å—á–µ—Ç—á–∏–∫.

        Args:
            net_pnl: NET PnL —Å–¥–µ–ª–∫–∏
        """
        if net_pnl < 0:
            self.consecutive_losses += 1
            logger.warning(
                f"üìâ Loss #{self.consecutive_losses} of {self.max_consecutive_losses}"
            )

            # Telegram alert –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if self.consecutive_losses >= self.max_consecutive_losses:
                if self.telegram:
                    asyncio.create_task(
                        self.telegram.send_consecutive_losses_alert(
                            self.consecutive_losses, self.max_consecutive_losses
                        )
                    )
        else:
            if self.consecutive_losses > 0:
                logger.info(
                    f"‚úÖ Win! Consecutive losses reset: {self.consecutive_losses} ‚Üí 0"
                )
            self.consecutive_losses = 0

    def should_emergency_stop(self, stats: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        """
        # Max consecutive losses
        if self.consecutive_losses >= self.max_consecutive_losses:
            logger.error(
                f"üõë EMERGENCY STOP: Max consecutive losses reached "
                f"({self.consecutive_losses}/{self.max_consecutive_losses})"
            )

            # Telegram alert
            if self.telegram:
                asyncio.create_task(
                    self.telegram.send_emergency_stop_alert(
                        f"Max consecutive losses: {self.consecutive_losses}/{self.max_consecutive_losses}"
                    )
                )

            return True

        # Critical daily loss
        daily_pnl = stats.get("daily_pnl", 0.0)
        start_balance = stats.get("start_balance", 1000.0)

        if start_balance > 0:
            daily_loss_percent = (daily_pnl / start_balance) * 100

            if daily_loss_percent <= -(
                self.max_daily_loss_percent * 1.5
            ):  # 1.5x –∫—Ä–∏—Ç–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                logger.error(
                    f"üõë EMERGENCY STOP: Critical daily loss "
                    f"({daily_loss_percent:.2f}% <= -{self.max_daily_loss_percent * 1.5}%)"
                )

                # Telegram alert
                if self.telegram:
                    asyncio.create_task(
                        self.telegram.send_daily_loss_alert(
                            daily_loss_percent,
                            self.max_daily_loss_percent * 1.5,
                            start_balance + daily_pnl,
                        )
                    )

                return True

        return False

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Å–∫–æ–≤"""
        return {
            "consecutive_losses": self.consecutive_losses,
            "max_consecutive_losses": self.max_consecutive_losses,
            "trade_count_hourly": self.trade_count_hourly,
            "hourly_reset_time": self.hourly_reset_time.isoformat(),
        }
