#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

import os
import re
from collections import Counter
from pathlib import Path


def analyze_log_file(filepath):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ª–æ–≥-—Ñ–∞–π–ª"""
    stats = {
        "adx_blocks": 0,
        "mtf_blocks": 0,
        "signals_strong": 0,
        "positions_opened": 0,
        "positions_closed": 0,
        "profit_harvesting": 0,
        "errors": 0,
        "adx_params": [],
        "ph_params": [],
    }

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            for line in f:
                # ADX –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if "ADX BLOCKED" in line:
                    stats["adx_blocks"] += 1
                    # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "need +DI > -DI + X"
                    match = re.search(r"need \+DI > -DI \+ ([\d.]+)", line)
                    if match:
                        stats["adx_params"].append(float(match.group(1)))

                # MTF –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if "MTF BLOCKED" in line or "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" in line:
                    stats["mtf_blocks"] += 1

                # –°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if "SIGNAL STRONG" in line or "SIGNAL GENERATED" in line:
                    stats["signals_strong"] += 1

                # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if "POSITION OPENED" in line or "–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞" in line:
                    stats["positions_opened"] += 1

                # –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if "POSITION CLOSED" in line or "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞" in line:
                    stats["positions_closed"] += 1

                # Profit Harvesting
                if "PROFIT HARVESTING" in line or "Profit harvesting" in line:
                    stats["profit_harvesting"] += 1

                # –û—à–∏–±–∫–∏
                if "ERROR" in line or "CRITICAL" in line:
                    stats["errors"] += 1

                # ADX –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if "ADX Filter initialized" in line:
                    match = re.search(r"DI diff: ([\d.]+)", line)
                    if match:
                        stats["adx_params"].append(float(match.group(1)))

                # PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if "Threshold: $" in line:
                    match = re.search(r"Threshold: \$([\d.]+)", line)
                    if match:
                        stats["ph_params"].append(float(match.group(1)))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filepath}: {e}")

    return stats


def main():
    logs_dir = Path("logs/temp_analysis")

    if not logs_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    all_stats = {
        "adx_blocks": 0,
        "mtf_blocks": 0,
        "signals_strong": 0,
        "positions_opened": 0,
        "positions_closed": 0,
        "profit_harvesting": 0,
        "errors": 0,
        "adx_params": [],
        "ph_params": [],
    }

    log_files = sorted(logs_dir.glob("*.log"))

    if not log_files:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ {logs_dir}")
        return

    print("=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 80)
    print()

    for log_file in log_files:
        print(f"üìÑ –ê–Ω–∞–ª–∏–∑: {log_file.name}")
        stats = analyze_log_file(log_file)

        # –°—É–º–º–∏—Ä—É–µ–º
        for key in all_stats:
            if isinstance(all_stats[key], list):
                all_stats[key].extend(stats[key])
            else:
                all_stats[key] += stats[key]

        print(f"   ADX –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['adx_blocks']}")
        print(f"   MTF –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['mtf_blocks']}")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {stats['positions_opened']}")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {stats['positions_closed']}")
        if stats["adx_params"]:
            print(f"   ADX –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {set(stats['adx_params'])}")
        if stats["ph_params"]:
            print(f"   PH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${set(stats['ph_params'])}")
        print()

    print("=" * 80)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    print()
    print(f"üö´ ADX –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {all_stats['adx_blocks']}")
    print(f"üö´ MTF –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {all_stats['mtf_blocks']}")
    print(f"üìä –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {all_stats['signals_strong']}")
    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {all_stats['positions_opened']}")
    print(f"üèÅ –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {all_stats['positions_closed']}")
    print(f"‚ú® Profit Harvesting: {all_stats['profit_harvesting']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {all_stats['errors']}")
    print()

    if all_stats["adx_params"]:
        adx_counter = Counter(all_stats["adx_params"])
        print(f"üîß ADX –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (DI diff):")
        for param, count in adx_counter.most_common():
            print(f"   {param} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {count} —Ä–∞–∑(–∞)")
        print()

    if all_stats["ph_params"]:
        ph_counter = Counter(all_stats["ph_params"])
        print(f"üí∞ Profit Harvesting –ø–æ—Ä–æ–≥–∏:")
        for param, count in ph_counter.most_common():
            print(f"   ${param} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {count} —Ä–∞–∑(–∞)")
        print()

    print("=" * 80)


if __name__ == "__main__":
    main()
