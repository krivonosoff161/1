"""
Correlation Filter Module

–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏,
–∏–∑–±–µ–≥–∞—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö.

–¶–µ–ª—å: –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø—É—Ç–µ–º –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

from typing import Dict, List, Optional

from loguru import logger
from pydantic import BaseModel, Field

from src.filters.correlation_manager import CorrelationConfig, CorrelationManager
from src.models import Position, PositionSide
from src.okx_client import OKXClient


class CorrelationFilterConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Correlation —Ñ–∏–ª—å—Ç—Ä–∞"""

    enabled: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")

    max_correlated_positions: int = Field(
        default=1,
        ge=1,
        le=3,
        description="–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
    )

    correlation_threshold: float = Field(
        default=0.7,
        ge=0.5,
        le=1.0,
        description="–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (>0.7 = –±–ª–æ–∫–∏—Ä—É–µ–º)",
    )

    block_same_direction_only: bool = Field(
        default=True,
        description="–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç (LONG+LONG)",
    )


class CorrelationFilterResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Correlation —Ñ–∏–ª—å—Ç—Ä–∞"""

    allowed: bool = Field(description="–†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –≤—Ö–æ–¥")
    blocked: bool = Field(description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤—Ö–æ–¥")
    reason: str = Field(description="–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è")
    correlated_positions: List[str] = Field(
        default_factory=list, description="–°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    )
    correlation_values: Dict[str, float] = Field(
        default_factory=dict, description="–ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"
    )


class CorrelationFilter:
    """
    –§–∏–ª—å—Ç—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    –≤ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö.

    Example:
        >>> config = CorrelationFilterConfig(correlation_threshold=0.7)
        >>> filter = CorrelationFilter(client, config, ["BTC-USDT", "ETH-USDT"])
        >>> result = await filter.check_entry(
        ...     "ETH-USDT", "LONG", current_positions
        ... )
        >>> if result.blocked:
        ...     logger.warning(f"Entry blocked: {result.reason}")
    """

    def __init__(
        self,
        client: OKXClient,
        config: CorrelationFilterConfig,
        all_symbols: List[str],
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Correlation —Ñ–∏–ª—å—Ç—Ä–∞.

        Args:
            client: OKX API –∫–ª–∏–µ–Ω—Ç
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
            all_symbols: –í—Å–µ —Ç–æ—Ä–≥—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        """
        self.client = client
        self.config = config
        self.all_symbols = all_symbols

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Correlation Manager
        corr_manager_config = CorrelationConfig(
            lookback_candles=100,
            timeframe="5m",
            cache_ttl_seconds=300,
            high_correlation_threshold=config.correlation_threshold,
        )
        self.correlation_manager = CorrelationManager(client, corr_manager_config)

        logger.info(
            f"Correlation Filter initialized: threshold={config.correlation_threshold}, "
            f"max_positions={config.max_correlated_positions}, "
            f"same_direction_only={config.block_same_direction_only}"
        )

    async def check_entry(
        self,
        symbol: str,
        signal_side: str,
        current_positions: Dict[str, Position],
    ) -> CorrelationFilterResult:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π.

        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –≤—Ö–æ–¥–∞
            signal_side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ("LONG" –∏–ª–∏ "SHORT")
            current_positions: –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol: Position}

        Returns:
            CorrelationFilterResult —Å —Ä–µ—à–µ–Ω–∏–µ–º

        Example:
            >>> result = await filter.check_entry(
            ...     "ETH-USDT", "LONG", {"BTC-USDT": btc_position}
            ... )
            >>> if result.blocked:
            ...     logger.info(f"Blocked: {result.reason}")
        """
        if not self.config.enabled:
            return CorrelationFilterResult(
                allowed=True,
                blocked=False,
                reason="Correlation filter disabled",
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π - —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if not current_positions:
            return CorrelationFilterResult(
                allowed=True,
                blocked=False,
                reason="No open positions",
            )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            correlated_positions = []
            correlation_values = {}

            for open_symbol, position in current_positions.items():
                if open_symbol == symbol:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –ø–∞—Ä—É

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                corr_data = await self.correlation_manager.get_correlation(
                    symbol, open_symbol
                )

                if not corr_data:
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                correlation_values[open_symbol] = corr_data.correlation

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                if abs(corr_data.correlation) >= self.config.correlation_threshold:
                    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                    if self.config.block_same_direction_only:
                        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
                        position_direction = (
                            "LONG"
                            if position.side == PositionSide.LONG
                            else "SHORT"
                        )
                        if signal_side == position_direction:
                            correlated_positions.append(open_symbol)
                            logger.debug(
                                f"Correlation Filter: {symbol} {signal_side} correlated with "
                                f"{open_symbol} {position_direction} ({corr_data.correlation:.2f})"
                            )
                    else:
                        # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        correlated_positions.append(open_symbol)
                        logger.debug(
                            f"Correlation Filter: {symbol} correlated with "
                            f"{open_symbol} ({corr_data.correlation:.2f})"
                        )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if len(correlated_positions) >= self.config.max_correlated_positions:
                logger.warning(
                    f"üö´ Correlation Filter BLOCKED: {symbol} {signal_side}\n"
                    f"   Correlated positions: {correlated_positions}\n"
                    f"   Correlations: {correlation_values}\n"
                    f"   Max allowed: {self.config.max_correlated_positions}"
                )
                return CorrelationFilterResult(
                    allowed=False,
                    blocked=True,
                    reason=f"Too many correlated positions ({len(correlated_positions)}/{self.config.max_correlated_positions})",
                    correlated_positions=correlated_positions,
                    correlation_values=correlation_values,
                )

            # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥
            if correlated_positions:
                logger.info(
                    f"‚úÖ Correlation Filter ALLOWED: {symbol} {signal_side}\n"
                    f"   Correlated: {correlated_positions} (within limit)\n"
                    f"   Correlations: {correlation_values}"
                )
            else:
                logger.info(
                    f"‚úÖ Correlation Filter ALLOWED: {symbol} {signal_side} (no correlations)"
                )

            return CorrelationFilterResult(
                allowed=True,
                blocked=False,
                reason=f"Correlated positions: {len(correlated_positions)}/{self.config.max_correlated_positions}",
                correlated_positions=correlated_positions,
                correlation_values=correlation_values,
            )

        except Exception as e:
            logger.error(
                f"Correlation Filter error for {symbol}: {e}", exc_info=True
            )
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º (fail-safe)
            return CorrelationFilterResult(
                allowed=True,
                blocked=False,
                reason=f"Error (fail-safe): {str(e)}",
            )

    async def preload_correlations(self):
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.

        –ü–æ–ª–µ–∑–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—ç—à–∞.
        """
        logger.info("Preloading correlations for all symbols...")
        correlations = await self.correlation_manager.get_all_correlations(
            self.all_symbols
        )
        logger.info(f"Preloaded {len(correlations)} correlations")

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        for (pair1, pair2), corr_data in correlations.items():
            if corr_data.is_strong:
                logger.info(
                    f"  Strong correlation: {pair1}/{pair2} = {corr_data.correlation:.3f}"
                )

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞"""
        cache_stats = self.correlation_manager.get_cache_stats()
        return {
            "enabled": self.config.enabled,
            "threshold": self.config.correlation_threshold,
            "max_positions": self.config.max_correlated_positions,
            **cache_stats,
        }

