"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys

sys.path.insert(0, "C:\\Users\\krivo\\simple trading bot okx")

from src.balance import (AdaptiveBalanceManager, BalanceProfile,
                         create_default_profiles)


def test_balance_manager():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üß™ Testing Adaptive Balance Manager...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    profiles = create_default_profiles()
    manager = AdaptiveBalanceManager(profiles)

    # –¢–µ—Å—Ç 1: Small –ø—Ä–æ—Ñ–∏–ª—å
    print("üìä Test 1: Small profile")
    manager.update_balance(500.0)
    assert manager.current_profile == BalanceProfile.SMALL
    print(f"‚úÖ Small profile: {manager.current_profile}")

    # –¢–µ—Å—Ç 2: Medium –ø—Ä–æ—Ñ–∏–ª—å
    print("üìä Test 2: Medium profile")
    manager.update_balance(3000.0)
    assert manager.current_profile == BalanceProfile.MEDIUM
    print(f"‚úÖ Medium profile: {manager.current_profile}")

    # –¢–µ—Å—Ç 3: Large –ø—Ä–æ—Ñ–∏–ª—å
    print("üìä Test 3: Large profile")
    manager.update_balance(4000.0)
    assert manager.current_profile == BalanceProfile.LARGE
    print(f"‚úÖ Large profile: {manager.current_profile}")

    # –¢–µ—Å—Ç 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("üìä Test 4: Parameter adaptation")
    regime_params = {
        "tp_multiplier": 2.0,
        "sl_multiplier": 1.5,
        "ph_threshold": 0.5,
        "score_threshold": 4.0,
        "max_trades_per_hour": 10,
    }

    adapted = manager.apply_to_regime_params(regime_params, "trending")
    print(
        f"‚úÖ Adapted TP: {adapted['tp_multiplier']} (was {regime_params['tp_multiplier']})"
    )
    print(
        f"‚úÖ Adapted SL: {adapted['sl_multiplier']} (was {regime_params['sl_multiplier']})"
    )

    # –¢–µ—Å—Ç 5: –†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
    print("üìä Test 5: Position sizing")
    sizing_params = manager.get_position_sizing_params()
    print(f"‚úÖ Base position size: {sizing_params['base_position_size']}")
    print(f"‚úÖ Max open positions: {sizing_params['max_open_positions']}")

    # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä Test 6: Statistics")
    stats = manager.get_balance_stats()
    print(f"‚úÖ Current balance: {stats['current_balance']}")
    print(f"‚úÖ Current profile: {stats['current_profile']}")
    print(f"‚úÖ Profile switches: {stats['profile_switches_count']}")

    print("üéâ All balance manager tests passed!")


def test_balance_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebSocket Orchestrator"""
    print("\nüß™ Testing Balance + WebSocket Integration...")

    try:
        from unittest.mock import Mock

        from src.config import APIConfig, BotConfig, RiskConfig, ScalpingConfig
        from src.okx_client import OKXClient
        from src.strategies.scalping.websocket_orchestrator import \
            WebSocketScalpingOrchestrator

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        api_config = APIConfig(
            api_key="test_key",
            api_secret="test_secret",
            passphrase="test_passphrase",
            sandbox=True,
        )

        config = BotConfig(
            api={"okx": api_config},
            scalping=ScalpingConfig(),
            risk=RiskConfig(),
            trading={"symbols": ["ETH-USDT"], "base_currency": "USDT"},
            balance_profiles={
                "small": {
                    "threshold": 1000.0,
                    "base_position_size": 50.0,
                    "min_position_size": 25.0,
                    "max_position_size": 100.0,
                    "max_open_positions": 2,
                    "max_position_percent": 10.0,
                    "trending_boost": {
                        "tp_multiplier": 1.2,
                        "sl_multiplier": 0.9,
                        "ph_threshold": 1.1,
                        "score_threshold": 0.9,
                        "max_trades": 1.1,
                    },
                    "ranging_boost": {
                        "tp_multiplier": 1.0,
                        "sl_multiplier": 1.0,
                        "ph_threshold": 1.0,
                        "score_threshold": 1.0,
                        "max_trades": 1.0,
                    },
                    "choppy_boost": {
                        "tp_multiplier": 0.8,
                        "sl_multiplier": 1.2,
                        "ph_threshold": 0.9,
                        "score_threshold": 1.1,
                        "max_trades": 0.8,
                    },
                },
                "medium": {
                    "threshold": 2500.0,
                    "base_position_size": 100.0,
                    "min_position_size": 50.0,
                    "max_position_size": 200.0,
                    "max_open_positions": 3,
                    "max_position_percent": 8.0,
                    "trending_boost": {
                        "tp_multiplier": 1.3,
                        "sl_multiplier": 0.8,
                        "ph_threshold": 1.2,
                        "score_threshold": 0.8,
                        "max_trades": 1.2,
                    },
                    "ranging_boost": {
                        "tp_multiplier": 1.1,
                        "sl_multiplier": 0.9,
                        "ph_threshold": 1.1,
                        "score_threshold": 0.9,
                        "max_trades": 1.1,
                    },
                    "choppy_boost": {
                        "tp_multiplier": 0.9,
                        "sl_multiplier": 1.1,
                        "ph_threshold": 1.0,
                        "score_threshold": 1.0,
                        "max_trades": 0.9,
                    },
                },
                "large": {
                    "threshold": 3500.0,
                    "base_position_size": 200.0,
                    "min_position_size": 100.0,
                    "max_position_size": 500.0,
                    "max_open_positions": 5,
                    "max_position_percent": 6.0,
                    "trending_boost": {
                        "tp_multiplier": 1.5,
                        "sl_multiplier": 0.7,
                        "ph_threshold": 1.3,
                        "score_threshold": 0.7,
                        "max_trades": 1.5,
                    },
                    "ranging_boost": {
                        "tp_multiplier": 1.2,
                        "sl_multiplier": 0.8,
                        "ph_threshold": 1.2,
                        "score_threshold": 0.8,
                        "max_trades": 1.2,
                    },
                    "choppy_boost": {
                        "tp_multiplier": 1.0,
                        "sl_multiplier": 1.0,
                        "ph_threshold": 1.1,
                        "score_threshold": 0.9,
                        "max_trades": 1.0,
                    },
                },
            },
        )

        # –ú–æ–∫–∞–µ–º OKX –∫–ª–∏–µ–Ω—Ç
        mock_client = Mock(spec=OKXClient)

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = WebSocketScalpingOrchestrator(config, mock_client)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert orchestrator.balance_manager is not None
        print("‚úÖ Balance manager initialized in orchestrator")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        orchestrator.balance_manager.update_balance(500.0)
        assert orchestrator.balance_manager.current_profile == BalanceProfile.SMALL
        print("‚úÖ Balance manager working in orchestrator")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = orchestrator.get_stats()
        assert "balance_stats" in stats
        print("‚úÖ Balance stats included in orchestrator stats")

        print("üéâ Balance + WebSocket integration test passed!")

    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ Starting Quick Balance Tests...")

    test_balance_manager()
    test_balance_integration()

    print("\nüéâ All Quick Balance Tests Completed!")
