"""
OKX Exchange API client with corrected signature
"""
import base64
import hashlib
import hmac
import json
import time
from datetime import datetime
from typing import Any, AsyncGenerator, Dict, List, Optional

import aiohttp
from asyncio_throttle import Throttler
from loguru import logger
from tenacity import (retry, retry_if_exception_type, stop_after_attempt,
                      wait_exponential)

from src.config import APIConfig
from src.models import (OHLCV, Balance, Order, OrderSide, OrderStatus,
                        OrderType, Position, PositionSide, Tick, Trade)


class OKXClient:
    """OKX Exchange API client with corrected signature"""

    def __init__(self, config: APIConfig):
        self.config = config
        self.api_key = config.api_key
        self.api_secret = config.api_secret
        self.passphrase = config.passphrase
        self.sandbox = config.sandbox

        # API endpoints - OKX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω URL –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        # –ù–û –¥–ª—è sandbox –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-simulated-trading
        self.base_url = "https://www.okx.com"
        self.session: Optional[aiohttp.ClientSession] = None

        # üî• –ö–†–ò–¢–ò–ß–ù–û: Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–Ω–∞ API –∫–ª—é—á–µ–π
        self.throttler = Throttler(rate_limit=10, period=1)  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

    async def __aenter__(self):
        """Async context manager entry"""
        await self.connect()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.disconnect()

    async def connect(self):
        """Initialize HTTP session"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        logger.info("OKX client connected")

    async def disconnect(self):
        """Close HTTP session"""
        if self.session:
            await self.session.close()
            self.session = None
        logger.info("OKX client disconnected")

    async def get_websocket_latency(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å REST)"""
        try:
            from src.websocket_order_executor import WebSocketOrderExecutor

            ws_executor = WebSocketOrderExecutor(self.config)
            if await ws_executor.connect():
                latency = await ws_executor.get_latency()
                await ws_executor.disconnect()
                return latency
            return float("inf")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return float("inf")

    async def batch_amend_orders(
        self, orders_data: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        Batch amend orders - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ 20 –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω API call

        Args:
            orders_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
            [
                {
                    "instId": "BTC-USDT",
                    "ordId": "123456789",
                    "newSz": "0.001",
                    "newPx": "50000.0"
                },
                ...
            ]

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not orders_data:
            return {"code": "0", "msg": "No orders to amend", "data": []}

        if len(orders_data) > 20:
            logger.warning(
                f"‚ö†Ô∏è Batch amend: {len(orders_data)} orders > 20 limit, splitting..."
            )
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20
            results = []
            for i in range(0, len(orders_data), 20):
                batch = orders_data[i : i + 20]
                result = await self._batch_amend_single(batch)
                results.append(result)
            return {"code": "0", "msg": "Batch completed", "data": results}

        return await self._batch_amend_single(orders_data)

    async def _batch_amend_single(
        self, orders_data: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ batch amend –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ (‚â§20)"""
        try:
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = "/trade/amend-batch-orders"  # ‚úÖ –ë–ï–ó /api/v5 –≤ –ø–æ–¥–ø–∏—Å–∏!

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"Batch amend request: {request_path}")
            logger.debug(f"Orders data: {orders_data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è batch amend
            # OKX batch amend –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            if not isinstance(orders_data, list):
                orders_data = [orders_data]

            # üî• –ö–†–ò–¢–ò–ß–ù–û: OKX batch amend —Ç—Ä–µ–±—É–µ—Ç –æ–±–µ—Ä—Ç–∫—É "data"!
            body = json.dumps({"data": orders_data})

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            signature = self._generate_signature(timestamp, "POST", request_path, body)

            headers = {
                "OK-ACCESS-KEY": self.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": self.passphrase,
                "Content-Type": "application/json",
            }

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º sandbox –∑–∞–≥–æ–ª–æ–≤–æ–∫ –°–†–ê–ó–£
            if self.sandbox:
                headers["x-simulated-trading"] = "1"

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"{self.base_url}/api/v5{request_path}"

            async with self.session.post(url, headers=headers, data=body) as response:
                result = await response.json()

                if result.get("code") == "0":
                    logger.info(f"‚úÖ Batch amend successful: {len(orders_data)} orders")
                else:
                    logger.error(
                        f"‚ùå Batch amend failed: {result.get('msg', 'Unknown error')}"
                    )

                return result

        except Exception as e:
            logger.error(f"‚ùå Batch amend error: {e}")
            return {"code": "1", "msg": str(e), "data": []}

    def _generate_signature(
        self, timestamp: str, method: str, request_path: str, body: str = ""
    ) -> str:
        """
        Generate signature for OKX API authentication.
        Format: timestamp + method.upper() + request_path + body (–ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤)
        """
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –ø—Ä–æ–±–µ–ª–∞, –º–µ—Ç–æ–¥ –≤ UPPERCASE
        message = f"{timestamp}{method.upper()}{request_path}{body}"

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug("Signature components:")
        logger.debug(f"  Timestamp: {timestamp}")
        logger.debug(f"  Method: {method.upper()}")
        logger.debug(f"  Path: {request_path}")
        logger.debug(f"  Body: '{body}'")
        logger.debug(f"  Full message: '{message}'")
        logger.debug(f"  Secret (first 10): {self.api_secret[:10]}...")

        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: OKX Secret Key —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–µ base64!)
        secret_bytes = self.api_secret.encode("utf-8")

        # HMAC-SHA256 + Base64
        message_bytes = message.encode("utf-8")
        sign = hmac.new(secret_bytes, message_bytes, hashlib.sha256).digest()
        signature = base64.b64encode(sign).decode("utf-8")

        logger.debug(f"Generated signature: {signature}")
        return signature

    def _get_headers(
        self, method: str, request_path: str, body: str = ""
    ) -> Dict[str, str]:
        """Get headers for API request"""
        # OKX requires timestamp in ISO 8601 format with milliseconds
        timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
        signature = self._generate_signature(timestamp, method, request_path, body)

        headers = {
            "OK-ACCESS-KEY": self.api_key,
            "OK-ACCESS-SIGN": signature,
            "OK-ACCESS-TIMESTAMP": timestamp,
            "OK-ACCESS-PASSPHRASE": self.passphrase,
            "Content-Type": "application/json",
        }

        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞
        if self.sandbox:
            headers["x-simulated-trading"] = "1"

        return headers

    def _is_private_endpoint(self, endpoint: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        private_endpoints = [
            "/account/",
            "/trade/",
            "/asset/",
            "/users/",
            "/subaccount/",
            "/broker/",
            "/margin/",
            "/futures/",
            "/swap/",
            "/option/",
            "/system/status",  # –≠—Ç–æ—Ç —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
        ]
        return any(endpoint.startswith(ep) for ep in private_endpoints)

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((aiohttp.ClientError, Exception)),
        reraise=True,
    )
    async def _make_request(
        self, method: str, endpoint: str, params: Dict = None, data: Dict = None
    ) -> Dict:
        """Make HTTP request to OKX API"""
        if not self.session:
            await self.connect()

        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –î–õ–Ø OKX: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –° /api/v5 –¥–ª—è –ø–æ–¥–ø–∏—Å–∏!
        full_path = f"/api/v5{endpoint}"

        # ‚úÖ –î–ª—è GET —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ–º query string –≤ –ø–æ–¥–ø–∏—Å—å!
        if params and method.upper() == "GET":
            # ‚úÖ OKX —Ç—Ä–µ–±—É–µ—Ç instType –ü–ï–†–í–´–ú –¥–ª—è trade endpoints!
            if "instType" in params:
                query_parts = [f"instType={params['instType']}"]
                for k, v in sorted(params.items()):
                    if k != "instType":
                        query_parts.append(f"{k}={v}")
                query_string = "&".join(query_parts)
            else:
                query_string = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            full_path = f"/api/v5{endpoint}?{query_string}"

        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ query - –∏—Ö –ø–µ—Ä–µ–¥–∞—ë–º —á–µ—Ä–µ–∑ params)
        url = f"{self.base_url}/api/v5{endpoint}"

        body = json.dumps(data) if data else ""
        # For GET requests, body should be empty
        if method.upper() == "GET":
            body = ""

        # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å query string –≤ –ø–æ–¥–ø–∏—Å—å
        headers = self._get_headers(method, full_path, body)

        # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º sandbox –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.sandbox:
            headers["x-simulated-trading"] = "1"

        # Debug logging (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        logger.debug(f"Request: {method} {endpoint}")
        logger.debug(f"Body: {body}")
        logger.debug(f"Headers: {headers}")

        try:
            # üî• –ö–†–ò–¢–ò–ß–ù–û: Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–Ω–∞ API –∫–ª—é—á–µ–π
            async with self.throttler:
                async with self.session.request(
                    method=method,
                    url=url,
                    headers=headers,
                    params=params,
                    data=body,
                ) as response:
                    result = await response.json()

                    if result.get("code") != "0":
                        logger.error(f"OKX API error: {result}")
                        raise Exception(
                            f"API Error: {result.get('msg', 'Unknown error')}"
                        )

                    return result

        except Exception as e:
            logger.error(f"Request failed: {e}")
            logger.error(f"Failed request details: {method} {endpoint}")
            if params:
                logger.error(f"Params: {params}")
            if data:
                logger.error(f"Data: {data}")
            raise

    async def health_check(self) -> bool:
        """Check if API connection is healthy"""
        try:
            result = await self._make_request("GET", "/system/status")
            return result.get("code") == "0"
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return False

    # Market Data Methods
    async def get_ticker(self, symbol: str) -> Dict:
        """Get ticker information for symbol"""
        params = {"instId": symbol}
        result = await self._make_request("GET", "/market/ticker", params=params)
        return result["data"][0] if result["data"] else {}

    async def get_current_price(self, symbol: str) -> float:
        """
        Get current market price for symbol.

        Args:
            symbol: Trading pair (e.g. "BTC-USDT")

        Returns:
            float: Current last price
        """
        ticker = await self.get_ticker(symbol)
        return float(ticker.get("last", 0))

    async def get_orderbook(self, symbol: str, depth: int = 20) -> Dict:
        """Get order book for symbol"""
        params = {"instId": symbol, "sz": str(depth)}
        result = await self._make_request("GET", "/market/books", params=params)
        return result["data"][0] if result["data"] else {}

    async def get_klines(
        self, symbol: str, timeframe: str = "1m", limit: int = 100
    ) -> List[OHLCV]:
        """Get kline/candlestick data"""
        params = {
            "instId": symbol,
            "bar": timeframe,
            "limit": str(limit),
        }
        result = await self._make_request("GET", "/market/candles", params=params)

        # OKX –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏), –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å
        candles = [
            OHLCV(
                symbol=symbol,
                timestamp=int(candle[0]),
                open=float(candle[1]),
                high=float(candle[2]),
                low=float(candle[3]),
                close=float(candle[4]),
                volume=float(candle[5]),
            )
            for candle in result["data"]
        ]

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—á–∏ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
        return list(reversed(candles))

    async def get_candles(
        self, symbol: str, timeframe: str = "1m", limit: int = 100
    ) -> List[OHLCV]:
        """
        Get candlestick data (alias for get_klines for compatibility).

        Args:
            symbol: Trading pair symbol (e.g., "BTC-USDT")
            timeframe: Candle timeframe (e.g., "1m", "5m", "1H", "1D")
            limit: Number of candles to retrieve (default: 100, max: 300)

        Returns:
            List of OHLCV candles
        """
        return await self.get_klines(symbol, timeframe, limit)

    async def get_recent_trades(self, symbol: str, limit: int = 100) -> List[Trade]:
        """Get recent trades"""
        params = {"instId": symbol, "limit": str(limit)}
        result = await self._make_request("GET", "/market/trades", params=params)

        return [
            Trade(
                id=str(trade["tradeId"]),
                symbol=trade["instId"],
                side=OrderSide.BUY if trade["side"] == "buy" else OrderSide.SELL,
                price=float(trade["px"]),
                quantity=float(trade["sz"]),
                timestamp=int(trade["ts"]),
            )
            for trade in result["data"]
        ]

    # Account Methods
    async def get_account_balance(self) -> List[Balance]:
        """Get account balance"""
        result = await self._make_request("GET", "/account/balance")

        balances = []
        for account in result["data"]:
            for detail in account.get("details", []):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ)
                available = float(detail.get("availBal", 0))
                frozen = float(detail.get("frozenBal", 0))

                if available > 0 or frozen > 0:
                    balances.append(
                        Balance(
                            currency=detail["ccy"],
                            free=available,  # ‚úÖ free –≤–º–µ—Å—Ç–æ available
                            used=frozen,  # ‚úÖ used –≤–º–µ—Å—Ç–æ frozen
                            total=available + frozen,
                        )
                    )

        return balances

    async def get_balance(self, currency: str) -> float:
        """
        Get available balance for specific currency.

        Args:
            currency: Currency code (e.g., "BTC", "ETH", "USDT")

        Returns:
            Available balance amount
        """
        try:
            result = await self._make_request("GET", "/account/balance")

            for account in result["data"]:
                for detail in account.get("details", []):
                    if detail["ccy"] == currency:
                        return float(detail.get("availBal", 0))

            return 0.0
        except Exception as e:
            logger.error(f"Error getting balance for {currency}: {e}")
            return 0.0

    async def get_account_config(self) -> Dict[str, Any]:
        """
        Get account configuration to check trading mode (SPOT vs MARGIN).

        Returns account level:
        - '1' = Simple mode (SPOT only) ‚úÖ
        - '2' = Single-currency margin ‚ùå
        - '3' = Multi-currency margin ‚ùå
        - '4' = Portfolio margin ‚ùå
        """
        try:
            result = await self._make_request("GET", "/account/config")
            if result.get("data"):
                return result["data"][0]
            return {}
        except Exception as e:
            logger.error(f"Error getting account config: {e}")
            return {}

    async def set_trading_mode(self, mode: str = "spot") -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ SPOT.

        Args:
            mode: "spot" –¥–ª—è SPOT —Ä–µ–∂–∏–º–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è sandbox –ù–ï –ú–û–ñ–ï–ú –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏!
            # Sandbox –≤—Å–µ–≥–¥–∞ –≤ SPOT —Ä–µ–∂–∏–º–µ
            if self.sandbox:
                logger.info("üîß Sandbox —Ä–µ–∂–∏–º - SPOT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return True

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è live)
            data = {
                "acctLv": "1",  # Simple mode (SPOT only)
                "posMode": "net_mode" if mode == "spot" else "long_short_mode",
            }

            result = await self._make_request(
                "POST", "/account/set-position-mode", data=data
            )

            if result.get("code") == "0":
                logger.info(f"‚úÖ Trading mode set to {mode.upper()}")
                return True
            else:
                logger.error(f"‚ùå Failed to set trading mode: {result.get('msg')}")
                return False

        except Exception as e:
            logger.error(f"Error setting trading mode: {e}")
            return False

    async def get_borrowed_balance(self, currency: str) -> float:
        """
        Get borrowed (margin) balance for a specific currency.

        Args:
            currency: Currency code (e.g., "SOL", "BTC", "USDT")

        Returns:
            Borrowed amount (0.0 if no borrowing or SPOT mode)
        """
        try:
            result = await self._make_request(
                "GET", "/account/balance", params={"ccy": currency}
            )

            if result.get("data"):
                for account in result["data"]:
                    for detail in account.get("details", []):
                        if detail.get("ccy") == currency:
                            # 'liab' = actual borrowed amount (liability)
                            # –ù–∞ SPOT —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "0" –∏–ª–∏ ""
                            borrowed_str = detail.get("liab", "0")
                            borrowed = float(borrowed_str) if borrowed_str else 0.0

                            if borrowed > 0:
                                logger.warning(
                                    f"‚ö†Ô∏è BORROWED DETECTED: {borrowed:.6f} {currency}"
                                )
                            return borrowed
            return 0.0
        except Exception as e:
            logger.error(f"Error getting borrowed balance for {currency}: {e}")
            return 0.0

    async def get_positions(self) -> List[Position]:
        """Get current positions"""
        result = await self._make_request("GET", "/account/positions")

        positions = []
        for pos in result["data"]:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if float(pos.get("pos", 0)) != 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (long/short)
                position_side = (
                    PositionSide.LONG
                    if pos["posSide"] == "long"
                    else PositionSide.SHORT
                )

                positions.append(
                    Position(
                        symbol=pos["instId"],
                        side=position_side,
                        size=float(pos["pos"]),
                        entry_price=float(pos.get("avgPx", 0)),
                        mark_price=float(pos.get("markPx", 0)),
                        pnl=float(pos.get("upl", 0)),
                    )
                )

        return positions

    # Trading Methods
    async def place_order(
        self,
        symbol: str,
        side: OrderSide,
        order_type: OrderType,
        quantity: float,
        price: Optional[float] = None,
        post_only: bool = False,
    ) -> Order:
        """
        Place a new order (simple SPOT trading).

        Args:
            symbol: Trading pair (e.g., "BTC-USDT")
            side: BUY or SELL
            order_type: MARKET or LIMIT
            quantity: Order size
            price: Limit price (only for LIMIT orders)

        Returns:
            Order object

        Note:
            TP/SL —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (_update_position_prices).
            OKX SPOT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ TP/SL –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
        """
        data = {
            "instId": symbol,
            "tdMode": "cash",  # SPOT mode
            "side": "buy" if side == OrderSide.BUY else "sell",
            "ordType": "limit" if order_type == OrderType.LIMIT else "market",
            "sz": str(quantity),
            "autoBorrow": "false",  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–π–º—ã!
        }

        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è sandbox –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!
        if self.sandbox:
            data["tdMode"] = "cash"  # SPOT –¥–ª—è sandbox

        # –î–æ–±–∞–≤–ª—è–µ–º POST-ONLY –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if post_only and order_type == OrderType.LIMIT:
            data["postOnly"] = "true"

        # üî• –ö–†–ò–¢–ò–ß–ù–û! tgtCcy –¥–ª—è BUY MARKET –æ—Ä–¥–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û!
        # –î–ª—è SPOT —Ç–æ—Ä–≥–æ–≤–ª–∏ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º base_ccy (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç)
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º quote_ccy - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∑–∞–π–º—ã!
        if order_type == OrderType.MARKET and side == OrderSide.BUY:
            # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º base_ccy –¥–ª—è SPOT —Ç–æ—Ä–≥–æ–≤–ª–∏
            data["tgtCcy"] = "base_ccy"
            logger.info(f"üîß BUY MARKET: tgtCcy=base_ccy (quantity={quantity})")

        if price is not None:
            data["px"] = str(price)

        result = await self._make_request("POST", "/trade/order", data=data)

        logger.info(f"Order response: {result}")

        if not result.get("data") or len(result["data"]) == 0:
            raise Exception(f"Invalid order response: {result}")

        order_data = result["data"][0]
        logger.info(f"Order data: {order_data}")

        # OKX –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return Order(
            id=order_data["ordId"],
            symbol=symbol,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π symbol –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            side=side,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π side –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            type=order_type,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π order_type –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            amount=quantity,  # amount –≤ –º–æ–¥–µ–ª–∏, quantity –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
            price=price if price else 0.0,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π price –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            status=OrderStatus.PENDING,
            timestamp=datetime.utcnow(),  # datetime –æ–±—ä–µ–∫—Ç, –Ω–µ timestamp
        )

    async def cancel_order(self, symbol: str, order_id: str) -> bool:
        """Cancel an order"""
        data = {
            "instId": symbol,
            "ordId": order_id,
        }

        try:
            await self._make_request("POST", "/trade/cancel-order", data=data)
            return True
        except Exception as e:
            logger.error(f"Failed to cancel order: {e}")
            return False

    async def get_order(self, symbol: str, order_id: str) -> Optional[Order]:
        """Get order details"""
        params = {"instId": symbol, "ordId": order_id}
        result = await self._make_request("GET", "/trade/order", params=params)

        if not result["data"]:
            return None

        order_data = result["data"][0]
        return Order(
            id=order_data["ordId"],
            symbol=order_data["instId"],
            side=OrderSide.BUY if order_data["side"] == "buy" else OrderSide.SELL,
            type=OrderType.LIMIT
            if order_data["ordType"] == "limit"
            else OrderType.MARKET,
            quantity=float(order_data["sz"]),
            price=float(order_data.get("px", 0)),
            status=self._convert_status(order_data["state"]),
            timestamp=int(order_data["cTime"]),
        )

    async def get_open_orders(self, symbol: Optional[str] = None) -> List[Order]:
        """Get open orders"""
        params = {
            "instType": "SPOT",  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è OKX!
        }
        if symbol:
            params["instId"] = symbol

        # ‚úÖ OKX —Ç—Ä–µ–±—É–µ—Ç instType –ü–ï–†–í–´–ú –≤ query string!
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        ordered_params = {"instType": params["instType"]}
        if "instId" in params:
            ordered_params["instId"] = params["instId"]

        result = await self._make_request(
            "GET", "/trade/orders-pending", params=ordered_params
        )

        orders = []
        for order_data in result["data"]:
            orders.append(
                Order(
                    id=order_data["ordId"],
                    symbol=order_data["instId"],
                    side=OrderSide.BUY
                    if order_data["side"] == "buy"
                    else OrderSide.SELL,
                    type=OrderType.LIMIT
                    if order_data["ordType"] == "limit"
                    else OrderType.MARKET,
                    amount=float(order_data["sz"]),  # amount, –Ω–µ quantity
                    price=float(order_data.get("px", 0)),
                    status=self._convert_status(order_data["state"]),
                    timestamp=datetime.utcnow(),  # datetime, –Ω–µ int
                )
            )

        return orders

    async def place_algo_order(
        self,
        symbol: str,
        side: OrderSide,
        quantity: float,
        trigger_price: float,
        order_type: str = "conditional",
    ) -> Optional[str]:
        """
        –í—ã—Å—Ç–∞–≤–∏—Ç—å ALGO order (TP/SL) –¥–ª—è SPOT.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: BUY –∏–ª–∏ SELL
            quantity: –†–∞–∑–º–µ—Ä
            trigger_price: –¶–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (TP –∏–ª–∏ SL)
            order_type: "conditional" –¥–ª—è TP/SL

        Returns:
            algo order ID –∏–ª–∏ None
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º trigger price —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ 6 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–µ–π!
        formatted_trigger = f"{trigger_price:.6f}"

        data = {
            "instId": symbol,
            "tdMode": "cash",  # SPOT
            "side": "buy" if side == OrderSide.BUY else "sell",
            "ordType": order_type,
            "sz": str(quantity),
            "autoBorrow": "false",  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–π–º—ã!
            # "reduceOnly": "true",  # ‚ùå –£–ë–†–ê–ù–û: –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ SPOT —Ä–µ–∂–∏–º–µ
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: tgtCcy –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è algo orders!
            "tpTriggerPx": formatted_trigger,  # –î–ª—è TP
            "tpOrdPx": "-1",  # Market –ø—Ä–∏ —Ç—Ä–∏–≥–≥–µ—Ä–µ
        }

        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è sandbox –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!
        if self.sandbox:
            data["tdMode"] = "cash"  # SPOT –¥–ª—è sandbox

        try:
            result = await self._make_request("POST", "/trade/order-algo", data=data)

            if result.get("code") == "0" and result.get("data"):
                algo_id = result["data"][0].get("algoId")
                logger.info(f"‚úÖ Algo order placed: {algo_id} @ ${trigger_price}")
                return algo_id
            else:
                logger.error(f"‚ùå Algo order failed: {result.get('msg')}")
                return None
        except Exception as e:
            logger.error(f"Error placing algo order: {e}")
            return None

    async def place_stop_loss_order(
        self,
        symbol: str,
        side: OrderSide,
        quantity: float,
        trigger_price: float,
    ) -> Optional[str]:
        """
        –í—ã—Å—Ç–∞–≤–∏—Ç—å Stop Loss algo order –¥–ª—è SPOT.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: BUY –∏–ª–∏ SELL (–∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
            quantity: –†–∞–∑–º–µ—Ä
            trigger_price: SL —Ç—Ä–∏–≥–≥–µ—Ä —Ü–µ–Ω–∞

        Returns:
            algo order ID –∏–ª–∏ None
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º trigger price —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ 6 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–µ–π!
        formatted_trigger = f"{trigger_price:.6f}"

        data = {
            "instId": symbol,
            "tdMode": "cash",
            "side": "buy" if side == OrderSide.BUY else "sell",
            "ordType": "conditional",
            "sz": str(quantity),
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: tgtCcy –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è algo orders!
            "slTriggerPx": formatted_trigger,  # –î–ª—è SL
            "slOrdPx": "-1",
        }

        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è sandbox –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!
        if self.sandbox:
            data["tdMode"] = "cash"  # SPOT –¥–ª—è sandbox

        try:
            result = await self._make_request("POST", "/trade/order-algo", data=data)

            if result.get("code") == "0" and result.get("data"):
                algo_id = result["data"][0].get("algoId")
                logger.info(f"‚úÖ SL algo order placed: {algo_id} @ ${trigger_price}")
                return algo_id
            else:
                logger.error(f"‚ùå SL algo order failed: {result.get('msg')}")
                return None
        except Exception as e:
            logger.error(f"Error placing SL algo order: {e}")
            return None

    async def place_oco_order(
        self,
        symbol: str,
        side: OrderSide,
        quantity: float,
        tp_trigger_price: float,
        sl_trigger_price: float,
    ) -> Optional[str]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ OCO (One-Cancels-Other) –æ—Ä–¥–µ—Ä–∞ —Å TP –∏ SL.

        OCO –æ—Ä–¥–µ—Ä –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç TP –∏ SL –≤ –æ–¥–∏–Ω - –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ,
        –≤—Ç–æ—Ä–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è (SELL –¥–ª—è LONG, BUY –¥–ª—è SHORT)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            tp_trigger_price: Take Profit —Ç—Ä–∏–≥–≥–µ—Ä —Ü–µ–Ω–∞
            sl_trigger_price: Stop Loss —Ç—Ä–∏–≥–≥–µ—Ä —Ü–µ–Ω–∞

        Returns:
            algo order ID –∏–ª–∏ None
        """
        # üî• –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ü–ï–†–ï–î —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º OCO!
        try:
            base_asset = symbol.split("-")[0]
            quote_asset = symbol.split("-")[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–π–º—ã
            borrowed_base = await self.get_borrowed_balance(base_asset)
            borrowed_quote = await self.get_borrowed_balance(quote_asset)

            if borrowed_base > 0 or borrowed_quote > 0:
                logger.error(
                    f"üö® OCO BLOCKED: BORROWED FUNDS DETECTED! "
                    f"{base_asset}: {borrowed_base:.6f} | "
                    f"{quote_asset}: {borrowed_quote:.6f}"
                )
                logger.error("üö´ OCO ORDER BLOCKED - –ù–ï –¢–û–†–ì–£–ï–ú –° –ó–ê–ô–ú–ê–ú–ò!")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è OCO
            if side == OrderSide.SELL:  # LONG –∑–∞–∫—Ä—ã—Ç–∏–µ - –Ω—É–∂–µ–Ω ETH/BTC
                asset_balance = await self.get_balance(base_asset)
                if asset_balance < quantity:
                    logger.error(
                        f"üö® OCO BLOCKED: –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û {base_asset}! "
                        f"–ï—Å—Ç—å: {asset_balance:.8f}, –ù—É–∂–Ω–æ: {quantity:.8f}"
                    )
                    logger.error("üö´ OCO ORDER BLOCKED - –ù–ï –ë–ï–†–ï–ú –ó–ê–ô–ú–´!")
                    return None
            else:  # BUY - SHORT –∑–∞–∫—Ä—ã—Ç–∏–µ - –Ω—É–∂–µ–Ω USDT
                quote_balance = await self.get_balance(quote_asset)
                required_quote = (
                    quantity * tp_trigger_price
                )  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è TP
                if quote_balance < required_quote:
                    logger.error(
                        f"üö® OCO BLOCKED: –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û {quote_asset}! "
                        f"–ï—Å—Ç—å: {quote_balance:.2f}, –ù—É–∂–Ω–æ: {required_quote:.2f}"
                    )
                    logger.error("üö´ OCO ORDER BLOCKED - –ù–ï –ë–ï–†–ï–ú –ó–ê–ô–ú–´!")
                    return None

        except Exception as e:
            logger.error(f"‚ùå Failed to check balance for OCO: {e}")
            logger.error("üö´ OCO ORDER BLOCKED - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞!")
            return None

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º trigger prices —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ 6 –∑–Ω–∞–∫–∞–º–∏
        formatted_tp = f"{tp_trigger_price:.6f}"
        formatted_sl = f"{sl_trigger_price:.6f}"

        data = {
            "instId": symbol,
            "tdMode": "cash",  # SPOT
            "side": "buy" if side == OrderSide.BUY else "sell",
            "ordType": "oco",
            "sz": str(quantity),
            "autoBorrow": "false",  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–π–º—ã!
            # "reduceOnly": "true",  # ‚ùå –£–ë–†–ê–ù–û: –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ SPOT —Ä–µ–∂–∏–º–µ
            "tpTriggerPx": formatted_tp,
            "tpOrdPx": "-1",  # Market –ø—Ä–∏ —Ç—Ä–∏–≥–≥–µ—Ä–µ TP
            "slTriggerPx": formatted_sl,
            "slOrdPx": "-1",  # Market –ø—Ä–∏ —Ç—Ä–∏–≥–≥–µ—Ä–µ SL
        }

        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è sandbox –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!
        if self.sandbox:
            data["tdMode"] = "cash"  # SPOT –¥–ª—è sandbox

        # –ö–†–ò–¢–ò–ß–ù–û! tgtCcy –Ω—É–∂–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è BUY (SHORT –∑–∞–∫—Ä—ã—Ç–∏–µ)
        # –î–ª—è SELL (LONG –∑–∞–∫—Ä—ã—Ç–∏–µ) sz –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if side == OrderSide.BUY:
            data["tgtCcy"] = "base_ccy"

        try:
            result = await self._make_request("POST", "/trade/order-algo", data=data)

            if result.get("code") == "0" and result.get("data"):
                algo_id = result["data"][0].get("algoId")
                logger.info(
                    f"‚úÖ OCO order placed: {algo_id} | "
                    f"TP @ ${tp_trigger_price:.2f}, SL @ ${sl_trigger_price:.2f}"
                )
                return algo_id
            else:
                logger.error(f"‚ùå OCO order failed: {result.get('msg')}")
                return None
        except Exception as e:
            logger.error(f"Error placing OCO order: {e}")
            return None

    async def get_algo_orders(
        self, symbol: Optional[str] = None, algo_type: str = "conditional"
    ) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö algo orders (TP/SL).

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            algo_type: –¢–∏–ø algo order ("conditional", "oco", "trigger")

        Returns:
            –°–ø–∏—Å–æ–∫ algo orders
        """
        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
        params = {
            "instType": "SPOT",
            "state": "live",  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        }

        # üîß –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è OCO –æ—Ä–¥–µ—Ä–æ–≤ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
        if algo_type == "oco":
            params["ordType"] = "oco"
        elif algo_type == "conditional":
            params["ordType"] = "conditional"
        elif algo_type == "trigger":
            params["ordType"] = "trigger"

        if symbol:
            params["instId"] = symbol

        try:
            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å query string
            query_string = "&".join([f"{k}={v}" for k, v in params.items()])
            request_path = (
                f"/trade/orders-algo-pending?{query_string}"  # ‚úÖ –ë–ï–ó /api/v5 –≤ –ø–æ–¥–ø–∏—Å–∏!
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            signature = self._generate_signature(timestamp, "GET", request_path, "")

            headers = {
                "OK-ACCESS-KEY": self.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": self.passphrase,
                "Content-Type": "application/json",
            }

            if self.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{self.base_url}/api/v5{request_path}"  # ‚úÖ –ü–û–õ–ù–´–ô URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

            async with self.session.get(url, headers=headers) as response:
                result = await response.json()
                return result.get("data", [])

        except Exception as e:
            logger.error(f"Error getting algo orders: {e}")
            return []

    async def get_algo_order_status(self, algo_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ algo –æ—Ä–¥–µ—Ä–∞.

        Args:
            algo_id: ID algo –æ—Ä–¥–µ—Ä–∞

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # üîß –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OCO (—Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏—è, –ø–æ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã–µ)
            # –ò—Å—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç)
            result = await self._make_request(
                "GET",
                "/trade/orders-algo-history",
                params={
                    "ordType": "oco",
                    "instType": "SPOT",
                },
            )

            # –ò—â–µ–º –Ω–∞—à algoId –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if result.get("data"):
                for order in result["data"]:
                    if order.get("algoId") == algo_id:
                        logger.debug(
                            f"‚úÖ Found OCO {algo_id} in history: "
                            f"state={order.get('state')}, "
                            f"actualSide={order.get('actualSide')}"
                        )
                        return order

            # –ï—Å–ª–∏ –Ω–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
            result = await self._make_request(
                "GET",
                "/trade/orders-algo-pending",
                params={
                    "ordType": "oco",
                    "instType": "SPOT",
                },
            )

            # –ò—â–µ–º –Ω–∞—à algoId –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if result.get("data"):
                for order in result["data"]:
                    if order.get("algoId") == algo_id:
                        logger.debug(
                            f"‚úÖ Found OCO {algo_id} in pending: "
                            f"state={order.get('state')}"
                        )
                        return order

            logger.debug(f"‚ö™ OCO {algo_id} not found (neither history nor pending)")
            return None

        except Exception as e:
            logger.error(f"‚ùå Error checking OCO status {algo_id}: {e}")
            return None

    async def get_recent_fills(
        self, symbol: Optional[str] = None, limit: int = 100
    ) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (fills).

        üî• –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è OCO –∑–∞–∫—Ä—ã—Ç–∏–π!

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ None - –≤—Å–µ –ø–∞—Ä—ã)
            limit: –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        try:
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º instId - —ç—Ç–æ –ª–æ–º–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å!
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï fills, –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ symbol –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            params = {
                "instType": "SPOT",
                "limit": str(limit),
            }

            result = await self._make_request(
                "GET",
                "/trade/fills",
                params=params,
            )

            if result.get("data"):
                fills = result["data"]

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ symbol –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if symbol:
                    fills = [f for f in fills if f.get("instId") == symbol]

                logger.debug(
                    f"‚úÖ Retrieved {len(fills)} fills"
                    + (f" for {symbol}" if symbol else "")
                )
                return fills

            return []

        except Exception as e:
            logger.error(f"‚ùå Error getting fills: {e}")
            return []

    async def cancel_algo_order(self, algo_id: str, symbol: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å algo order (TP/SL).

        Args:
            algo_id: ID algo –æ—Ä–¥–µ—Ä–∞
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω
        """
        data = {
            "instId": symbol,
            "algoId": algo_id,
        }

        try:
            result = await self._make_request(
                "POST", "/trade/cancel-algo-order", data=data
            )
            if result.get("code") == "0":
                logger.info(f"‚úÖ Algo order {algo_id} cancelled")
                return True
            else:
                logger.warning(
                    f"‚ö†Ô∏è Failed to cancel algo order {algo_id}: {result.get('msg')}"
                )
                return False
        except Exception as e:
            logger.error(f"Error cancelling algo order {algo_id}: {e}")
            return False

    def _convert_status(self, okx_status: str) -> OrderStatus:
        """Convert OKX status to our OrderStatus enum"""
        status_map = {
            "live": OrderStatus.PENDING,
            "filled": OrderStatus.FILLED,
            "canceled": OrderStatus.CANCELLED,
            "partially_filled": OrderStatus.PARTIALLY_FILLED,
        }
        return status_map.get(okx_status, OrderStatus.PENDING)

    # WebSocket Methods (placeholder)
    async def subscribe_ticker(self, symbol: str) -> AsyncGenerator[Tick, None]:
        """Subscribe to ticker updates"""
        logger.warning("WebSocket ticker subscription not implemented")
        yield Tick(
            symbol=symbol, price=0.0, volume=0.0, timestamp=int(time.time() * 1000)
        )

    async def subscribe_orderbook(self, symbol: str) -> AsyncGenerator[Dict, None]:
        """Subscribe to orderbook updates"""
        logger.warning("WebSocket orderbook subscription not implemented")
        yield {}

    async def subscribe_trades(self, symbol: str) -> AsyncGenerator[Trade, None]:
        """Subscribe to trade updates"""
        logger.warning("WebSocket trades subscription not implemented")
        yield Trade(
            id="0",
            symbol=symbol,
            side=OrderSide.BUY,
            price=0.0,
            quantity=0.0,
            timestamp=int(time.time() * 1000),
        )

    # Utility Methods
    async def get_exchange_info(self) -> Dict:
        """Get exchange information"""
        result = await self._make_request(
            "GET", "/public/instruments", params={"instType": "SPOT"}
        )
        return {
            "symbols": [inst["instId"] for inst in result["data"]],
            "timeframes": [
                "1m",
                "3m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "4h",
                "6h",
                "12h",
                "1d",
                "1w",
                "1M",
                "3M",
            ],
        }

    async def test_connection(self) -> bool:
        """Test API connection"""
        try:
            result = await self._make_request("GET", "/system/status")
            success = result.get("code") == "0"
            if success:
                logger.info("‚úÖ OKX API connection successful")
            else:
                logger.error("‚ùå OKX API connection failed")
            return success
        except Exception as e:
            logger.error(f"‚ùå OKX API connection failed: {e}")
            return False

    async def get_market_data(
        self, symbol: str, timeframe: str, limit: int = 100
    ) -> List[OHLCV]:
        """Get market data (OHLCV candles) for a symbol"""
        try:
            # Convert timeframe to OKX format
            timeframe_map = {
                "1m": "1m",
                "3m": "3m",
                "5m": "5m",
                "15m": "15m",
                "30m": "30m",
                "1h": "1H",
                "2h": "2H",
                "4h": "4H",
                "6h": "6H",
                "12h": "12H",
                "1d": "1D",
                "1w": "1W",
                "1M": "1M",
                "3M": "3M",
            }

            okx_timeframe = timeframe_map.get(timeframe, "1m")

            result = await self._make_request(
                "GET",
                "/market/candles",
                params={"instId": symbol, "bar": okx_timeframe, "limit": str(limit)},
            )

            if result.get("code") != "0":
                raise Exception(f"API error: {result.get('msg', 'Unknown error')}")

            candles = []
            for candle_data in result.get("data", []):
                candle = OHLCV(
                    timestamp=int(candle_data[0]),
                    symbol=symbol,
                    open=float(candle_data[1]),
                    high=float(candle_data[2]),
                    low=float(candle_data[3]),
                    close=float(candle_data[4]),
                    volume=float(candle_data[5]),
                    timeframe=timeframe,
                )
                candles.append(candle)

            # OKX –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—á–∏ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
            # (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
            return list(reversed(candles))

        except Exception as e:
            logger.error(f"Error getting market data for {symbol}: {e}")
            return []

    async def stream_ticks(self, symbol: str) -> AsyncGenerator[Tick, None]:
        """Stream real-time tick data for a symbol"""
        try:
            ws_url = "wss://ws.okx.com:8443/ws/v5/public"

            async with aiohttp.ClientSession() as session:
                async with session.ws_connect(ws_url) as ws:
                    # Subscribe to ticker data
                    subscribe_msg = {
                        "op": "subscribe",
                        "args": [{"channel": "tickers", "instId": symbol}],
                    }
                    await ws.send_str(json.dumps(subscribe_msg))

                    async for msg in ws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            try:
                                data = json.loads(msg.data)

                                if data.get("arg", {}).get("channel") == "tickers":
                                    ticker_data = data.get("data", [])
                                    if ticker_data:
                                        tick_data = ticker_data[0]
                                        tick = Tick(
                                            symbol=tick_data["instId"],
                                            price=float(tick_data["last"]),
                                            volume=float(tick_data["vol24h"]),
                                            timestamp=int(tick_data["ts"]),
                                        )
                                        yield tick

                            except Exception as e:
                                logger.error(f"Error processing tick data: {e}")
                                continue

                        elif msg.type == aiohttp.WSMsgType.ERROR:
                            logger.error(f"WebSocket error: {ws.exception()}")
                            break

        except Exception as e:
            logger.error(f"Error streaming ticks for {symbol}: {e}")
            raise
