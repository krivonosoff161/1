"""
WebSocket Orchestrator –¥–ª—è OKX Trading Bot
Real-time —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
"""

import asyncio
import logging
import threading
import time
from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from src.balance import (AdaptiveBalanceManager, BalanceProfileConfig,
                         BalanceUpdateEvent)
from src.clients.spot_client import OKXClient
from src.config import BotConfig
from src.indicators import TechnicalIndicators
from src.risk.risk_controller import RiskController
from src.strategies.modules.adaptive_regime_manager import \
    AdaptiveRegimeManager
from src.strategies.modules.adx_filter import ADXFilter
from src.strategies.modules.balance_checker import BalanceChecker
from src.strategies.modules.correlation_filter import CorrelationFilter
from src.strategies.modules.multi_timeframe import MultiTimeframeFilter
from src.strategies.modules.pivot_points import PivotPointsFilter
from src.strategies.modules.volume_profile_filter import VolumeProfileFilter
from src.websocket_manager import (PriceData, WebSocketConfig,
                                   WebSocketPriceManager, get_latency_monitor,
                                   get_websocket_manager, initialize_websocket)

from .order_executor import OrderExecutor
from .performance_tracker import PerformanceTracker
from .position_manager import PositionManager
from .signal_generator import SignalGenerator

logger = logging.getLogger(__name__)


@dataclass
class WebSocketTradingState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è WebSocket —Ä–µ–∂–∏–º–∞"""

    current_prices: Dict[str, float] = None
    last_update_time: Dict[str, float] = None
    is_processing: bool = False
    last_signal_time: float = 0
    signal_cooldown: float = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏

    def __post_init__(self):
        if self.current_prices is None:
            self.current_prices = {}
        if self.last_update_time is None:
            self.last_update_time = {}


class WebSocketScalpingOrchestrator:
    """WebSocket Orchestrator –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

    def __init__(self, config: BotConfig, okx_client: OKXClient):
        self.config = config
        self.okx_client = okx_client
        self.is_running = False
        self.test_mode = False
        self.trading_state = WebSocketTradingState()

        # WebSocket –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.websocket_manager: Optional[WebSocketPriceManager] = None
        self.latency_monitor = None

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.balance_manager: Optional[AdaptiveBalanceManager] = None

        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        self.indicators = None
        self.arm = None
        self.signal_generator = None
        self.order_executor = None
        self.position_manager = None
        self.performance_tracker = None
        self.risk_controller = None

        # –§–∏–ª—å—Ç—Ä—ã
        self.mtf_filter = None
        self.correlation_filter = None
        self.adx_filter = None
        self.pivot_filter = None
        self.volume_filter = None
        self.balance_checker = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "signals_generated": 0,
            "signals_processed": 0,
            "signals_rejected": 0,
            "websocket_errors": 0,
            "last_price_update": 0,
            "avg_latency": 0.0,
        }

        self._setup_components()

    def _setup_components(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîß Setting up WebSocket components...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
        websocket_config = WebSocketConfig(
            url="wss://ws.okx.com:8443/ws/v5/public",
            ping_interval=20,
            ping_timeout=10,
            close_timeout=10,
            max_size=2**20,
            reconnect_interval=5,
            max_reconnect_attempts=10,
        )

        # –°–æ–∑–¥–∞–µ–º WebSocket Manager –Ω–∞–ø—Ä—è–º—É—é
        from src.websocket_manager import WebSocketPriceManager

        self.websocket_manager = WebSocketPriceManager(websocket_config)
        self.latency_monitor = None  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks
        self.websocket_manager.add_price_callback(self._on_price_update)
        self.websocket_manager.add_error_callback(self._on_websocket_error)

        if self.latency_monitor:
            self.latency_monitor.add_warning_callback(self._on_latency_warning)
            self.latency_monitor.add_critical_callback(self._on_latency_critical)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self._init_balance_manager()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
        self._init_trading_modules()

        logger.info("‚úÖ WebSocket components setup complete")

    def _init_balance_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üí∞ Initializing Adaptive Balance Manager...")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if self.config.balance_profiles:
                profiles = {}
                for name, profile_config in self.config.balance_profiles.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø profile_config
                    if isinstance(profile_config, dict):
                        profiles[name] = BalanceProfileConfig(
                            threshold=profile_config["threshold"],
                            base_position_size=profile_config["base_position_size"],
                            min_position_size=profile_config["min_position_size"],
                            max_position_size=profile_config["max_position_size"],
                            max_open_positions=profile_config["max_open_positions"],
                            max_position_percent=profile_config["max_position_percent"],
                            trending_boost=profile_config["trending_boost"],
                            ranging_boost=profile_config["ranging_boost"],
                            choppy_boost=profile_config["choppy_boost"],
                        )
                    else:
                        # –£–∂–µ BalanceProfileConfig –æ–±—ä–µ–∫—Ç
                        profiles[name] = profile_config

                self.balance_manager = AdaptiveBalanceManager(profiles)
                logger.info(
                    "‚úÖ Adaptive Balance Manager initialized with config profiles"
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                from src.balance import create_default_profiles

                profiles = create_default_profiles()
                self.balance_manager = AdaptiveBalanceManager(profiles)
                logger.info(
                    "‚úÖ Adaptive Balance Manager initialized with default profiles"
                )

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Balance Manager: {e}")
            # Fallback –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            from src.balance import create_default_profiles

            profiles = create_default_profiles()
            self.balance_manager = AdaptiveBalanceManager(profiles)
            logger.info("‚úÖ Adaptive Balance Manager initialized with fallback profiles")

    def _init_trading_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üîß Initializing trading modules...")

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self.indicators = TechnicalIndicators()

        # ARM (Adaptive Regime Manager) - —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from src.strategies.modules.adaptive_regime_manager import RegimeConfig

        regime_config = RegimeConfig()
        self.arm = AdaptiveRegimeManager(regime_config)

        # –ü–µ—Ä–µ–¥–∞–µ–º balance_manager –≤ ARM –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.arm.balance_manager = self.balance_manager

        # –§–∏–ª—å—Ç—Ä—ã - —Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        from src.strategies.modules.adx_filter import (ADXFilter,
                                                       ADXFilterConfig)
        from src.strategies.modules.balance_checker import (BalanceCheckConfig,
                                                            BalanceChecker)
        from src.strategies.modules.correlation_filter import (
            CorrelationFilter, CorrelationFilterConfig)
        from src.strategies.modules.multi_timeframe import (
            MTFConfig, MultiTimeframeFilter)
        from src.strategies.modules.pivot_points import (PivotPointsConfig,
                                                         PivotPointsFilter)
        from src.strategies.modules.volume_profile_filter import (
            VolumeProfileConfig, VolumeProfileFilter)

        self.mtf_filter = MultiTimeframeFilter(self.okx_client, MTFConfig())
        self.correlation_filter = CorrelationFilter(
            self.okx_client, CorrelationFilterConfig(), self.config.trading.symbols
        )
        self.adx_filter = ADXFilter(ADXFilterConfig())
        self.pivot_filter = PivotPointsFilter(self.okx_client, PivotPointsConfig())
        self.volume_filter = VolumeProfileFilter(self.okx_client, VolumeProfileConfig())
        self.balance_checker = BalanceChecker(BalanceCheckConfig())

        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏ - —Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        from src.risk.risk_controller import RiskController
        from src.risk.risk_controller_config import RiskControllerConfig

        from .order_executor import OrderExecutor
        from .order_executor_config import OrderExecutorConfig
        from .position_manager import PositionManager
        from .position_manager_config import PositionManagerConfig
        from .signal_generator import SignalGenerator
        from .signal_generator_config import SignalGeneratorConfig

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è SignalGenerator
        modules = {
            "mtf": self.mtf_filter,
            "correlation": self.correlation_filter,
            "adx": self.adx_filter,
            "pivot": self.pivot_filter,
            "volume_profile": self.volume_filter,
            "balance": self.balance_checker,
            "arm": self.arm,
        }

        self.signal_generator = SignalGenerator(
            self.okx_client,
            SignalGeneratorConfig(),
            self.config.risk,
            modules,
            self.indicators,
        )

        self.order_executor = OrderExecutor(
            self.okx_client,
            OrderExecutorConfig(),
            self.config.risk,
            self.balance_checker,
            self.arm,
        )

        self.position_manager = PositionManager(
            self.okx_client, PositionManagerConfig(), self.arm
        )

        self.performance_tracker = PerformanceTracker()
        self.risk_controller = RiskController(
            RiskControllerConfig(), self.config.risk, self.arm
        )

        logger.info("‚úÖ Trading modules initialized")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ Starting WebSocket Scalping Orchestrator...")

        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            logger.info("üîå Attempting WebSocket connection...")
            if not await self.websocket_manager.connect():
                logger.error("‚ùå Failed to connect to WebSocket")
                return False
            logger.info("‚úÖ WebSocket connected successfully")

            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
            for symbol in self.config.trading.symbols:
                await self.websocket_manager.subscribe_ticker(symbol)
                for interval in self.config.scalping.candle_intervals:
                    await self.websocket_manager.subscribe_candles(symbol, interval)

            self.is_running = True
            logger.info("‚úÖ WebSocket Orchestrator started")

            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket
            logger.info("üéß Starting WebSocket listener...")

            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            if self.test_mode:
                logger.info(
                    "üß™ Test mode: WebSocket listener ready (not starting infinite loop)"
                )
                return True
            else:
                await self.websocket_manager.start_listening()

        except Exception as e:
            logger.error(f"‚ùå WebSocket Orchestrator start failed: {e}")
            self.is_running = False
            return False

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã WebSocket –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üõë Shutting down WebSocket Orchestrator...")

        try:
            self.is_running = False

            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
            if self.websocket_manager:
                await self.websocket_manager.disconnect()

            logger.info("‚úÖ WebSocket Orchestrator shutdown complete")

        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üõë Stopping WebSocket Orchestrator...")

        self.is_running = False

        if self.websocket_manager:
            await self.websocket_manager.disconnect()

        logger.info("‚úÖ WebSocket Orchestrator stopped")

    async def _trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üîÑ Starting trading loop...")

        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if not self.websocket_manager.is_connected:
                    logger.warning(
                        "‚ö†Ô∏è WebSocket disconnected, waiting for reconnect..."
                    )
                    await asyncio.sleep(1)
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                for symbol in self.config.trading.symbols:
                    if not self.is_running:
                        break

                    await self._process_symbol(symbol)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_stats()

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(0.1)

            except Exception as e:
                logger.error(f"‚ùå Trading loop error: {e}")
                await asyncio.sleep(1)

    async def _process_symbol(self, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if symbol not in self.trading_state.current_prices:
                return

            current_price = self.trading_state.current_prices[symbol]
            last_update = self.trading_state.last_update_time.get(symbol, 0)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
            if time.time() - last_update > 5:
                logger.warning(f"‚ö†Ô∏è Stale data for {symbol}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.trading_state.is_processing:
                return

            self.trading_state.is_processing = True

            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                candles = await self._get_historical_data(symbol)
                if not candles:
                    return

                # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                indicators_data = self._calculate_indicators(symbol, candles)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ARM
                self.arm.detect_regime(
                    indicators_data.get("adx", 0.0), indicators_data.get("atr", 0.0)
                )
                state.current_regime[symbol] = self.arm.current_regime

                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                regime_params = self.arm.get_current_parameters(self.balance_manager)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                signal = await self._generate_signal(
                    symbol, current_price, indicators_data, regime_params
                )

                if signal:
                    await self._process_signal(signal)

            finally:
                self.trading_state.is_processing = False

        except Exception as e:
            logger.error(f"‚ùå Symbol processing error for {symbol}: {e}")
            self.trading_state.is_processing = False

    async def _get_historical_data(self, symbol: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            candles = await self.okx_client.get_candles(symbol, "5m", 200)
            return candles
        except Exception as e:
            logger.error(f"‚ùå Failed to get historical data for {symbol}: {e}")
            return None

    def _calculate_indicators(self, symbol: str, candles: List[Dict]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            if not candles or len(candles) < 50:
                return {}

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            closes = [float(candle[4]) for candle in candles]
            highs = [float(candle[2]) for candle in candles]
            lows = [float(candle[3]) for candle in candles]
            volumes = [float(candle[5]) for candle in candles]

            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = {
                "sma_fast": self.indicators.sma(closes, 20),
                "sma_slow": self.indicators.sma(closes, 50),
                "ema_fast": self.indicators.ema(closes, 20),
                "ema_slow": self.indicators.ema(closes, 50),
                "rsi": self.indicators.rsi(closes, 14),
                "bb_upper": self.indicators.bollinger_upper(closes, 20, 2),
                "bb_lower": self.indicators.bollinger_lower(closes, 20, 2),
                "macd": self.indicators.macd(closes),
                "atr": self.indicators.atr(highs, lows, closes, 14),
                "volume_ratio": self.indicators.volume_ratio(volumes, 20),
            }

            return indicators

        except Exception as e:
            logger.error(f"‚ùå Indicator calculation error for {symbol}: {e}")
            return {}

    async def _generate_signal(
        self, symbol: str, price: float, indicators: Dict[str, Any], regime_params: Dict
    ) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            current_time = time.time()
            if (
                current_time - self.trading_state.last_signal_time
                < self.trading_state.signal_cooldown
            ):
                return None

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            signal = self.signal_generator.generate_signal(
                symbol=symbol,
                price=price,
                indicators=indicators,
                regime_params=regime_params,
            )

            if signal:
                self.trading_state.last_signal_time = current_time
                self.stats["signals_generated"] += 1
                logger.info(
                    f"üìä Signal generated for {symbol}: {signal['side']} at {price}"
                )

            return signal

        except Exception as e:
            logger.error(f"‚ùå Signal generation error for {symbol}: {e}")
            return None

    async def _process_signal(self, signal: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal["symbol"]
            side = signal["side"]
            price = signal["price"]

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if not await self._apply_filters(signal):
                self.stats["signals_rejected"] += 1
                logger.info(f"üö´ Signal rejected by filters: {symbol} {side}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
            if not self.risk_controller.can_trade(signal):
                self.stats["signals_rejected"] += 1
                logger.info(f"üö´ Signal rejected by risk controller: {symbol} {side}")
                return

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            order_result = await self.order_executor.execute_signal(signal)

            if order_result["success"]:
                self.stats["signals_processed"] += 1
                logger.info(f"‚úÖ Order executed: {symbol} {side} at {price}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–µ–Ω–µ–¥–∂–µ—Ä
                if self.balance_manager:
                    self.balance_manager.check_and_update_balance(
                        event="position_opened", symbol=symbol, side=side, amount=price
                    )
            else:
                logger.error(f"‚ùå Order execution failed: {order_result['error']}")

        except Exception as e:
            logger.error(f"‚ùå Signal processing error: {e}")

    async def _apply_filters(self, signal: Dict) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            symbol = signal["symbol"]
            side = signal["side"]
            price = signal["price"]

            # Multi-timeframe —Ñ–∏–ª—å—Ç—Ä
            if self.mtf_filter and not self.mtf_filter.check_entry(symbol, side, price):
                return False

            # Correlation —Ñ–∏–ª—å—Ç—Ä
            if self.correlation_filter and not self.correlation_filter.check_entry(
                signal
            ):
                return False

            # ADX —Ñ–∏–ª—å—Ç—Ä
            if self.adx_filter and not self.adx_filter.check_entry(symbol, side, price):
                return False

            # Pivot Points —Ñ–∏–ª—å—Ç—Ä
            if self.pivot_filter and not self.pivot_filter.check_entry(
                symbol, side, price
            ):
                return False

            # Volume Profile —Ñ–∏–ª—å—Ç—Ä
            if self.volume_filter and not self.volume_filter.check_entry(
                symbol, side, price
            ):
                return False

            # Balance Checker
            if self.balance_checker and not self.balance_checker.check_entry(
                symbol, side, price
            ):
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå Filter application error: {e}")
            return False

    def _on_price_update(self, price_data: PriceData):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        try:
            symbol = price_data.symbol
            price = price_data.price
            timestamp = price_data.timestamp

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.trading_state.current_prices[symbol] = price
            self.trading_state.last_update_time[symbol] = time.time()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats["last_price_update"] = timestamp

            logger.debug(f"üí∞ Price update: {symbol} = ${price:.2f}")

        except Exception as e:
            logger.error(f"‚ùå Price update callback error: {e}")

    def _on_websocket_error(self, error: Exception):
        """Callback –¥–ª—è –æ—à–∏–±–æ–∫ WebSocket"""
        logger.error(f"‚ùå WebSocket error: {error}")
        self.stats["websocket_errors"] += 1

    def _on_latency_warning(self, latency: float):
        """Callback –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        logger.warning(f"‚ö†Ô∏è High latency detected: {latency:.2f}ms")

    def _on_latency_critical(self, latency: float):
        """Callback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        logger.error(f"üö® CRITICAL LATENCY: {latency:.2f}ms")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.latency_monitor:
            self.stats["avg_latency"] = self.latency_monitor.get_average_latency()

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            **self.stats,
            "websocket_status": self.websocket_manager.get_connection_status()
            if self.websocket_manager
            else {},
            "latency_stats": self.latency_monitor.get_latency_stats()
            if self.latency_monitor
            else {},
            "trading_state": {
                "is_processing": self.trading_state.is_processing,
                "active_symbols": len(self.trading_state.current_prices),
                "last_signal_time": self.trading_state.last_signal_time,
            },
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞
        if self.balance_manager:
            stats["balance_stats"] = self.balance_manager.get_balance_stats()

        return stats
