"""
–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""

import asyncio
import sys

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.websocket_order_executor import WebSocketOrderExecutor


async def debug_websocket_connection():
    """–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebSocket"""
    config = load_config()
    okx_config = config.api["okx"]

    logger.info("üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê WEBSOCKET")
    logger.info("=" * 50)

    ws_executor = WebSocketOrderExecutor(okx_config)

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info("1Ô∏è‚É£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï...")
        connected = await ws_executor.connect()

        if connected:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   Connected: {ws_executor.connected}")
            logger.info(f"   WS exists: {ws_executor.ws is not None}")
            if ws_executor.ws:
                logger.info(f"   WS closed: {ws_executor.ws.closed}")
        else:
            logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return

        # 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        logger.info("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ß–ï–†–ï–ó 2 –°–ï–ö–£–ù–î–´...")
        await asyncio.sleep(2)

        logger.info(f"   Connected: {ws_executor.connected}")
        logger.info(f"   WS exists: {ws_executor.ws is not None}")
        if ws_executor.ws:
            logger.info(f"   WS closed: {ws_executor.ws.closed}")

        # 3. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping
        logger.info("\n3Ô∏è‚É£ –¢–ï–°–¢ PING...")
        try:
            if ws_executor.ws and not ws_executor.ws.closed:
                ping_msg = {"op": "ping"}
                await ws_executor.ws.send_str(ping_msg)
                logger.info("‚úÖ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è ping")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º listener
        logger.info("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê LISTENER...")
        if ws_executor.ws and not ws_executor.ws.closed:
            logger.info("‚úÖ WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è listener")
        else:
            logger.warning("‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è listener")

        # 5. –ñ–¥–µ–º –µ—â–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        logger.info("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó 5 –°–ï–ö–£–ù–î...")
        await asyncio.sleep(5)

        logger.info(f"   Connected: {ws_executor.connected}")
        logger.info(f"   WS exists: {ws_executor.ws is not None}")
        if ws_executor.ws:
            logger.info(f"   WS closed: {ws_executor.ws.closed}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    finally:
        logger.info("\n6Ô∏è‚É£ –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï...")
        await ws_executor.disconnect()
        logger.info("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(debug_websocket_connection())
