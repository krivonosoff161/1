"""
–ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å OCO –æ—Ä–¥–µ—Ä–∞–º–∏
"""

import asyncio
import sys
from datetime import datetime, timedelta

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def check_order_history():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üìú –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í ETH-USDT
        print(f"\nüìú –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í ETH-USDT:")
        print("-" * 50)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            history = await bot.client.get_orders_history("ETH-USDT", limit=50)
            print(f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {len(history)}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            two_hours_ago = datetime.now() - timedelta(hours=2)
            recent_orders = []

            for order in history:
                order_time = datetime.fromtimestamp(int(order.get("cTime", 0)) / 1000)
                if order_time > two_hours_ago:
                    recent_orders.append(order)

            print(f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞: {len(recent_orders)}")

            for i, order in enumerate(recent_orders, 1):
                order_id = order.get("ordId", "N/A")
                symbol = order.get("instId", "N/A")
                side = order.get("side", "N/A")
                order_type = order.get("ordType", "N/A")
                size = order.get("sz", "N/A")
                price = order.get("px", "N/A")
                state = order.get("state", "N/A")
                fill_size = order.get("fillSz", "N/A")
                fill_price = order.get("fillPx", "N/A")
                c_time = order.get("cTime", "N/A")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                if c_time != "N/A":
                    order_time = datetime.fromtimestamp(int(c_time) / 1000)
                    time_str = order_time.strftime("%H:%M:%S")
                else:
                    time_str = "N/A"

                print(f"   {i}. ID: {order_id}")
                print(f"      Symbol: {symbol}")
                print(f"      Side: {side}")
                print(f"      Type: {order_type}")
                print(f"      Size: {size}")
                print(f"      Price: {price}")
                print(f"      State: {state}")
                print(f"      Fill Size: {fill_size}")
                print(f"      Fill Price: {fill_price}")
                print(f"      Time: {time_str}")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        # 2. –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø
        print(f"\nüîç –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        print("-" * 50)

        try:
            # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = await bot.client.get_open_orders()
            if isinstance(open_orders, list):
                orders_data = open_orders
            else:
                orders_data = open_orders.get("data", [])

            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders_data)}")

            # –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞
            algo_orders = await bot.client.get_algo_orders()
            print(f"üìä –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

            # –ü–æ–∑–∏—Ü–∏–∏
            positions = await bot.client.get_positions()
            print(f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")

            # –ó–∞–π–º—ã
            eth_borrowed = await bot.client.get_borrowed_balance("ETH")
            usdt_borrowed = await bot.client.get_borrowed_balance("USDT")
            print(f"üìä ETH –∑–∞–π–º—ã: {eth_borrowed:.8f}")
            print(f"üìä USDT –∑–∞–π–º—ã: {usdt_borrowed:.2f}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

        await bot.shutdown()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(check_order_history())
