"""
Futures Position Manager –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ Futures
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Margin Calculator –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–∞—Ä–∂–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ TP/SL
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PnL –∏ —Ä–∏—Å–∫–æ–≤
"""

import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple

from loguru import logger

from src.clients.futures_client import OKXFuturesClient
from src.config import BotConfig, ScalpingConfig
from src.strategies.modules.margin_calculator import MarginCalculator


class FuturesPositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏

    –§—É–Ω–∫—Ü–∏–∏:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –∏ —Ä–∏—Å–∫–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Margin Calculator
    """

    def __init__(
        self,
        config: BotConfig,
        client: OKXFuturesClient,
        margin_calculator: MarginCalculator,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures Position Manager

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            client: Futures –∫–ª–∏–µ–Ω—Ç
            margin_calculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏
        """
        self.config = config
        self.scalping_config = config.scalping
        self.client = client
        self.margin_calculator = margin_calculator

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.active_positions = {}
        self.position_history = []
        self.management_stats = {
            "total_positions": 0,
            "closed_positions": 0,
            "tp_closed": 0,
            "sl_closed": 0,
            "manual_closed": 0,
            "total_pnl": 0.0,
        }

        logger.info("FuturesPositionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.client.get_positions()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            for position in positions:
                symbol = position.get("instId", "").replace("-SWAP", "")
                size = float(position.get("pos", "0"))
                if size != 0:
                    self.active_positions[symbol] = position

            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}")
            self.is_initialized = True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FuturesPositionManager: {e}")
            raise

    async def manage_position(self, position: Dict[str, Any]):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π

        Args:
            position: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        if not self.is_initialized:
            logger.warning("PositionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")

            if size == 0:
                # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                if symbol in self.active_positions:
                    await self._handle_position_closed(symbol)
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.active_positions[symbol] = position

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
            await self._check_position_safety(position)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
            # ‚ö†Ô∏è –í–ê–ñ–ù–û: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SL –æ—Ç–∫–ª—é—á–µ–Ω, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TrailingSL
            # TrailingSL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ orchestrator._update_trailing_stop_loss
            # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ TP (Take Profit)
            await self._check_tp_only(position)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_position_stats(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {e}")

    async def _check_position_safety(self, position: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            leverage = int(position.get("lever", "3"))

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ –ø–æ–ª—É—á–∞–µ–º equity —á–µ—Ä–µ–∑ get_margin_info!
            # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                margin_info = await self.client.get_margin_info(symbol)
                equity = margin_info.get("equity", 0)

                # –ï—Å–ª–∏ equity –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ margin_info, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–∞–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if equity == 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'eq' –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –≤ —Å–∞–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    if "eq" in position and position["eq"]:
                        try:
                            equity = float(position["eq"])
                            logger.debug(
                                f"‚úÖ equity –ø–æ–ª—É—á–µ–Ω –∏–∑ position['eq'] –¥–ª—è {symbol}: {equity:.2f}"
                            )
                        except (ValueError, TypeError):
                            pass

                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ fallback
                    if equity == 0:
                        equity = await self.client.get_balance()
                        logger.warning(
                            f"‚ö†Ô∏è equity –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ get_margin_info –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {equity:.2f}"
                        )
            except Exception as e:
                # Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ - —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                equity = 0
                try:
                    if "eq" in position and position["eq"]:
                        equity = float(position["eq"])
                        logger.debug(
                            f"‚úÖ equity –ø–æ–ª—É—á–µ–Ω –∏–∑ position['eq'] (fallback) –¥–ª—è {symbol}: {equity:.2f}"
                        )
                except (ValueError, TypeError):
                    pass

                if equity == 0:
                    equity = await self.client.get_balance()
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è equity –¥–ª—è {symbol}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {equity:.2f}"
                    )

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size –∏–∑ API –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö!
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            try:
                details = await self.client.get_instrument_details(symbol)
                ct_val = details.get("ctVal", 0.01)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC/ETH
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
                size_in_coins = abs(size) * ct_val
                # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
                position_value = size_in_coins * current_price
                logger.debug(
                    f"üìä –†–∞—Å—á–µ—Ç position_value –¥–ª—è {symbol}: "
                    f"size={size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, ctVal={ct_val}, "
                    f"size_in_coins={size_in_coins:.6f}, "
                    f"current_price={current_price:.2f}, "
                    f"position_value={position_value:.2f} USD"
                )
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ctVal –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: {e}"
                )
                # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ size —É–∂–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                size_in_coins = abs(size)
                position_value = size_in_coins * current_price
                logger.warning(
                    f"‚ö†Ô∏è Fallback —Ä–∞—Å—á–µ—Ç –¥–ª—è {symbol}: size_in_coins={size_in_coins:.6f}, position_value={position_value:.2f} USD"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Margin Calculator
            # ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º equity –∏–∑ –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å!
            logger.debug(
                f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {symbol}: "
                f"position_value={position_value:.2f}, equity={equity:.2f}, "
                f"current_price={current_price:.2f}, entry_price={entry_price:.2f}, "
                f"leverage={leverage}x"
            )
            is_safe, details = self.margin_calculator.is_position_safe(
                position_value,
                equity,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º equity –∏–∑ –ø–æ–∑–∏—Ü–∏–∏!
                current_price,
                entry_price,
                side,
                leverage,
                safety_threshold=1.5,
            )

            if not is_safe:
                margin_ratio = details["margin_ratio"]
                pnl = details.get("pnl", 0)
                available_margin = details.get("available_margin", 0)
                margin_used = details.get("margin_used", 0)

                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞: –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                )

                # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π (–∫–∞–∫ –≤ LiquidationGuard):
                # –ï—Å–ª–∏ margin_ratio <= 1.5 –∏ PnL –Ω–µ–±–æ–ª—å—à–æ–π - —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
                # –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                if margin_ratio <= 1.5 and abs(pnl) < 10:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} –≤ PositionManager: "
                        f"margin_ratio={margin_ratio:.2f}, available_margin={available_margin:.2f}, "
                        f"pnl={pnl:.2f}, equity={equity:.2f}. "
                        f"–í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞?), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                    )
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ

                # üõ°Ô∏è –ó–ê–©–ò–¢–ê 2: –ï—Å–ª–∏ margin_ratio = 0.0 –∏–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫ –∫ –Ω—É–ª—é - —ç—Ç–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞
                if margin_ratio <= 0.5 and equity > 0:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} –≤ PositionManager: "
                        f"margin_ratio={margin_ratio:.2f} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. "
                        f"–í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (equity={equity:.2f}, margin_used={margin_used:.2f}), "
                        f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                    )
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ

                # üõ°Ô∏è –ó–ê–©–ò–¢–ê 3: –ï—Å–ª–∏ available_margin —Å–∏–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ PnL –Ω–µ–±–æ–ª—å—à–æ–π - –æ—à–∏–±–∫–∞
                if available_margin < -1000 and abs(pnl) < 100:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {symbol} –≤ PositionManager: "
                        f"margin_ratio={margin_ratio:.2f}, available_margin={available_margin:.2f}, "
                        f"pnl={pnl:.2f}. –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                    )
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫!)
                # ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ margin_ratio –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
                # (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ)
                if margin_ratio < 1.2 and margin_ratio > 0:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é –º–∞—Ä–∂—É: {margin_ratio:.2f}%. –ó–∞–∫—Ä—ã—Ç–∏–µ..."
                    )
                    await self._emergency_close_position(position)
                elif margin_ratio <= 0:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π margin_ratio: {margin_ratio:.2f}%. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ."
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _check_tp_sl(self, position: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit –∏ Stop Loss (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è _check_tp_only)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è _check_tp_only
        await self._check_tp_only(position)

    async def _check_tp_only(self, position: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ Take Profit (SL —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è TrailingSL –≤ orchestrator)"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            side = position.get("posSide", "long")
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            leverage = int(position.get("lever", "3"))

            if size == 0:
                return

            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: PnL% –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç –ú–ê–†–ñ–ò, –∞ –Ω–µ –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞!
            # –ë–∏—Ä–∂–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç PnL% –æ—Ç –º–∞—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.89% –¥–ª—è ETH), –∞ –Ω–µ –æ—Ç —Ü–µ–Ω—ã (0.30%)
            # –ü–æ—ç—Ç–æ–º—É TP –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è —Å PnL% –æ—Ç –º–∞—Ä–∂–∏, –∏–Ω–∞—á–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è!

            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∂—É –ø–æ–∑–∏—Ü–∏–∏
            try:
                margin_info = await self.client.get_margin_info(symbol)
                margin_used = margin_info.get("margin", 0)
                # OKX API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "upl" –¥–ª—è unrealizedPnl
                unrealized_pnl = margin_info.get(
                    "upl", margin_info.get("unrealized_pnl", 0)
                )

                # –ï—Å–ª–∏ margin_info –Ω–µ –¥–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º –∏–∑ position
                if margin_used == 0:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ position –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
                    if "margin" in position:
                        margin_used = float(position["margin"])
                    elif "imr" in position:
                        margin_used = float(
                            position["imr"]
                        )  # Initial Margin Requirement
                    else:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                        # position_value = size_in_coins * entry_price
                        # margin = position_value / leverage
                        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal
                        try:
                            inst_details = await self.client.get_instrument_details(
                                symbol
                            )
                            ct_val = float(inst_details.get("ctVal", "0.01"))
                            size_in_coins = abs(size) * ct_val
                            position_value = size_in_coins * entry_price
                            margin_used = position_value / leverage
                        except Exception as e:
                            logger.debug(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å margin –¥–ª—è {symbol}: {e}"
                            )
                            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã)
                            if side.lower() == "long":
                                pnl_percent = (
                                    (current_price - entry_price) / entry_price * 100
                                )
                            else:
                                pnl_percent = (
                                    (entry_price - current_price) / entry_price * 100
                                )
                            logger.warning(
                                f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç PnL% –¥–ª—è {symbol}: {pnl_percent:.2f}% (–æ—Ç —Ü–µ–Ω—ã, –∞ –Ω–µ –æ—Ç –º–∞—Ä–∂–∏)"
                            )
                            tp_percent = self.scalping_config.tp_percent
                            if pnl_percent >= tp_percent:
                                logger.info(
                                    f"üéØ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: {pnl_percent:.2f}%"
                                )
                                await self._close_position_by_reason(position, "tp")
                            return
            except Exception as e:
                logger.debug(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å margin_info –¥–ª—è {symbol}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback"
                )
                margin_used = 0
                unrealized_pnl = 0

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ margin, —Å—á–∏—Ç–∞–µ–º PnL% –æ—Ç –º–∞—Ä–∂–∏
            if margin_used > 0:
                # –ü–æ–ª—É—á–∞–µ–º unrealizedPnl –∏–∑ position –∏–ª–∏ margin_info
                if unrealized_pnl == 0:
                    if "upl" in position:
                        unrealized_pnl = float(position["upl"])
                    elif "unrealizedPnl" in position:
                        unrealized_pnl = float(position["unrealizedPnl"])
                    else:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –≤—Ä—É—á–Ω—É—é
                        try:
                            inst_details = await self.client.get_instrument_details(
                                symbol
                            )
                            ct_val = float(inst_details.get("ctVal", "0.01"))
                            size_in_coins = abs(size) * ct_val
                            if side.lower() == "long":
                                unrealized_pnl = size_in_coins * (
                                    current_price - entry_price
                                )
                            else:
                                unrealized_pnl = size_in_coins * (
                                    entry_price - current_price
                                )
                        except Exception:
                            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã
                            if side.lower() == "long":
                                pnl_percent = (
                                    (current_price - entry_price) / entry_price * 100
                                )
                            else:
                                pnl_percent = (
                                    (entry_price - current_price) / entry_price * 100
                                )
                            logger.warning(
                                f"‚ö†Ô∏è Fallback —Ä–∞—Å—á–µ—Ç PnL% –¥–ª—è {symbol}: {pnl_percent:.2f}%"
                            )
                            tp_percent = self.scalping_config.tp_percent
                            if pnl_percent >= tp_percent:
                                logger.info(
                                    f"üéØ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: {pnl_percent:.2f}%"
                                )
                                await self._close_position_by_reason(position, "tp")
                            return

                # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢: PnL% –æ—Ç –º–∞—Ä–∂–∏ (–∫–∞–∫ –Ω–∞ –±–∏—Ä–∂–µ!)
                pnl_percent = (unrealized_pnl / margin_used) * 100
                logger.debug(
                    f"üìä TP –ø—Ä–æ–≤–µ—Ä–∫–∞ {symbol}: PnL=${unrealized_pnl:.2f}, "
                    f"margin=${margin_used:.2f}, PnL%={pnl_percent:.2f}% (–æ—Ç –º–∞—Ä–∂–∏)"
                )
            else:
                # Fallback: –µ—Å–ª–∏ margin –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã
                if side.lower() == "long":
                    pnl_percent = (current_price - entry_price) / entry_price * 100
                else:
                    pnl_percent = (entry_price - current_price) / entry_price * 100
                logger.warning(
                    f"‚ö†Ô∏è Fallback: PnL% –¥–ª—è {symbol} —Å—á–∏—Ç–∞–µ–º –æ—Ç —Ü–µ–Ω—ã: {pnl_percent:.2f}%"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit
            tp_percent = self.scalping_config.tp_percent
            if pnl_percent >= tp_percent:
                logger.info(
                    f"üéØ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: {pnl_percent:.2f}% "
                    f"(TP={tp_percent:.2f}%, PnL=${unrealized_pnl:.2f}, margin=${margin_used:.2f})"
                )
                await self._close_position_by_reason(position, "tp")
                return
            else:
                logger.debug(
                    f"üìä {symbol} PnL={pnl_percent:.2f}% < TP={tp_percent:.2f}% "
                    f"(–Ω—É–∂–Ω–æ –µ—â–µ {tp_percent - pnl_percent:.2f}%)"
                )

            # ‚ö†Ô∏è Stop Loss –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TrailingSL –∏–∑ orchestrator
            # TrailingSL –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥/—Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TP: {e}")

    async def _close_position_by_reason(self, position: Dict[str, Any], reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
            # –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º, —Ç–∞–∫ –∫–∞–∫ position –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
            actual_positions = await self.client.get_positions(symbol)

            # –ò—â–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            actual_position = None
            for pos in actual_positions:
                inst_id = pos.get("instId", "").replace("-SWAP", "")
                if inst_id == symbol:
                    size = float(pos.get("pos", "0"))
                    if size != 0:  # –ü–æ–∑–∏—Ü–∏—è –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞
                        actual_position = pos
                        break

            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if actual_position is None:
                logger.info(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
                )
                if symbol in self.active_positions:
                    del self.active_positions[symbol]
                return

            size = float(actual_position.get("pos", "0"))
            side = actual_position.get("posSide", "long")

            logger.info(
                f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}, —Ä–∞–∑–º–µ—Ä={size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "sell" if side.lower() == "long" else "buy"

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            # ‚ö†Ô∏è size –∏–∑ API —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö, –ø–æ—ç—Ç–æ–º—É size_in_contracts=True
            result = await self.client.place_futures_order(
                symbol=symbol,
                side=close_side,
                size=abs(size),
                order_type="market",
                size_in_contracts=True,  # size –∏–∑ API —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
            )

            if result.get("code") == "0":
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ {reason}")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_close_stats(reason)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.active_positions:
                    del self.active_positions[symbol]
            else:
                error_msg = result.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {error_msg}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _emergency_close_position(self, position: Dict[str, Any]):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò: {symbol}")

            await self._close_position_by_reason(position, "emergency")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _handle_position_closed(self, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol in self.active_positions:
                position = self.active_positions[symbol]

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.position_history.append(
                    {
                        "symbol": symbol,
                        "position": position,
                        "close_time": datetime.now(),
                        "close_reason": "manual",
                    }
                )

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                del self.active_positions[symbol]

                logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _update_position_stats(self, position: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get("instId", "").replace("-SWAP", "")
            size = float(position.get("pos", "0"))
            entry_price = float(position.get("avgPx", "0"))
            current_price = float(position.get("markPx", "0"))
            side = position.get("posSide", "long")

            if size == 0:
                return

            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size –∏–∑ API –≤ –ö–û–ù–¢–†–ê–ö–¢–ê–•!
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º PnL
            try:
                details = await self.client.get_instrument_details(symbol)
                ct_val = details.get("ctVal", 0.01)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC/ETH
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
                size_in_coins = abs(size) * ct_val
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ctVal –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}"
                )
                # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ size —É–∂–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                size_in_coins = abs(size)

            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤ –º–æ–Ω–µ—Ç–∞—Ö)
            if side.lower() == "long":
                pnl = (current_price - entry_price) * size_in_coins
            else:  # short
                pnl = (entry_price - current_price) * size_in_coins

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ PnL
            self.management_stats["total_pnl"] += pnl

            logger.debug(
                f"üìà –ü–æ–∑–∏—Ü–∏—è {symbol}: PnL = {pnl:.2f} USDT (size={size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ = {size_in_coins:.6f} –º–æ–Ω–µ—Ç)"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _update_close_stats(self, reason: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            self.management_stats["closed_positions"] += 1

            if reason == "tp":
                self.management_stats["tp_closed"] += 1
            elif reason == "sl":
                self.management_stats["sl_closed"] += 1
            elif reason == "emergency":
                self.management_stats["manual_closed"] += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

    async def close_position_manually(self, symbol: str) -> Dict[str, Any]:
        """
        ‚úÖ –†–£–ß–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò (–¥–ª—è TrailingSL)

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ API –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å OCO
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: get_positions() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–ü–ò–°–û–ö, –Ω–µ dict!
            positions = await self.client.get_positions(symbol)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ positions —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(positions, list) or len(positions) == 0:
                logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π)")
                return {"success": False, "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

            # –ò—â–µ–º –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ
            for pos_data in positions:
                inst_id = pos_data.get("instId", "").replace("-SWAP", "")
                if inst_id != symbol:
                    continue

                size = float(pos_data.get("pos", "0"))
                if size == 0:
                    logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol} = 0, –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
                    return {
                        "success": True,
                        "symbol": symbol,
                        "message": "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞",
                    }

                side = pos_data.get("posSide", "long")

                logger.info(
                    f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {side} —Ä–∞–∑–º–µ—Ä={size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
                )

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
                close_side = "sell" if side.lower() == "long" else "buy"

                # ‚úÖ –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                # ‚ö†Ô∏è size –∏–∑ API —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö, –ø–æ—ç—Ç–æ–º—É size_in_contracts=True
                # ‚ö†Ô∏è –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º reduceOnly –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                result = await self.client.place_futures_order(
                    symbol=symbol,
                    side=close_side,
                    size=abs(size),
                    order_type="market",
                    size_in_contracts=True,  # size –∏–∑ API —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
                )

                if result.get("code") == "0":
                    logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ API")
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    if symbol in self.active_positions:
                        del self.active_positions[symbol]
                    return {"success": True, "symbol": symbol}
                else:
                    error_msg = result.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    error_code = result.get("data", [{}])[0].get("sCode", "")

                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                    if (
                        error_code in ["51008", "51000"]
                        and "insufficient" in error_msg.lower()
                    ):
                        logger.warning(
                            f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ..."
                        )
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        check_positions = await self.client.get_positions(symbol)
                        found_open = False
                        for pos in check_positions:
                            if float(pos.get("pos", "0")) != 0:
                                found_open = True
                                break
                        if not found_open:
                            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
                            if symbol in self.active_positions:
                                del self.active_positions[symbol]
                            return {
                                "success": True,
                                "symbol": symbol,
                                "message": "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞",
                            }

                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {error_msg} (–∫–æ–¥: {error_code})"
                    )
                    return {"success": False, "error": error_msg}

            return {"success": False, "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ"}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def close_all_positions(self) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            closed_count = 0
            errors = []

            symbols_to_close = list(self.active_positions.keys())

            for symbol in symbols_to_close:
                result = await self.close_position_manually(symbol)
                if result.get("success"):
                    closed_count += 1
                else:
                    errors.append(f"{symbol}: {result.get('error')}")

            logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}")

            return {"success": True, "closed_count": closed_count, "errors": errors}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"success": False, "error": str(e)}

    async def get_position_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        try:
            total_pnl = 0.0
            position_details = []

            for symbol, position in self.active_positions.items():
                size = float(position.get("pos", "0"))
                entry_price = float(position.get("avgPx", "0"))
                current_price = float(position.get("markPx", "0"))
                side = position.get("posSide", "long")

                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size –∏–∑ API –≤ –ö–û–ù–¢–†–ê–ö–¢–ê–•!
                # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ctVal –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º PnL
                try:
                    details = await self.client.get_instrument_details(symbol)
                    ct_val = details.get("ctVal", 0.01)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC/ETH
                    # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
                    size_in_coins = abs(size) * ct_val
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ctVal –¥–ª—è {symbol} –≤ get_position_summary: {e}"
                    )
                    # Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ size —É–∂–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    size_in_coins = abs(size)

                # –†–∞—Å—á–µ—Ç PnL (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤ –º–æ–Ω–µ—Ç–∞—Ö)
                if side.lower() == "long":
                    pnl = (current_price - entry_price) * size_in_coins
                else:  # short
                    pnl = (entry_price - current_price) * size_in_coins

                total_pnl += pnl

                # –†–∞—Å—á–µ—Ç PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ USD)
                position_value_usd = size_in_coins * entry_price
                pnl_percent = (
                    (pnl / position_value_usd * 100) if position_value_usd > 0 else 0.0
                )

                position_details.append(
                    {
                        "symbol": symbol,
                        "side": side,
                        "size": size,  # –í –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
                        "size_in_coins": size_in_coins,  # –í –º–æ–Ω–µ—Ç–∞—Ö (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞)
                        "entry_price": entry_price,
                        "current_price": current_price,
                        "pnl": pnl,
                        "pnl_percent": pnl_percent,
                    }
                )

            return {
                "active_positions_count": len(self.active_positions),
                "total_pnl": total_pnl,
                "positions": position_details,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {e}")
            return {"error": str(e)}

    def get_management_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            total = self.management_stats["total_positions"]
            closed = self.management_stats["closed_positions"]

            tp_rate = (
                (self.management_stats["tp_closed"] / closed * 100) if closed > 0 else 0
            )
            sl_rate = (
                (self.management_stats["sl_closed"] / closed * 100) if closed > 0 else 0
            )

            return {
                "total_positions": total,
                "closed_positions": closed,
                "active_positions": len(self.active_positions),
                "tp_closed": self.management_stats["tp_closed"],
                "sl_closed": self.management_stats["sl_closed"],
                "manual_closed": self.management_stats["manual_closed"],
                "tp_rate": tp_rate,
                "sl_rate": sl_rate,
                "total_pnl": self.management_stats["total_pnl"],
                "last_position_time": self.position_history[-1]["close_time"]
                if self.position_history
                else None,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": str(e)}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BotConfig(
        api_key="test_key",
        secret_key="test_secret",
        passphrase="test_passphrase",
        sandbox=True,
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ margin calculator
    client = OKXFuturesClient("test_key", "test_secret", "test_passphrase")
    margin_calculator = MarginCalculator()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
    manager = FuturesPositionManager(config, client, margin_calculator)

    print("FuturesPositionManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
