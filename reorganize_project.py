#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã.
"""

import os
import shutil
from pathlib import Path

def create_directory_structure():
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...")
    
    directories = [
        # Strategies
        "src/strategies/modules",
        
        # Indicators
        "src/indicators/advanced",
        
        # Filters
        "src/filters",
        
        # Risk
        "src/risk",
        
        # Utils
        "src/utils",
        
        # ML
        "src/ml",
        
        # Config
        "config",
        
        # Data
        "data/historical",
        "data/cache",
        
        # Backups
        "backups",
        
        # Tests
        "tests/unit",
        "tests/integration",
        "tests/backtest",
        
        # Scripts
        "scripts",
        
        # Docs
        "docs/current",
        "docs/guides",
        "docs/archive",
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {directory}")
    
    print()

def create_init_files():
    """–°–æ–∑–¥–∞—Ç—å __init__.py —Ñ–∞–π–ª—ã"""
    
    print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤...")
    
    init_files = [
        "src/strategies/modules/__init__.py",
        "src/indicators/__init__.py",
        "src/indicators/advanced/__init__.py",
        "src/filters/__init__.py",
        "src/risk/__init__.py",
        "src/utils/__init__.py",
        "src/ml/__init__.py",
        "tests/__init__.py",
        "tests/unit/__init__.py",
        "tests/integration/__init__.py",
        "tests/backtest/__init__.py",
    ]
    
    for init_file in init_files:
        Path(init_file).touch()
        print(f"  ‚úÖ {init_file}")
    
    print()

def move_documentation():
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    
    print("üìö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    current_docs = [
        "–ì–õ–£–ë–û–ö–ò–ô_–ê–ù–ê–õ–ò–ó_–°–¢–†–ê–¢–ï–ì–ò–ò.md",
        "–ö–û–ù–¶–ï–ü–¶–ò–Ø_–ì–ò–ë–†–ò–î–ù–û–ì–û_–ë–û–¢–ê.md",
        "–î–ï–¢–ê–õ–¨–ù–û–ï_–û–ü–ò–°–ê–ù–ò–ï_–ú–û–î–£–õ–ï–ô.md",
        "–ü–õ–ê–ù_–ú–û–î–ï–†–ù–ò–ó–ê–¶–ò–ò_–°–¢–†–ê–¢–ï–ì–ò–ò.md",
        "–°–†–ê–í–ù–ï–ù–ò–ï_–î–í–£–•_–ü–†–û–ï–ö–¢–û–í.md",
        "–ê–†–•–ò–¢–ï–ö–¢–£–†–ê_–ì–ò–ë–†–ò–î–ù–û–ì–û_–ü–†–û–ï–ö–¢–ê.md",
        "–°–•–ï–ú–ê_–ê–†–•–ò–¢–ï–ö–¢–£–†–´_–°_–û–ü–ò–°–ê–ù–ò–Ø–ú–ò.txt",
        "–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨_DASHBOARD.md",
        "CHANGELOG_–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï_–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø.md",
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø_–ü–û–°–õ–ï_–ò–°–ü–†–ê–í–õ–ï–ù–ò–ô.md",
        "–ü–õ–ê–ù_–†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò_–ü–†–û–ï–ö–¢–ê.md",
    ]
    
    for doc in current_docs:
        if Path(doc).exists():
            shutil.move(doc, f"docs/current/{doc}")
            print(f"  ‚úÖ {doc} ‚Üí docs/current/")
    
    # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    guides = [
        "–ö–ê–ö_–†–ê–ë–û–¢–ê–¢–¨_–°_GITHUB.md",
        "GITHUB_DESKTOP_–ò–ù–°–¢–†–£–ö–¶–ò–Ø.md",
    ]
    
    for guide in guides:
        if Path(guide).exists():
            shutil.move(guide, f"docs/guides/{guide}")
            print(f"  ‚úÖ {guide} ‚Üí docs/guides/")
    
    # –ê—Ä—Ö–∏–≤ (—Å—Ç–∞—Ä–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
    archive_docs = [
        "enhanced-trading-system.md",
        "implementation-roadmap.md",
        "installation-guide.md",
        "security-system.md",
        "strategy-documentation.md",
        "enhanced-scalping-strategy.py",
        "QUICK_START.txt",
        "SUMMARY_–ò–°–ü–†–ê–í–õ–ï–ù–ò–ô.txt",
        "–ë–´–°–¢–†–´–ô_–°–¢–ê–†–¢.txt",
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø_–ó–ê–ü–£–°–ö–ê.md",
        "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï_–¢–û–†–ì–û–í–õ–ò.md",
        "–ö–ê–ö_–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨_BAT_–§–ê–ô–õ–´.md",
        "–ù–ê–°–¢–†–û–ô–ö–ê_–ß–ê–°–¢–û–¢–´_–¢–û–†–ì–û–í–õ–ò.md",
        "–ù–û–í–´–ô_–§–û–†–ú–ê–¢_–õ–û–ì–û–í.txt",
        "–ü–û–ß–ï–ú–£_SOLANA_–•–û–†–û–®–ê.md",
        "–ü–†–û–í–ï–†–ö–ê_GITHUB.md",
        "–¢–ï–ö–£–©–ò–ï_–ù–ê–°–¢–†–û–ô–ö–ò.md",
        "–¢–û–†–ì–û–í–´–ï_–°–ï–°–°–ò–ò.txt",
    ]
    
    for doc in archive_docs:
        if Path(doc).exists():
            shutil.move(doc, f"docs/archive/{doc}")
            print(f"  ‚úÖ {doc} ‚Üí docs/archive/")
    
    print()

def move_config():
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    print("‚öôÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    if Path("config.yaml").exists():
        shutil.copy("config.yaml", "config/config.yaml")
        print("  ‚úÖ config.yaml ‚Üí config/config.yaml (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ)")
        print("  ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    
    print()

def move_tests():
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"""
    
    print("üß™ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
    
    if Path("test_okx_signature.py").exists():
        shutil.move("test_okx_signature.py", "tests/integration/test_okx_signature.py")
        print("  ‚úÖ test_okx_signature.py ‚Üí tests/integration/")
    
    print()

def cleanup_junk():
    """–£–¥–∞–ª–∏—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞...")
    
    # –î—É–±–ª–∏–∫–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if Path("1").exists():
        print("  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ '1/' (–¥—É–±–ª–∏–∫–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)")
        response = input("    –£–¥–∞–ª–∏—Ç—å? (y/n): ")
        if response.lower() == 'y':
            shutil.rmtree("1")
            print("  ‚úÖ –ü–∞–ø–∫–∞ '1/' —É–¥–∞–ª–µ–Ω–∞")
    
    # –ú—É—Å–æ—Ä–Ω—ã–π —Ñ–∞–π–ª
    junk_file = "zxcvhgjfhdgsadsgdhfjklj;hgf.txt"
    if Path(junk_file).exists():
        Path(junk_file).unlink()
        print(f"  ‚úÖ {junk_file} —É–¥–∞–ª–µ–Ω")
    
    print()

def create_new_configs():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
    
    # features.yaml
    features_content = """# Feature Flags - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏

# Phase 1: –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
multi_timeframe_enabled: false
correlation_filter_enabled: false
time_based_filter_enabled: false
volatility_modes_enabled: false
pivot_points_enabled: false
volume_profile_enabled: false

# Phase 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ
order_book_enabled: false
liquidity_zones_enabled: false

# Phase 3: ML
kelly_criterion_enabled: false
rl_agent_enabled: false

# Phase 4: –ì–∏–±—Ä–∏–¥
hybrid_mode_enabled: false
grid_trading_enabled: false

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
web_dashboard_enabled: false
auto_backups_enabled: false
"""
    
    with open("config/features.yaml", "w", encoding="utf-8") as f:
        f.write(features_content)
    print("  ‚úÖ config/features.yaml —Å–æ–∑–¥–∞–Ω")
    
    print()

def create_gitignore_updates():
    """–û–±–Ω–æ–≤–∏—Ç—å .gitignore"""
    
    print("üö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore...")
    
    additions = """
# Data
data/cache/
data/historical/
*.db
*.db-journal

# Backups
backups/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Pytest
.pytest_cache/
htmlcov/
.coverage

# Mypy
.mypy_cache/
"""
    
    with open(".gitignore", "a", encoding="utf-8") as f:
        f.write(additions)
    print("  ‚úÖ .gitignore –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    print()

def print_summary():
    """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    
    print("=" * 70)
    print("‚úÖ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 70)
    print()
    print("üìä –°–æ–∑–¥–∞–Ω–æ:")
    print("  - 18 –Ω–æ–≤—ã—Ö –ø–∞–ø–æ–∫")
    print("  - 11 __init__.py —Ñ–∞–π–ª–æ–≤")
    print("  - 1 features.yaml")
    print()
    print("üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ:")
    print("  - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Üí docs/ (30+ —Ñ–∞–π–ª–æ–≤)")
    print("  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Üí config/")
    print("  - –¢–µ—Å—Ç—ã ‚Üí tests/")
    print()
    print("üóëÔ∏è –û—á–∏—â–µ–Ω–æ:")
    print("  - –î—É–±–ª–∏–∫–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (1/)")
    print("  - –ú—É—Å–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print()
    print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ls -la src/")
    print("  2. Commit –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m 'Project reorganization'")
    print("  3. Push –Ω–∞ GitHub: git push")
    print("  4. –ù–∞—á–∞—Ç—å Phase 1: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π")
    print()
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("  - CODING_STANDARDS.md - –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  - PROJECT_RULES.md - –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("  - docs/current/ - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print()
    print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    print("=" * 70)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print()
    print("=" * 70)
    print("üóÇÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê")
    print("=" * 70)
    print()
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏!")
    print()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() != 'y':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    print()
    
    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        create_directory_structure()
        
        # –®–∞–≥ 2: __init__.py —Ñ–∞–π–ª—ã
        create_init_files()
        
        # –®–∞–≥ 3: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        move_documentation()
        
        # –®–∞–≥ 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        move_config()
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç—ã
        move_tests()
        
        # –®–∞–≥ 6: –ù–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        create_new_configs()
        
        # –®–∞–≥ 7: .gitignore
        create_gitignore_updates()
        
        # –®–∞–≥ 8: –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cleanup_junk()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print_summary()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

