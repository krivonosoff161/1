"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞
WebSocket + Batch Amend + Maker Strategy
"""

import asyncio
import sys
from datetime import datetime

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(".")

from src.config import load_config
from src.models import OrderSide, OrderType
from src.okx_client import OKXClient
from src.strategies.scalping.batch_order_manager import BatchOrderManager
from src.websocket_order_executor import WebSocketOrderExecutor


async def test_websocket_latency():
    """–¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket vs REST"""
    print("üöÄ –¢–ï–°–¢ WEBSOCKET –õ–ê–¢–ï–ù–¢–ù–û–°–¢–ò")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –¢–µ—Å—Ç REST –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        print("üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ REST API...")
        start_time = datetime.utcnow()
        ticker = await client.get_ticker("BTC-USDT")
        rest_latency = (datetime.utcnow() - start_time).total_seconds() * 1000
        print(f"   REST API: {rest_latency:.1f} –º—Å")

        # –¢–µ—Å—Ç WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        print("üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ WebSocket...")
        ws_executor = WebSocketOrderExecutor(config.api["okx"])
        if await ws_executor.connect():
            ws_latency = await ws_executor.get_latency()
            print(f"   WebSocket: {ws_latency:.1f} –º—Å")

            improvement = rest_latency - ws_latency
            improvement_percent = (improvement / rest_latency) * 100
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f} –º—Å ({improvement_percent:.1f}%)")

            await ws_executor.disconnect()
        else:
            print("   ‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")

        await client.disconnect()
        return {
            "rest": rest_latency,
            "websocket": ws_latency,
            "improvement": improvement,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ WebSocket: {e}")
        return None


async def test_batch_efficiency():
    """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Batch Amend"""
    print("\nüîÑ –¢–ï–°–¢ BATCH AMEND –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        batch_manager = BatchOrderManager(client)

        # –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("üìä –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        start_time = datetime.utcnow()

        for i in range(5):
            batch_manager.add_order_update(
                inst_id="BTC-USDT", ord_id=f"individual_{i}", new_px="50000.0"
            )

        result = await batch_manager.force_flush()
        individual_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        print(f"   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ: {individual_time:.1f} –º—Å")

        # –¢–µ—Å—Ç batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("üìä –¢–µ—Å—Ç batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        start_time = datetime.utcnow()

        orders_data = []
        for i in range(10):
            orders_data.append(
                {"instId": "BTC-USDT", "ordId": f"batch_{i}", "newPx": f"{50000 + i}.0"}
            )

        result = await client.batch_amend_orders(orders_data)
        batch_time = (datetime.utcnow() - start_time).total_seconds() * 1000
        print(f"   Batch: {batch_time:.1f} –º—Å")

        if individual_time > 0 and batch_time > 0:
            improvement = individual_time - batch_time
            improvement_percent = (improvement / individual_time) * 100
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f} –º—Å ({improvement_percent:.1f}%)")

        await client.disconnect()
        return {
            "individual": individual_time,
            "batch": batch_time,
            "improvement": improvement,
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Batch: {e}")
        return None


async def test_maker_commission_savings():
    """–¢–µ—Å—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–º–∏—Å—Å–∏–π Maker Strategy"""
    print("\nüí∞ –¢–ï–°–¢ –≠–ö–û–ù–û–ú–ò–ò –ö–û–ú–ò–°–°–ò–ô MAKER")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await client.get_ticker("BTC-USDT")
        current_price = float(ticker.get("last", 0))

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
        test_sizes = [50, 100, 200, 500, 1000]

        print(f"üìä –≠–∫–æ–Ω–æ–º–∏—è –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price:.2f}")
        print()

        total_savings = 0
        for size in test_sizes:
            maker_commission = size * 0.0008  # 0.08%
            taker_commission = size * 0.001  # 0.10%
            savings = taker_commission - maker_commission
            savings_percent = (savings / taker_commission) * 100

            print(f"   ${size:4d}: –≠–∫–æ–Ω–æ–º–∏—è ${savings:.4f} ({savings_percent:.1f}%)")
            total_savings += savings

        print(f"\nüíé –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ ${sum(test_sizes)}: ${total_savings:.4f}")

        await client.disconnect()
        return {"total_savings": total_savings, "sizes": test_sizes}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        return None


async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–°–ï–• –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 50)

    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # WebSocket Order Executor
        ws_executor = WebSocketOrderExecutor(config.api["okx"])
        ws_connected = await ws_executor.connect()
        print(f"   WebSocket: {'‚úÖ' if ws_connected else '‚ùå'}")

        # Batch Order Manager
        batch_manager = BatchOrderManager(client)
        print(f"   Batch Manager: ‚úÖ")

        # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if ws_connected:
            print("\nüìä –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await client.get_ticker("BTC-USDT")
            current_price = float(ticker.get("last", 0))

            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

            # 1. WebSocket entry (–±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥)
            print("   üöÄ WebSocket entry attempt...")
            start_time = datetime.utcnow()

            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
            test_quantity = 0.0001
            order = await ws_executor.place_market_order(
                symbol="BTC-USDT",
                side=OrderSide.BUY,
                quantity=test_quantity,
                price=current_price,
            )

            entry_time = (datetime.utcnow() - start_time).total_seconds() * 1000

            if order:
                print(f"   ‚úÖ WebSocket entry: {entry_time:.1f} –º—Å")

                # 2. Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TP/SL
                print("   üîÑ Batch TP/SL update...")
                start_time = datetime.utcnow()

                result = await batch_manager.update_tp_sl_batch(
                    inst_id="BTC-USDT",
                    tp_ord_id="test_tp_123",
                    sl_ord_id="test_sl_123",
                    new_tp_price="51000.0",
                    new_sl_price="49000.0",
                )

                batch_time = (datetime.utcnow() - start_time).total_seconds() * 1000
                print(f"   ‚úÖ Batch update: {batch_time:.1f} –º—Å")

                # 3. Maker Strategy (POST-ONLY –ø–æ–ø—ã—Ç–∫–∞)
                print("   üéØ POST-ONLY attempt...")
                start_time = datetime.utcnow()

                maker_price = current_price * 0.9995  # -0.05%
                maker_order = await client.place_order(
                    symbol="BTC-USDT",
                    side=OrderSide.BUY,
                    order_type=OrderType.LIMIT,
                    quantity=test_quantity,
                    price=maker_price,
                    post_only=True,
                )

                maker_time = (datetime.utcnow() - start_time).total_seconds() * 1000

                if maker_order:
                    print(f"   ‚úÖ POST-ONLY: {maker_time:.1f} –º—Å (0.08% –∫–æ–º–∏—Å—Å–∏—è)")
                else:
                    print(
                        f"   ‚ö†Ô∏è POST-ONLY failed: {maker_time:.1f} –º—Å (fallback –Ω–∞ MARKET)"
                    )

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_time = entry_time + batch_time + maker_time
                print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   WebSocket entry: {entry_time:.1f} –º—Å")
                print(f"   Batch update: {batch_time:.1f} –º—Å")
                print(f"   Maker attempt: {maker_time:.1f} –º—Å")
                print(f"   Total time: {total_time:.1f} –º—Å")

            else:
                print(f"   ‚ùå WebSocket entry failed: {entry_time:.1f} –º—Å")

        # Cleanup
        await ws_executor.disconnect()
        await client.disconnect()

        return {"websocket": ws_connected, "integration": True}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return None


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 70)

    results = {}

    # –¢–µ—Å—Ç 1: WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    results["websocket"] = await test_websocket_latency()

    # –¢–µ—Å—Ç 2: Batch —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    results["batch"] = await test_batch_efficiency()

    # –¢–µ—Å—Ç 3: Maker –∫–æ–º–∏—Å—Å–∏–∏
    results["maker"] = await test_maker_commission_savings()

    # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    results["integration"] = await test_integration()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 70)

    if results["websocket"]:
        ws_data = results["websocket"]
        print(f"üöÄ WebSocket Entry:")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {ws_data['improvement']:.1f} –º—Å")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +20-30%")

    if results["batch"]:
        batch_data = results["batch"]
        print(f"üîÑ Batch Amend:")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {batch_data['improvement']:.1f} –º—Å")
        print(f"   API calls: -90%")

    if results["maker"]:
        maker_data = results["maker"]
        print(f"üí∞ Maker Strategy:")
        print(f"   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${maker_data['total_savings']:.4f}")
        print(f"   –ö–æ–º–∏—Å—Å–∏–∏: -20%")

    if results["integration"]:
        print(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
        print(f"   –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ‚úÖ")
        print(f"   –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞: ‚úÖ")

    print("\n‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 70)


if __name__ == "__main__":
    asyncio.run(main())
