"""
WebSocket Manager –¥–ª—è OKX Trading Bot
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç real-time –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX WebSocket API
"""

import asyncio
import json
import logging
import time
from typing import Dict, List, Optional, Callable, Any
import websockets
from websockets.exceptions import ConnectionClosed, WebSocketException
import threading
from dataclasses import dataclass
from datetime import datetime, timezone

logger = logging.getLogger(__name__)

@dataclass
class WebSocketConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    url: str = "wss://ws.okx.com:8443/ws/v5/public"
    private_url: str = "wss://ws.okx.com:8443/ws/v5/private"
    ping_interval: int = 20
    ping_timeout: int = 10
    close_timeout: int = 10
    max_size: int = 2**20  # 1MB
    reconnect_interval: int = 5
    max_reconnect_attempts: int = 10

@dataclass
class PriceData:
    """–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ"""
    symbol: str
    price: float
    timestamp: float
    volume: float = 0.0
    bid: float = 0.0
    ask: float = 0.0

@dataclass
class OrderUpdate:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
    order_id: str
    symbol: str
    side: str
    status: str
    price: float
    quantity: float
    timestamp: float

class WebSocketPriceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, config: WebSocketConfig):
        self.config = config
        self.websocket = None
        self.is_connected = False
        self.is_running = False
        self.subscriptions = set()
        self.price_callbacks: List[Callable[[PriceData], None]] = []
        self.error_callbacks: List[Callable[[Exception], None]] = []
        self.latency_data = []
        self.last_ping_time = 0
        self.reconnect_attempts = 0
        self._lock = threading.Lock()
        
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            logger.info("üîå Connecting to OKX WebSocket...")
            self.websocket = await websockets.connect(
                self.config.url,
                ping_interval=self.config.ping_interval,
                ping_timeout=self.config.ping_timeout,
                close_timeout=self.config.close_timeout,
                max_size=self.config.max_size
            )
            self.is_connected = True
            self.reconnect_attempts = 0
            logger.info("‚úÖ WebSocket connected successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå WebSocket connection failed: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        self.is_running = False
        if self.websocket:
            await self.websocket.close()
            self.is_connected = False
            logger.info("üîå WebSocket disconnected")
    
    async def subscribe_ticker(self, symbols: List[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã"""
        if not self.is_connected:
            logger.error("‚ùå WebSocket not connected")
            return False
            
        try:
            subscription = {
                "op": "subscribe",
                "args": [{"channel": "tickers", "instId": symbol} for symbol in symbols]
            }
            
            await self.websocket.send(json.dumps(subscription))
            self.subscriptions.update(symbols)
            logger.info(f"üì° Subscribed to tickers: {symbols}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Subscription failed: {e}")
            return False
    
    async def subscribe_candles(self, symbols: List[str], timeframe: str = "5m"):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–≤–µ—á–∏"""
        if not self.is_connected:
            logger.error("‚ùå WebSocket not connected")
            return False
            
        try:
            subscription = {
                "op": "subscribe",
                "args": [{"channel": "candle" + timeframe, "instId": symbol} for symbol in symbols]
            }
            
            await self.websocket.send(json.dumps(subscription))
            logger.info(f"üìä Subscribed to candles {timeframe}: {symbols}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Candle subscription failed: {e}")
            return False
    
    def add_price_callback(self, callback: Callable[[PriceData], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω"""
        self.price_callbacks.append(callback)
    
    def add_error_callback(self, callback: Callable[[Exception], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_callbacks.append(callback)
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket"""
        if not self.is_connected:
            logger.error("‚ùå WebSocket not connected")
            return
            
        self.is_running = True
        logger.info("üéß Starting WebSocket listener...")
        
        try:
            async for message in self.websocket:
                if not self.is_running:
                    break
                    
                try:
                    data = json.loads(message)
                    await self._handle_message(data)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå JSON decode error: {e}")
                except Exception as e:
                    logger.error(f"‚ùå Message handling error: {e}")
                    
        except ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket connection closed")
            await self._handle_reconnect()
        except WebSocketException as e:
            logger.error(f"‚ùå WebSocket error: {e}")
            await self._handle_reconnect()
        except Exception as e:
            logger.error(f"‚ùå Unexpected error: {e}")
            for callback in self.error_callbacks:
                try:
                    callback(e)
                except Exception as cb_e:
                    logger.error(f"‚ùå Callback error: {cb_e}")
    
    async def _handle_message(self, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if "data" in data:
            for item in data["data"]:
                if "arg" in item and "data" in item:
                    channel = item["arg"].get("channel", "")
                    inst_id = item["arg"].get("instId", "")
                    
                    if channel == "tickers":
                        await self._handle_ticker_data(inst_id, item["data"])
                    elif channel.startswith("candle"):
                        await self._handle_candle_data(inst_id, item["data"])
    
    async def _handle_ticker_data(self, symbol: str, data: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        if not data:
            return
            
        ticker = data[0]
        try:
            price_data = PriceData(
                symbol=symbol,
                price=float(ticker.get("last", 0)),
                timestamp=float(ticker.get("ts", 0)) / 1000,
                volume=float(ticker.get("vol24h", 0)),
                bid=float(ticker.get("bidPx", 0)),
                ask=float(ticker.get("askPx", 0))
            )
            
            # –í—ã–∑–æ–≤ callbacks
            for callback in self.price_callbacks:
                try:
                    callback(price_data)
                except Exception as e:
                    logger.error(f"‚ùå Price callback error: {e}")
                    
        except (ValueError, KeyError) as e:
            logger.error(f"‚ùå Ticker data parsing error: {e}")
    
    async def _handle_candle_data(self, symbol: str, data: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        if not data:
            return
            
        candle = data[0]
        try:
            # –î–ª—è —Å–≤–µ—á–µ–π —Å–æ–∑–¥–∞–µ–º PriceData —Å —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
            price_data = PriceData(
                symbol=symbol,
                price=float(candle[4]),  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                timestamp=float(candle[0]) / 1000,
                volume=float(candle[5])
            )
            
            # –í—ã–∑–æ–≤ callbacks
            for callback in self.price_callbacks:
                try:
                    callback(price_data)
                except Exception as e:
                    logger.error(f"‚ùå Candle callback error: {e}")
                    
        except (ValueError, IndexError) as e:
            logger.error(f"‚ùå Candle data parsing error: {e}")
    
    async def _handle_reconnect(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.reconnect_attempts >= self.config.max_reconnect_attempts:
            logger.error("‚ùå Max reconnection attempts reached")
            self.is_running = False
            return
            
        self.reconnect_attempts += 1
        logger.info(f"üîÑ Reconnecting... attempt {self.reconnect_attempts}")
        
        await asyncio.sleep(self.config.reconnect_interval)
        
        if await self.connect():
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            if self.subscriptions:
                await self.subscribe_ticker(list(self.subscriptions))
            await self.start_listening()
    
    def get_latency(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        if not self.latency_data:
            return 0.0
        return sum(self.latency_data) / len(self.latency_data)
    
    def get_connection_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return {
            "connected": self.is_connected,
            "running": self.is_running,
            "subscriptions": list(self.subscriptions),
            "latency": self.get_latency(),
            "reconnect_attempts": self.reconnect_attempts
        }

class LatencyMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ WebSocket"""
    
    def __init__(self, max_samples: int = 100):
        self.max_samples = max_samples
        self.latency_samples = []
        self.last_ping_time = 0
        self._lock = threading.Lock()
    
    def record_ping(self):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ ping"""
        with self._lock:
            self.last_ping_time = time.time()
    
    def record_pong(self):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ pong –∏ —Ä–∞—Å—á–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if self.last_ping_time > 0:
                latency = (time.time() - self.last_ping_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                self.latency_samples.append(latency)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
                if len(self.latency_samples) > self.max_samples:
                    self.latency_samples.pop(0)
                
                self.last_ping_time = 0
    
    def get_average_latency(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if not self.latency_samples:
                return 0.0
            return sum(self.latency_samples) / len(self.latency_samples)
    
    def get_max_latency(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if not self.latency_samples:
                return 0.0
            return max(self.latency_samples)
    
    def get_latency_stats(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if not self.latency_samples:
                return {"avg": 0.0, "max": 0.0, "min": 0.0, "count": 0}
            
            return {
                "avg": sum(self.latency_samples) / len(self.latency_samples),
                "max": max(self.latency_samples),
                "min": min(self.latency_samples),
                "count": len(self.latency_samples)
            }

class EnhancedLatencyMonitor(LatencyMonitor):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self, max_samples: int = 100, warning_threshold: float = 100.0, critical_threshold: float = 500.0):
        super().__init__(max_samples)
        self.warning_threshold = warning_threshold
        self.critical_threshold = critical_threshold
        self.warning_callbacks = []
        self.critical_callbacks = []
    
    def add_warning_callback(self, callback: Callable[[float], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        self.warning_callbacks.append(callback)
    
    def add_critical_callback(self, callback: Callable[[float], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫"""
        self.critical_callbacks.append(callback)
    
    def record_pong(self):
        """–ó–∞–ø–∏—Å—å pong —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        super().record_pong()
        
        current_latency = self.get_average_latency()
        
        if current_latency > self.critical_threshold:
            logger.warning(f"üö® CRITICAL LATENCY: {current_latency:.2f}ms")
            for callback in self.critical_callbacks:
                try:
                    callback(current_latency)
                except Exception as e:
                    logger.error(f"‚ùå Critical callback error: {e}")
        elif current_latency > self.warning_threshold:
            logger.warning(f"‚ö†Ô∏è HIGH LATENCY: {current_latency:.2f}ms")
            for callback in self.warning_callbacks:
                try:
                    callback(current_latency)
                except Exception as e:
                    logger.error(f"‚ùå Warning callback error: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
websocket_manager = None
latency_monitor = None

def initialize_websocket(config: WebSocketConfig = None) -> WebSocketPriceManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global websocket_manager, latency_monitor
    
    if config is None:
        config = WebSocketConfig()
    
    websocket_manager = WebSocketPriceManager(config)
    latency_monitor = EnhancedLatencyMonitor()
    
    return websocket_manager

def get_websocket_manager() -> Optional[WebSocketPriceManager]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return websocket_manager

def get_latency_monitor() -> Optional[EnhancedLatencyMonitor]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    return latency_monitor

