#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX
–ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π - —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.websocket_manager import WebSocketPriceManager, WebSocketConfig

async def test_simple_websocket():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üß™ Simple WebSocket Connection Test")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("‚öôÔ∏è Creating WebSocket config...")
        config = WebSocketConfig()
        print(f"   URL: {config.url}")
        print(f"   Ping interval: {config.ping_interval}")
        
        # –°–æ–∑–¥–∞–µ–º WebSocket Manager
        print("üîå Creating WebSocket Manager...")
        manager = WebSocketPriceManager(config)
        print(f"   Connected: {manager.is_connected}")
        print(f"   Running: {manager.is_running}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        print("üöÄ Attempting connection...")
        connected = await manager.connect()
        
        if connected:
            print("‚úÖ WebSocket connected successfully!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = manager.get_connection_status()
            print(f"   Status: {status}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            print("üìä Testing subscription...")
            await manager.subscribe_ticker("BTC-USDT")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            print("‚è≥ Waiting for data (3 seconds)...")
            await asyncio.sleep(3)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            print("üîå Disconnecting...")
            await manager.disconnect()
            print("‚úÖ Disconnected successfully!")
            
            return True
        else:
            print("‚ùå Failed to connect")
            return False
            
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_simple_websocket())
    
    if result:
        print("üéâ Test PASSED!")
    else:
        print("üí• Test FAILED!")
        sys.exit(1)

