import sys

sys.path.append("src")
import asyncio
import json

from src.config import load_config
from src.okx_client import OKXClient


async def get_exchange_data():
    print("üîç –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö OKX...")
    try:
        config = load_config()
        client = OKXClient(config.api["okx"])
        await client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    print("\nüí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        result = await client._make_request("GET", "/account/balance")
        print("üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏:")
        print(json.dumps(result, indent=2))

        # –ü–∞—Ä—Å–∏–º –±–∞–ª–∞–Ω—Å
        if "data" in result and result["data"]:
            for account in result["data"]:
                print(f'\nüìà –ê–∫–∫–∞—É–Ω—Ç: {account.get("acctLv", "unknown")}')
                print(f"üí∞ –î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞:")
                for detail in account.get("details", []):
                    currency = detail.get("ccy", "unknown")
                    available = float(detail.get("availBal", 0))
                    frozen = float(detail.get("frozenBal", 0))
                    total = available + frozen
                    if total > 0:
                        print(
                            f"  {currency}: {total:.6f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available:.6f}, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {frozen:.6f})"
                        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    print("\nüìã –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í...")
    try:
        orders = await client.get_open_orders()
        print(f"üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
        if orders:
            for order in orders:
                print(
                    f"  {order.symbol} {order.side} {order.size} @ {order.price} - {order.status}"
                )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô...")
    try:
        positions = await client.get_positions()
        print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        if positions:
            for pos in positions:
                print(f"  {pos.symbol} {pos.side} {pos.size} PnL: {pos.unrealized_pnl}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

    print("\nüìä –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
        history_result = await client._make_request(
            "GET", "/trade/orders-history?instType=SPOT&limit=20"
        )
        print(f"üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤:")
        print(json.dumps(history_result, indent=2))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    await client.disconnect()


# –ó–∞–ø—É—Å–∫–∞–µ–º
if __name__ == "__main__":
    asyncio.run(get_exchange_data())
