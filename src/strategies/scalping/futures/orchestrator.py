"""
Futures Orchestrator –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏:
- FuturesSignalGenerator
- FuturesOrderExecutor
- FuturesPositionManager
- MarginCalculator
- LiquidationGuard
- SlippageGuard
- PerformanceTracker
"""

import asyncio
from datetime import datetime
from typing import Any, Dict, List

from loguru import logger

from src.clients.futures_client import OKXFuturesClient
from src.config import BotConfig
# Futures-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from src.strategies.modules.liquidation_guard import LiquidationGuard
from src.strategies.modules.margin_calculator import MarginCalculator
from src.strategies.modules.slippage_guard import SlippageGuard

from ..spot.performance_tracker import PerformanceTracker
from .indicators.fast_adx import FastADX
from .indicators.funding_rate_monitor import FundingRateMonitor
from .indicators.order_flow_indicator import OrderFlowIndicator
from .indicators.trailing_stop_loss import TrailingStopLoss
from .order_executor import FuturesOrderExecutor
from .position_manager import FuturesPositionManager
from .risk.max_size_limiter import MaxSizeLimiter
from .signal_generator import FuturesSignalGenerator
from .websocket_manager import FuturesWebSocketManager


class FuturesScalpingOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä Futures —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π Futures —Ç–æ—Ä–≥–æ–≤–ª–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–æ–∑–∏—Ü–∏–π
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∞—Ä–∂–∏
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """

    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures Orchestrator

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        self.config = config
        self.scalping_config = config.scalping
        self.risk_config = config.risk

        # üõ°Ô∏è –ó–∞—â–∏—Ç—ã —Ä–∏—Å–∫–∞
        self.initial_balance = None  # –î–ª—è drawdown —Ä–∞—Å—á–µ—Ç–∞
        self.total_margin_used = 0.0  # –î–ª—è max margin –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.max_loss_per_trade = 0.02  # 2% –º–∞–∫—Å –ø–æ—Ç–µ—Ä—è –Ω–∞ —Å–¥–µ–ª–∫—É
        self.max_margin_percent = 0.80  # 80% –º–∞–∫—Å –º–∞—Ä–∂–∞
        self.max_drawdown_percent = 0.05  # 5% –º–∞–∫—Å –ø—Ä–æ—Å–∞–¥–∫–∞

        # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        okx_config = config.get_okx_config()

        # –ö–ª–∏–µ–Ω—Ç
        self.client = OKXFuturesClient(
            api_key=okx_config.api_key,
            secret_key=okx_config.api_secret,
            passphrase=okx_config.passphrase,
            sandbox=okx_config.sandbox,
            leverage=3,  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
        )

        # –ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ futures_modules –∏–ª–∏ defaults
        futures_modules = config.futures_modules if config.futures_modules else {}
        slippage_config = (
            futures_modules.slippage_guard if futures_modules.slippage_guard else {}
        )

        self.margin_calculator = MarginCalculator(
            default_leverage=3,  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
            maintenance_margin_ratio=0.01,
            initial_margin_ratio=0.1,
        )

        self.liquidation_guard = LiquidationGuard(
            margin_calculator=self.margin_calculator,
            warning_threshold=1.8,
            danger_threshold=1.3,
            critical_threshold=1.1,
            auto_close_threshold=1.05,
        )

        self.slippage_guard = SlippageGuard(
            max_slippage_percent=slippage_config.get("max_slippage_percent", 0.1),
            max_spread_percent=slippage_config.get("max_spread_percent", 0.05),
            order_timeout=slippage_config.get("order_timeout", 30.0),
        )

        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ signal_generator –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.signal_generator = FuturesSignalGenerator(config, client=self.client)
        self.order_executor = FuturesOrderExecutor(
            config, self.client, self.slippage_guard
        )
        self.position_manager = FuturesPositionManager(
            config, self.client, self.margin_calculator
        )
        self.performance_tracker = PerformanceTracker()

        # TrailingStopLoss –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å–ª–æ–≤–∞—Ä—å –ø–æ —Å–∏–º–≤–æ–ª–∞–º)
        self.trailing_sl_by_symbol = {}

        # FastADX –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        self.fast_adx = FastADX(period=9, threshold=20.0)

        # OrderFlowIndicator –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        self.order_flow = OrderFlowIndicator(
            window=100, long_threshold=0.1, short_threshold=-0.1
        )

        # FundingRateMonitor –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
        self.funding_monitor = FundingRateMonitor(max_funding_rate=0.05)  # 0.05%

        # MaxSizeLimiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ–ª—å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        self.max_size_limiter = MaxSizeLimiter(
            max_single_size_usd=1000.0,  # $1000 –∑–∞ –ø–æ–∑–∏—Ü–∏—é
            max_total_size_usd=5000.0,  # $5000 –≤—Å–µ–≥–æ
            max_positions=5,  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–∑–∏—Ü–∏–π
        )

        # WebSocket Manager
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WebSocket URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç sandbox —Ä–µ–∂–∏–º–∞
        # OKX Sandbox WebSocket: wss://wspap.okx.com:8443/ws/v5/public (–¥–µ–º–æ)
        # OKX Production WebSocket: wss://ws.okx.com:8443/ws/v5/public
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π okx_config –∏–∑ —Å—Ç—Ä–æ–∫–∏ 69
        if okx_config.sandbox:
            ws_url = "wss://wspap.okx.com:8443/ws/v5/public"  # Sandbox WebSocket
            logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SANDBOX WebSocket –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            ws_url = "wss://ws.okx.com:8443/ws/v5/public"  # Production WebSocket
            logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PRODUCTION WebSocket")

        self.ws_manager = FuturesWebSocketManager(ws_url=ws_url)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.active_positions = {}
        self.trading_session = None

        logger.info("FuturesScalpingOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            await self._initialize_client()

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
            await self._initialize_websocket()

            # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await self._start_safety_modules()

            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            await self._start_trading_modules()

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            self.is_running = True
            await self._main_trading_loop()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Futures Orchestrator: {e}")
            raise
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Futures —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await self.liquidation_guard.stop_monitoring()
        await self.slippage_guard.stop_monitoring()

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
        await self.ws_manager.disconnect()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.close()

        logger.info("‚úÖ Futures —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.client.get_balance()
            logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

            # üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è drawdown
            if self.initial_balance is None:
                self.initial_balance = balance
                logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")

            if balance < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
            if not self.client.sandbox:
                for symbol in self.scalping_config.symbols:
                    try:
                        leverage = 3  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
                        await self.client.set_leverage(symbol, leverage)
                        logger.info(f"‚úÖ –ü–ª–µ—á–æ {leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol}")
                    except Exception as e:
                        logger.warning(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {symbol}: {e}"
                        )
            else:
                logger.info("Sandbox mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É leverage")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    async def _initialize_websocket(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if await self.ws_manager.connect():
                logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

                # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤ (–æ–¥–∏–Ω –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
                async def ticker_callback(data):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º instId –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    if "data" in data and len(data["data"]) > 0:
                        inst_id = data["data"][0].get("instId", "")
                        # –£–±–∏—Ä–∞–µ–º -SWAP —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
                        symbol = inst_id.replace("-SWAP", "")
                        if symbol:
                            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket (DEBUG, –Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö)
                            logger.debug(f"üì° WebSocket: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                            await self._handle_ticker_data(symbol, data)

                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                for symbol in self.scalping_config.symbols:
                    inst_id = f"{symbol}-SWAP"
                    await self.ws_manager.subscribe(
                        channel="tickers",
                        inst_id=inst_id,
                        callback=ticker_callback,  # –û–¥–∏–Ω callback –¥–ª—è –≤—Å–µ—Ö
                    )

                logger.info(
                    f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã –¥–ª—è {len(self.scalping_config.symbols)} –ø–∞—Ä"
                )
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: {e}")

    async def _handle_ticker_data(self, symbol: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ WebSocket
            if "data" in data and len(data["data"]) > 0:
                ticker = data["data"][0]

                # ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if symbol in ["BTC-USDT", "ETH-USDT"]:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
                    logger.debug(
                        f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ {symbol}: "
                        f"last={ticker.get('last', 'N/A')}, "
                        f"bidPx={ticker.get('bidPx', 'N/A')}, "
                        f"askPx={ticker.get('askPx', 'N/A')}, "
                        f"instId={ticker.get('instId', 'N/A')}"
                    )

                if "last" in ticker:
                    price = float(ticker["last"])

                    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º FastADX –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
                    # FastADX –Ω—É–∂–µ–Ω –¥–ª—è TrailingSL, —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                    # ‚ö†Ô∏è –í–ê–ñ–ù–û: –¢–∏–∫–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç high/low —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º
                    # —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ (high=low=close=price)
                    # –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω—ã —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (1m), –Ω–æ —Ç–∏–∫–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–∞—â–µ
                    try:
                        if hasattr(self, "fast_adx") and self.fast_adx:
                            # –î–ª—è —Ç–∏–∫–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ high/low/close
                            # –≠—Ç–æ –¥–∞—Å—Ç –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Ö–æ—Ç—è –∏ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ)
                            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–µ—á–∏ 1m –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                            high = price
                            low = price
                            close = price

                            # –û–±–Ω–æ–≤–ª—è–µ–º FastADX –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
                            self.fast_adx.update(high=high, low=low, close=close)
                            logger.debug(
                                f"üìä FastADX –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: "
                                f"price={price:.2f} (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ high/low/close)"
                            )
                    except Exception as e:
                        logger.debug(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å FastADX –¥–ª—è {symbol}: {e}"
                        )

                    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞ (INFO –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
                    logger.info(f"üí∞ {symbol}: ${price:.2f}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TrailingStopLoss –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    if (
                        symbol in self.active_positions
                        and "entry_price" in self.active_positions.get(symbol, {})
                    ):
                        await self._update_trailing_stop_loss(symbol, price)
                    else:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
                        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}...")
                        await self._check_for_signals(symbol, price)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞: {e}")

    async def _start_safety_modules(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ó–∞–ø—É—Å–∫ Liquidation Guard
            await self.liquidation_guard.start_monitoring(
                client=self.client,
                check_interval=5.0,
                callback=self._on_liquidation_warning,
            )

            # –ó–∞–ø—É—Å–∫ Slippage Guard
            await self.slippage_guard.start_monitoring(self.client)

            logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            raise

    async def _start_trading_modules(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            await self.signal_generator.initialize()
            await self.order_executor.initialize()
            await self.position_manager.initialize()

            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
            raise

    async def _main_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")

        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_running –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º
                if not self.is_running:
                    break

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await self._update_state()

                if not self.is_running:
                    break

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                logger.debug("üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
                signals = await self.signal_generator.generate_signals()
                if len(signals) > 0:
                    logger.info(
                        f"üìä –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤"
                    )
                else:
                    logger.debug("üìä –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

                if not self.is_running:
                    break

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                await self._process_signals(signals)

                if not self.is_running:
                    break

                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                await self._manage_positions()

                if not self.is_running:
                    break

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self._update_performance()

                if not self.is_running:
                    break

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(self.scalping_config.check_interval)

            except asyncio.CancelledError:
                logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                if self.is_running:
                    await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                else:
                    break

    async def _update_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º is_running –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π
            if not self.is_running:
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.client.get_positions()

            if not self.is_running:
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.active_positions = {}
            for position in positions:
                symbol = position.get("instId", "").replace("-SWAP", "")
                size = float(position.get("pos", "0"))
                if size != 0:
                    self.active_positions[symbol] = position

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º is_running –ø–µ—Ä–µ–¥ API –∑–∞–ø—Ä–æ—Å–æ–º
            if not self.is_running:
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏
            margin_status = await self.liquidation_guard.get_margin_status(self.client)

            if not self.is_running:
                return

            if margin_status.get("health_status", {}).get("status") == "critical":
                logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ú–ê–†–ñ–ò!")
                await self._emergency_close_all_positions()

        except asyncio.CancelledError:
            logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
        except Exception as e:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if self.is_running:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            else:
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    async def _process_signals(self, signals: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            for signal in signals:
                symbol = signal.get("symbol")
                side = signal.get("side")
                strength = signal.get("strength", 0)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                if strength < self.scalping_config.min_signal_strength:
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if symbol in self.active_positions:
                    logger.debug(f"–ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª")
                    continue

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                if await self._validate_signal(signal):
                    await self._execute_signal(signal)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def _validate_signal(self, signal: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal.get("symbol")
            side = signal.get("side")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.client.get_balance()

            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            current_price = signal.get("price", 0)
            max_size = self.margin_calculator.calculate_max_position_size(
                balance, current_price
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            min_size = self.scalping_config.min_position_size
            if max_size < min_size:
                logger.warning(
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {max_size:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_size:.6f}"
                )
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Slippage Guard
            (
                is_valid,
                reason,
            ) = await self.slippage_guard.validate_order_before_placement(
                symbol=symbol,
                side=side,
                order_type="market",
                price=None,
                size=max_size,
                client=self.client,
            )

            if not is_valid:
                logger.warning(f"–°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {reason}")
                return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    async def _execute_signal(self, signal: Dict[str, Any]):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal.get("symbol")
            side = signal.get("side")
            strength = signal.get("strength", 0)

            logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {symbol} {side} (—Å–∏–ª–∞: {strength:.2f})")

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            balance = await self.client.get_balance()
            current_price = signal.get("price", 0)

            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            risk_percentage = self.scalping_config.base_risk_percentage * strength
            position_size = self.margin_calculator.calculate_optimal_position_size(
                balance, current_price, risk_percentage
            )

            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = await self.order_executor.execute_signal(signal, position_size)

            if result.get("success"):
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {symbol} {side} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω")
            else:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {result.get('error')}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            for symbol, position in self.active_positions.items():
                await self.position_manager.manage_position(position)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")

    async def _update_performance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (update_stats –Ω–µ async, —É–±–∏—Ä–∞–µ–º await)
            self.performance_tracker.update_stats(self.active_positions)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def _on_liquidation_warning(
        self,
        level: str,
        symbol: str,
        side: str,
        margin_ratio: float,
        details: Dict[str, Any],
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
        try:
            if level == "critical":
                logger.critical(
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {symbol} {side} - –º–∞—Ä–∂–∞: {margin_ratio:.1f}%"
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
                await self._emergency_actions(symbol, side)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")

    async def _emergency_close_all_positions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô!")

            for symbol in list(self.active_positions.keys()):
                await self.position_manager.close_position_manually(symbol)
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def _emergency_actions(self, symbol: str, side: str):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
            logger.critical(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {symbol} {side}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")

    async def _check_for_signals(self, symbol: str, price: float):
        """‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫—ç—à
            try:
                all_positions = await self.client.get_positions()
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–∏–º–≤–æ–ª—É —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                symbol_positions = [
                    p
                    for p in all_positions
                    if p.get("instId", "").startswith(symbol)
                    and float(p.get("pos", "0")) != 0
                ]

                if symbol_positions:
                    logger.debug(
                        f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ: "
                        f"size={symbol_positions[0].get('pos')}, "
                        f"side={symbol_positions[0].get('posSide')}"
                    )
                    return  # –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à"
                )
                # Fallback –Ω–∞ –∫—ç—à
                if (
                    symbol in self.active_positions
                    and "order_id" in self.active_positions.get(symbol, {})
                ):
                    return

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (GLOBAL CHECK)
            try:
                all_positions = await self.client.get_positions()
                active_positions_count = len(
                    [p for p in all_positions if float(p.get("pos", "0")) != 0]
                )

                balance = await self.client.get_balance()
                balance_profile = self._get_balance_profile(balance)
                max_open = balance_profile.get("max_open_positions", 2)

                if active_positions_count >= max_open:
                    logger.debug(
                        f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {active_positions_count}/{max_open}. "
                        f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ {symbol}"
                    )
                    return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")

            # ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í —á–µ—Ä–µ–∑ signal_generator
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∞ –Ω–µ —Ç–µ—Å—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É!
            try:
                logger.debug(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}...")
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ symbol)
                signals = await self.signal_generator.generate_signals()

                logger.debug(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")

                # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
                symbol_signal = None
                for signal in signals:
                    if signal.get("symbol") == symbol:
                        symbol_signal = signal
                        break

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
                if symbol_signal:
                    side = symbol_signal.get("side")
                    strength = symbol_signal.get("strength", 0)
                    side_str = "LONG" if side == "buy" else "SHORT"

                    logger.info(
                        f"üéØ –†–ï–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ {symbol} {side_str} @ ${price:.2f} "
                        f"(—Å–∏–ª–∞={strength:.2f})"
                    )

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    await self._execute_signal_from_price(symbol, price, symbol_signal)
                    logger.info(
                        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} {side_str} –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É"
                    )
                else:
                    # ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ INFO –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ - –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç
                    logger.info(
                        f"üìä {symbol}: —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª–∞). "
                        f"–í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤."
                    )

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}",
                    exc_info=True,
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def _create_market_data_from_price(self, symbol: str, price: float):
        """–°–æ–∑–¥–∞–µ—Ç MarketData –∏–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)"""
        from datetime import datetime

        from src.models import OHLCV, MarketData

        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–≤–µ—á—É —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
        ohlcv = OHLCV(
            timestamp=int(datetime.now().timestamp()),
            symbol=symbol,
            open=price,
            high=price,
            low=price,
            close=price,
            volume=1.0,
        )

        return MarketData(symbol=symbol, timeframe="1m", ohlcv_data=[ohlcv])

    async def _execute_signal_from_price(self, symbol: str, price: float, signal=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if (
                symbol in self.active_positions
                and "order_id" in self.active_positions[symbol]
            ):
                logger.debug(f"–ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
            if signal is None:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (–µ—Å–ª–∏ ARM –∞–∫—Ç–∏–≤–µ–Ω)
                regime = "ranging"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (
                    hasattr(self.signal_generator, "regime_manager")
                    and self.signal_generator.regime_manager
                ):
                    try:
                        regime = (
                            self.signal_generator.regime_manager.get_current_regime()
                        )
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º: {e}")
                        regime = None

                # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ (Maker)
                # –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–∞—é—Ç –º–µ–Ω—å—à—É—é –∫–æ–º–∏—Å—Å–∏—é (0.02% vs 0.05% –¥–ª—è Taker)
                order_type = (
                    "limit"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–∏–º–∏—Ç–Ω—ã–µ (Maker) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
                try:
                    if hasattr(self.config, "scalping") and self.config.scalping:
                        scalping_config = self.config.scalping
                        if hasattr(scalping_config, "prefer_market_orders") and getattr(
                            scalping_config, "prefer_market_orders", False
                        ):
                            order_type = "market"
                        elif hasattr(scalping_config, "order_type"):
                            order_type = getattr(scalping_config, "order_type", "limit")
                except Exception as e:
                    logger.debug(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º limit (Maker)"
                    )

                signal = {
                    "symbol": symbol,
                    "side": "buy",
                    "price": price,
                    "strength": 0.8,
                    "regime": regime,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö TP/SL
                    "type": order_type,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ (Maker) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏
                }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            balance = await self.client.get_balance()
            position_size = await self._calculate_position_size(balance, price, signal)

            if position_size <= 0:
                logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {position_size}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ MaxSizeLimiter
            # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: size_usd = notional (–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å), –∞ –Ω–µ –º–∞—Ä–∂–∞!
            leverage = getattr(self.scalping_config, "leverage", 3)
            size_usd = position_size * price  # –≠—Ç–æ notional (–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
            can_open, reason = self.max_size_limiter.can_open_position(symbol, size_usd)

            if not can_open:
                logger.warning(f"–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {reason}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ FundingRateMonitor
            if not self.funding_monitor.is_funding_favorable(signal["side"]):
                logger.warning(f"Funding –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è {signal['side']}")
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä —Å TP/SL
            result = await self.order_executor.execute_signal(signal, position_size)

            if result.get("success"):
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol} {position_size:.6f}")

                # üõ°Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º total_margin_used
                # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç margin –∏–∑ position_size (–º–æ–Ω–µ—Ç—ã)
                # position_size –≤ –ú–û–ù–ï–¢–ê–•, price –≤ USD, leverage = 3x
                # margin = (size_in_coins √ó price) / leverage = notional / leverage
                leverage = getattr(self.scalping_config, "leverage", 3)
                notional = position_size * price  # –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                margin_used = notional / leverage  # –ú–∞—Ä–∂–∞ = notional / leverage
                self.total_margin_used += margin_used
                logger.debug(
                    f"üíº –û–±—â–∞—è –º–∞—Ä–∂–∞: ${self.total_margin_used:.2f} "
                    f"(notional=${notional:.2f}, margin=${margin_used:.2f}, leverage={leverage}x)"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ active_positions
                if symbol not in self.active_positions:
                    self.active_positions[symbol] = {}
                    self.active_positions[symbol].update(
                        {
                            "order_id": result.get("order_id"),
                            "side": signal["side"],
                            "size": position_size,
                            "entry_price": price,
                            "margin": margin_used,  # margin –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                            "timestamp": datetime.now(),
                            # ‚úÖ –ë–ï–ó tp_order_id –∏ sl_order_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º TrailingSL!
                        }
                    )

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TrailingStopLoss –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    # ‚ö†Ô∏è –£–ß–ï–¢ –ö–û–ú–ò–°–°–ò–ò: 0.1% –Ω–∞ –∫—Ä—É–≥ (0.05% –≤—Ö–æ–¥ + 0.05% –≤—ã—Ö–æ–¥ –¥–ª—è taker –Ω–∞ OKX)
                    # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–æ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    trading_fee_rate = 0.001  # 0.1% –Ω–∞ –≤–µ—Å—å —Ü–∏–∫–ª (–æ—Ç–∫—Ä—ã—Ç–∏–µ + –∑–∞–∫—Ä—ã—Ç–∏–µ)

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        if (
                            hasattr(self.config, "futures_modules")
                            and self.config.futures_modules
                        ):
                            if hasattr(self.config.futures_modules, "trailing_sl"):
                                trailing_sl_config = (
                                    self.config.futures_modules.trailing_sl
                                )
                                if hasattr(trailing_sl_config, "trading_fee_rate"):
                                    trading_fee_rate = getattr(
                                        trailing_sl_config, "trading_fee_rate", 0.001
                                    )
                                elif isinstance(trailing_sl_config, dict):
                                    trading_fee_rate = trailing_sl_config.get(
                                        "trading_fee_rate", 0.001
                                    )
                    except Exception as e:
                        logger.debug(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å trading_fee_rate –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.1%"
                        )

                    tsl = TrailingStopLoss(
                        initial_trail=0.05,
                        max_trail=0.2,
                        min_trail=0.02,
                        trading_fee_rate=trading_fee_rate,  # ‚úÖ –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é!
                    )
                    tsl.initialize(entry_price=price, side=signal["side"])
                    self.trailing_sl_by_symbol[symbol] = tsl
                    logger.debug(
                        f"TrailingStopLoss –¥–ª—è {symbol} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–º–∏—Å—Å–∏–µ–π: {trading_fee_rate:.3%}"
                    )

                    logger.info(f"üéØ –ü–æ–∑–∏—Ü–∏—è {symbol} –æ—Ç–∫—Ä—ã—Ç–∞ —Å TrailingSL")

            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {result.get('error')}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _calculate_position_size(
        self, balance: float, price: float, signal: dict
    ) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º Balance Profiles –∏ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        try:
            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–∞–ª–∞–Ω—Å–∞
            balance_profile = self._get_balance_profile(balance)

            # 2. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            base_usd_size = balance_profile["base_position_usd"]
            min_usd_size = balance_profile["min_position_usd"]
            max_usd_size = balance_profile["max_position_usd"]

            # 3. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ (–µ—Å–ª–∏ ARM –∞–∫—Ç–∏–≤–µ–Ω)
            if (
                hasattr(self.signal_generator, "regime_manager")
                and self.signal_generator.regime_manager
            ):
                try:
                    regime = self.signal_generator.regime_manager.get_current_regime()

                    # –ü–æ–ª—É—á–∞–µ–º multiplier –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                    if regime:
                        regime_params = self._get_regime_params(regime)
                        if (
                            regime_params
                            and "position_size_multiplier" in regime_params
                        ):
                            base_usd_size *= regime_params["position_size_multiplier"]
                            logger.debug(
                                f"–†–µ–∂–∏–º {regime}: multiplier={regime_params['position_size_multiplier']}"
                            )
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ —Ä–µ–∂–∏–º: {e}")

            # 3.5 –ù–û–í–û–ï: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ (–ù–û —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º max_usd_size!)
            signal_strength = signal.get("strength", 0.5)
            if signal_strength > 0.8:
                # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                strength_multiplier = 1.5  # +50% –¥–ª—è –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–≥–æ
                logger.debug(
                    f"–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (strength={signal_strength:.2f}): multiplier=1.5"
                )
            elif signal_strength > 0.6:
                # –•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                strength_multiplier = 1.2  # +20% –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ
                logger.debug(
                    f"–•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª (strength={signal_strength:.2f}): multiplier=1.2"
                )
            elif signal_strength > 0.4:
                # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                strength_multiplier = 1.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç
                logger.debug(
                    f"–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª (strength={signal_strength:.2f}): multiplier=1.0"
                )
            else:
                # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª ‚Üí –º–∏–Ω–∏–º—É–º
                strength_multiplier = 0.8  # -20% –¥–ª—è —Å–ª–∞–±–æ–≥–æ
                logger.debug(
                    f"–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (strength={signal_strength:.2f}): multiplier=0.8"
                )

            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º multiplier, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º max_usd_size!
            base_usd_size *= strength_multiplier
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ base_usd_size –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_usd_size
            base_usd_size = min(base_usd_size, max_usd_size)
            logger.debug(
                f"üí∞ –ü–æ—Å–ª–µ multiplier: base_usd_size=${base_usd_size:.2f} (max=${max_usd_size:.2f})"
            )

            # 4. –ü–†–ò–ú–ï–ù–Ø–ï–ú –õ–ï–í–ï–†–ò–î–ñ (Futures)
            leverage = getattr(
                self.scalping_config, "leverage", 3
            )  # Futures –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3x
            margin_required = base_usd_size  # –¢—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞ (–≤ USD)

            # 5. üõ°Ô∏è –ó–ê–©–ò–¢–ê: Max Margin Used (80%)
            max_margin_allowed = balance * self.max_margin_percent  # 80%
            if self.total_margin_used + margin_required > max_margin_allowed:
                logger.warning(
                    f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–∞—Ä–∂–∏: {self.total_margin_used + margin_required:.2f} > {max_margin_allowed:.2f}"
                )
                margin_required = max(0, max_margin_allowed - self.total_margin_used)
                if margin_required < min_usd_size:
                    logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                    return 0.0

            # 6. üõ°Ô∏è –ó–ê–©–ò–¢–ê: Max Loss per Trade (2%)
            max_loss_usd = balance * self.max_loss_per_trade  # 2% –º–∞–∫—Å –ø–æ—Ç–µ—Ä—è
            sl_percent = getattr(self.scalping_config, "sl_percent", 0.2)

            # ‚ö†Ô∏è sl_percent –≤ –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –≤ –¥–æ–ª—è—Ö (0.2 = 20%) –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (20)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            if sl_percent > 1:
                sl_percent_decimal = sl_percent / 100  # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (20 ‚Üí 0.2)
            else:
                sl_percent_decimal = sl_percent  # –£–∂–µ –≤ –¥–æ–ª—è—Ö (0.2)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∂–∏
            # –§–æ—Ä–º—É–ª–∞: max_safe_margin = max_loss / sl_percent
            # –ü—Ä–∏–º–µ—Ä: max_loss=$8, sl_percent=20% (0.2) ‚Üí max_safe_margin = $8 / 0.2 = $40
            max_safe_margin = (
                max_loss_usd / sl_percent_decimal
                if sl_percent_decimal > 0
                else float("inf")
            )

            if margin_required > max_safe_margin:
                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è max loss: {margin_required:.2f} > {max_safe_margin:.2f}"
                )
                margin_required = max_safe_margin

            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏ (90% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if margin_required > balance * 0.9:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏: {margin_required:.2f} > {balance * 0.9:.2f}"
                )
                margin_required = balance * 0.9

            # 8. ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫ –ú–ê–†–ñ–ï (–Ω–µ –∫ notional!)
            # usd_size = –º–∞—Ä–∂–∞ (—Ç–æ —á—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è), max_usd_size —Ç–æ–∂–µ –≤ –º–∞—Ä–∂–µ!
            margin_usd = max(min_usd_size, min(margin_required, max_usd_size))

            # 9. ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–≤–æ–¥–∏–º –ú–ê–†–ñ–£ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            # position_size = (margin_usd * leverage) / price
            # –≠—Ç–æ –¥–∞—Å—Ç –ù–û–ú–ò–ù–ê–õ–¨–ù–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å = margin_usd * leverage
            # –ù–∞–ø—Ä–∏–º–µ—Ä: margin=$180, leverage=3x ‚Üí notional=$540, position_size = $540 / $110k = 0.0049 BTC
            position_size = (margin_usd * leverage) / price

            # 10. üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º drawdown –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
            if not await self._check_drawdown_protection():
                logger.warning(
                    "‚ö†Ô∏è Drawdown protection –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é"
                )
                return 0.0

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
            notional_usd = margin_usd * leverage

            logger.info(
                f"üí∞ –†–∞—Å—á–µ—Ç: balance=${balance:.2f}, "
                f"profile={balance_profile['name']}, "
                f"margin=${margin_usd:.2f} (–ª–∏–º–∏—Ç: ${min_usd_size:.2f}-${max_usd_size:.2f}), "
                f"notional=${notional_usd:.2f} (leverage={leverage}x), "
                f"position_size={position_size:.6f}"
            )

            return position_size

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0

    def _get_balance_profile(self, balance: float) -> dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±–∞–ª–∞–Ω—Å–∞"""
        balance_profiles = getattr(self.scalping_config, "balance_profiles", {})

        # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø–æ—Ä–æ–≥–∞
        profiles = [
            {"name": "small", "threshold": 1500.0},
            {"name": "medium", "threshold": 3000.0},
            {"name": "large", "threshold": 999999.0},
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        for profile in profiles:
            if balance <= profile["threshold"]:
                profile_config = balance_profiles.get(profile["name"], None)

                if profile_config is None:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    return {
                        "name": profile["name"],
                        "base_position_usd": 50.0,
                        "min_position_usd": 10.0,
                        "max_position_usd": 100.0,
                        "max_open_positions": 2,
                        "max_position_percent": 8.0,
                    }

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã Pydantic –º–æ–¥–µ–ª–∏
                return {
                    "name": profile["name"],
                    "base_position_usd": getattr(
                        profile_config, "base_position_usd", 50.0
                    ),
                    "min_position_usd": getattr(
                        profile_config, "min_position_usd", 10.0
                    ),
                    "max_position_usd": getattr(
                        profile_config, "max_position_usd", 100.0
                    ),
                    "max_open_positions": getattr(
                        profile_config, "max_open_positions", 2
                    ),
                    "max_position_percent": getattr(
                        profile_config, "max_position_percent", 8.0
                    ),
                }

        # Fallback
        return {
            "name": "default",
            "base_position_usd": 50.0,
            "min_position_usd": 10.0,
            "max_position_usd": 100.0,
            "max_open_positions": 2,
            "max_position_percent": 8.0,
        }

    def _get_regime_params(self, regime_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ ARM"""
        try:
            adaptive_regime = getattr(self.config, "adaptive_regime", {})
            if isinstance(adaptive_regime, dict):
                return adaptive_regime.get(regime_name, {})
            return {}
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∂–∏–º–∞: {e}")
            return {}

    async def _check_drawdown_protection(self) -> bool:
        """
        üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç drawdown

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å–∞–¥–∫—É –±–∞–ª–∞–Ω—Å–∞ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

        Returns:
            True - –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
            False - drawdown –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Å—Ç–æ–ø —Ç–æ—Ä–≥–æ–≤–ª–µ
        """
        try:
            if self.initial_balance is None:
                return True

            current_balance = await self.client.get_balance()
            drawdown = (self.initial_balance - current_balance) / self.initial_balance

            if drawdown > self.max_drawdown_percent:
                logger.critical(
                    f"üö® DRAWDOWN –ó–ê–©–ò–¢–ê! "
                    f"–ü—Ä–æ—Å–∞–¥–∫–∞: {drawdown*100:.2f}% > {self.max_drawdown_percent*100:.0f}%"
                )

                # üõë Emergency Stop
                await self._emergency_stop()

                return False

            elif drawdown > self.max_drawdown_percent * 0.7:  # 70% –æ—Ç –ª–∏–º–∏—Ç–∞
                logger.warning(f"‚ö†Ô∏è –ë–ª–∏–∑–∫–æ –∫ drawdown: {drawdown*100:.2f}%")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ drawdown: {e}")
            return True  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞–∑—Ä–µ—à–∞–µ–º

    async def _emergency_stop(self):
        """
        üõë Emergency Stop - –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö:
        - Drawdown > 5%
        - Margin close to call
        - Multiple losses in a row
        """
        try:
            logger.critical("üö® EMERGENCY STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")

            # 1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï –ø–æ–∑–∏—Ü–∏–∏
            logger.critical("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...")
            for symbol, position in list(self.active_positions.items()):
                try:
                    await self.position_manager.close_position_manually(symbol)
                    logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")

            # 2. –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
            self.is_running = False
            logger.critical("üõë –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º alert (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º/email)
            logger.critical(
                f"üìß ALERT: Emergency Stop activated! "
                f"Balance: ${await self.client.get_balance():.2f}, "
                f"Drawdown: {(self.initial_balance - await self.client.get_balance()) / self.initial_balance * 100:.2f}%"
            )

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
            logger.critical("üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # 5. Wait for manual intervention
            logger.critical("‚è∏Ô∏è –ñ–¥–µ–º —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Emergency Stop: {e}")

    async def _update_trailing_stop_loss(self, symbol: str, current_price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TrailingStopLoss –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position = self.active_positions.get(symbol, {})

            if not position:
                return

            # –ü–æ–ª—É—á–∞–µ–º entry_price –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
            entry_price = position.get("entry_price", 0)
            if entry_price == 0:
                logger.warning(f"‚ö†Ô∏è Entry price = 0 –¥–ª—è {symbol}")
                return

            # –ü–æ–ª—É—á–∞–µ–º TrailingStopLoss –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if symbol not in self.trailing_sl_by_symbol:
                return

            tsl = self.trailing_sl_by_symbol[symbol]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π
            tsl.update(current_price)

            stop_loss = tsl.get_stop_loss()
            # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±—ã–ª—å –° –£–ß–ï–¢–û–ú –ö–û–ú–ò–°–°–ò–ò!
            profit_pct = tsl.get_profit_pct(current_price, include_fees=True)
            profit_pct_gross = tsl.get_profit_pct(
                current_price, include_fees=False
            )  # –î–ª—è –ª–æ–≥–æ–≤
            highest = tsl.highest_price

            # üéØ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ –∏ —Ä–µ–∂–∏–º–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
            trend_strength = None
            market_regime = None

            # –ü–æ–ª—É—á–∞–µ–º trend_strength –∏–∑ FastADX (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            try:
                if hasattr(self, "fast_adx") and self.fast_adx:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_current_adx() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è ADX
                    adx_value = self.fast_adx.get_current_adx()
                    if adx_value and adx_value > 0:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ADX –∫ 0-1 (ADX –æ–±—ã—á–Ω–æ 0-100)
                        trend_strength = min(adx_value / 100.0, 1.0)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å trend_strength: {e}")

            # –ü–æ–ª—É—á–∞–µ–º market_regime –∏–∑ AdaptiveRegimeManager
            try:
                if (
                    hasattr(self.signal_generator, "regime_manager")
                    and self.signal_generator.regime_manager
                ):
                    regime_obj = (
                        self.signal_generator.regime_manager.get_current_regime()
                    )
                    if regime_obj:
                        market_regime = (
                            regime_obj.lower() if isinstance(regime_obj, str) else None
                        )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å market_regime: {e}")

            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥) —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
            if not hasattr(self, "_tsl_log_count"):
                self._tsl_log_count = {}
            if symbol not in self._tsl_log_count:
                self._tsl_log_count[symbol] = 0
            self._tsl_log_count[symbol] += 1

            if self._tsl_log_count[symbol] % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5-–π —Ä–∞–∑
                trend_str = (
                    f"{trend_strength:.2f}" if trend_strength is not None else "N/A"
                )
                regime_str = market_regime or "N/A"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ gross (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏) –∏ net (—Å –∫–æ–º–∏—Å—Å–∏–µ–π) –ø—Ä–∏–±—ã–ª—å
                logger.info(
                    f"üìä TrailingSL {symbol}: price={current_price:.2f}, entry={entry_price:.2f}, "
                    f"highest={highest:.2f}, stop={stop_loss:.2f}, "
                    f"profit={profit_pct:.2%} (net), gross={profit_pct_gross:.2%}, "
                    f"trend={trend_str}, regime={regime_str}"
                )

            # üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø—É
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ –∏ —Ä–µ–∂–∏–º–µ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
            if tsl.should_close_position(
                current_price,
                trend_strength=trend_strength,
                market_regime=market_regime,
            ):
                logger.info(
                    f"üõë –ü–æ–∑–∏—Ü–∏—è {symbol} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (price={current_price:.2f} <= stop={stop_loss:.2f}, "
                    f"profit={profit_pct:.2%}, trend={trend_strength:.2f if trend_strength else 'N/A'})"
                )
                await self._close_position(symbol, "trailing_stop")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")

    async def _close_position(self, symbol: str, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ position_manager"""
        try:
            position = self.active_positions.get(symbol, {})

            if position:
                logger.info(f"üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {reason}")

                # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ position_manager (API)
                await self.position_manager.close_position_manually(symbol)

                # üõ°Ô∏è –í—ã—á–∏—Ç–∞–µ–º margin –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                position_margin = position.get("margin", 0)
                if position_margin > 0:
                    self.total_margin_used -= position_margin
                    logger.debug(
                        f"üíº –û–±—â–∞—è –º–∞—Ä–∂–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${self.total_margin_used:.2f}"
                    )

                    # –£–¥–∞–ª—è–µ–º –∏–∑ active_positions
                    del self.active_positions[symbol]

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    if symbol in self.trailing_sl_by_symbol:
                        self.trailing_sl_by_symbol[symbol].reset()
                        del self.trailing_sl_by_symbol[symbol]

                    logger.debug(
                        f"üîÑ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            balance = await self.client.get_balance()
            margin_status = await self.liquidation_guard.get_margin_status(self.client)
            slippage_stats = self.slippage_guard.get_slippage_statistics()

            return {
                "is_running": self.is_running,
                "balance": balance,
                "active_positions_count": len(self.active_positions),
                "margin_status": margin_status,
                "slippage_statistics": slippage_stats,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e), "timestamp": datetime.now().isoformat()}
