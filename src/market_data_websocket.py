"""
Public WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
"""

import asyncio
import json
from typing import Callable, Optional

import aiohttp
from loguru import logger


class MarketDataWebSocket:
    """Public WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.ws_url = "wss://ws.okx.com:8443/ws/v5/public"
        self.ws: Optional[aiohttp.ClientWebSocketResponse] = None
        self.connected = False
        self.price_callbacks: dict = {}  # symbol -> callback

    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Public WebSocket (–ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        try:
            session = aiohttp.ClientSession()
            self.ws = await session.ws_connect(self.ws_url)
            self.connected = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º listener
            asyncio.create_task(self._listen_for_data())

            logger.info("‚úÖ Public WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ü–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Public WebSocket: {e}")
            return False

    async def subscribe_ticker(self, symbol: str, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞"""
        if not self.connected or not self.ws:
            logger.error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
            self.price_callbacks[symbol] = callback

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä
            subscribe_msg = {
                "op": "subscribe",
                "args": [{"channel": "tickers", "instId": symbol}],
            }

            await self.ws.send_str(json.dumps(subscribe_msg))
            logger.info(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {symbol}: {e}")
            return False

    async def _listen_for_data(self):
        """–°–ª—É—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket"""
        try:
            async for msg in self.ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = json.loads(msg.data)
                    await self._handle_ticker_data(data)
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"WebSocket error: {self.ws.exception()}")
                    break
                elif msg.type == aiohttp.WSMsgType.CLOSE:
                    logger.warning("WebSocket –∑–∞–∫—Ä—ã—Ç —Å–µ—Ä–≤–µ—Ä–æ–º")
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket listener: {e}")
        finally:
            self.connected = False

    async def _handle_ticker_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        if data.get("arg", {}).get("channel") == "tickers":
            ticker_data = data.get("data", [])
            for ticker in ticker_data:
                symbol = ticker.get("instId")
                if symbol in self.price_callbacks:
                    # –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ü–µ–Ω–æ–π
                    price = float(ticker.get("last", 0))
                    await self.price_callbacks[symbol](price, ticker)

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        self.connected = False
        if self.ws:
            await self.ws.close()
        logger.info("üîå Public WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
