"""
Liquidation Guard –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Ä–∏—Å–∫–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
- –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—å
"""

import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from loguru import logger

from .margin_calculator import MarginCalculator


class LiquidationGuard:
    """
    –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–ª—è Futures —Ç–æ—Ä–≥–æ–≤–ª–∏
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MarginCalculator
    """
    
    def __init__(self, 
                 margin_calculator: MarginCalculator,
                 warning_threshold: float = 1.8,
                 danger_threshold: float = 1.3,
                 critical_threshold: float = 1.1,
                 auto_close_threshold: float = 1.05):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Liquidation Guard
        
        Args:
            margin_calculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏
            warning_threshold: –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (180%)
            danger_threshold: –ü–æ—Ä–æ–≥ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (130%)
            critical_threshold: –ü–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (110%)
            auto_close_threshold: –ü–æ—Ä–æ–≥ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è (105%)
        """
        self.margin_calculator = margin_calculator
        self.warning_threshold = warning_threshold
        self.danger_threshold = danger_threshold
        self.critical_threshold = critical_threshold
        self.auto_close_threshold = auto_close_threshold
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring = False
        self.monitoring_task = None
        self.last_warning_time = {}
        
        logger.info(f"LiquidationGuard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: warning={warning_threshold:.1f}, "
                   f"danger={danger_threshold:.1f}, critical={critical_threshold:.1f}, "
                   f"auto_close={auto_close_threshold:.1f}")
    
    async def start_monitoring(self, 
                             client, 
                             check_interval: float = 5.0,
                             callback: Optional[callable] = None):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä–∂–∏
        
        Args:
            client: Futures –∫–ª–∏–µ–Ω—Ç
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if self.is_monitoring:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_monitoring = True
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval}—Å)")
        
        self.monitoring_task = asyncio.create_task(
            self._monitoring_loop(client, check_interval, callback)
        )
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring:
            return
        
        self.is_monitoring = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _monitoring_loop(self, client, check_interval: float, callback: Optional[callable]):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                await self._check_margin_health(client, callback)
                await asyncio.sleep(check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(check_interval)
    
    async def _check_margin_health(self, client, callback: Optional[callable]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            equity = await client.get_balance()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await client.get_positions()
            
            if not positions:
                return  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            for position in positions:
                await self._analyze_position(position, equity, client, callback)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∂–∏: {e}")
    
    async def _analyze_position(self, 
                               position: Dict[str, Any], 
                               equity: float, 
                               client, 
                               callback: Optional[callable]):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            symbol = position.get('instId', '').replace('-SWAP', '')
            side = position.get('posSide', 'long')
            size = float(position.get('pos', '0'))
            entry_price = float(position.get('avgPx', '0'))
            current_price = float(position.get('markPx', '0'))
            leverage = int(position.get('lever', '3'))
            
            if size == 0:
                return  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
            position_value = size * current_price
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe, details = self.margin_calculator.is_position_safe(
                position_value, equity, current_price, entry_price, 
                side, leverage, self.warning_threshold
            )
            
            margin_ratio = details['margin_ratio']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            risk_level = self._get_risk_level(margin_ratio)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            await self._handle_risk_level(
                risk_level, symbol, side, margin_ratio, details, 
                client, callback
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def _get_risk_level(self, margin_ratio: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        if margin_ratio >= self.warning_threshold:
            return 'safe'
        elif margin_ratio >= self.danger_threshold:
            return 'warning'
        elif margin_ratio >= self.critical_threshold:
            return 'danger'
        else:
            return 'critical'
    
    async def _handle_risk_level(self, 
                               risk_level: str, 
                               symbol: str, 
                               side: str, 
                               margin_ratio: float,
                               details: Dict[str, Any],
                               client, 
                               callback: Optional[callable]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        warning_key = f"{symbol}_{side}"
        now = datetime.now()
        
        if risk_level == 'safe':
            # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if warning_key in self.last_warning_time:
                del self.last_warning_time[warning_key]
            return
        
        elif risk_level == 'warning':
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç)
            if (warning_key not in self.last_warning_time or 
                now - self.last_warning_time[warning_key] > timedelta(minutes=5)):
                
                message = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {symbol} {side} - –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                logger.warning(message)
                
                if callback:
                    await callback('warning', symbol, side, margin_ratio, details)
                
                self.last_warning_time[warning_key] = now
        
        elif risk_level == 'danger':
            # –û–ø–∞—Å–Ω–æ—Å—Ç—å (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 2 –º–∏–Ω—É—Ç—ã)
            if (warning_key not in self.last_warning_time or 
                now - self.last_warning_time[warning_key] > timedelta(minutes=2)):
                
                message = f"üö® –û–ü–ê–°–ù–û–°–¢–¨: {symbol} {side} - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ {margin_ratio:.1f}%"
                logger.error(message)
                
                if callback:
                    await callback('danger', symbol, side, margin_ratio, details)
                
                self.last_warning_time[warning_key] = now
        
        elif risk_level == 'critical':
            # –ö—Ä–∏—Ç–∏—á–Ω–æ - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
            message = f"üíÄ –ö–†–ò–¢–ò–ß–ù–û: {symbol} {side} - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏! –ú–∞—Ä–∂–∞: {margin_ratio:.1f}%"
            logger.critical(message)
            
            if callback:
                await callback('critical', symbol, side, margin_ratio, details)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._auto_close_position(symbol, side, client)
    
    async def _auto_close_position(self, symbol: str, side: str, client):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            logger.critical(f"üõë –ê–í–¢–û–ó–ê–ö–†–´–¢–ò–ï: {symbol} {side}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions = await client.get_positions(symbol)
            if not positions:
                logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è")
                return
            
            position = positions[0]
            size = float(position.get('pos', '0'))
            
            if size == 0:
                logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol} —Ä–∞–≤–µ–Ω 0")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é)
            close_side = 'sell' if side.lower() == 'long' else 'buy'
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            result = await client.place_futures_order(
                symbol=symbol,
                side=close_side,
                size=abs(size),
                order_type='market'
            )
            
            if result.get('code') == '0':
                logger.critical(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} {side} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {result}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def get_margin_status(self, client) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä–∂–∏"""
        try:
            equity = await client.get_balance()
            positions = await client.get_positions()
            
            total_margin_used = 0
            position_details = []
            
            for position in positions:
                size = float(position.get('pos', '0'))
                if size == 0:
                    continue
                
                symbol = position.get('instId', '').replace('-SWAP', '')
                side = position.get('posSide', 'long')
                current_price = float(position.get('markPx', '0'))
                leverage = int(position.get('lever', '3'))
                
                position_value = abs(size) * current_price
                margin_used = position_value / leverage
                total_margin_used += margin_used
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                is_safe, details = self.margin_calculator.is_position_safe(
                    position_value, equity, current_price, 
                    float(position.get('avgPx', '0')), side, leverage
                )
                
                position_details.append({
                    'symbol': symbol,
                    'side': side,
                    'size': size,
                    'value': position_value,
                    'margin_used': margin_used,
                    'margin_ratio': details['margin_ratio'],
                    'is_safe': is_safe,
                    'liquidation_price': details['liquidation_price']
                })
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            health_status = self.margin_calculator.get_margin_health_status(
                equity, total_margin_used
            )
            
            return {
                'equity': equity,
                'total_margin_used': total_margin_used,
                'available_margin': equity - total_margin_used,
                'health_status': health_status,
                'positions': position_details,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä–∂–∏: {e}")
            return {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def set_thresholds(self, 
                      warning: Optional[float] = None,
                      danger: Optional[float] = None,
                      critical: Optional[float] = None,
                      auto_close: Optional[float] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤"""
        if warning is not None:
            self.warning_threshold = warning
        if danger is not None:
            self.danger_threshold = danger
        if critical is not None:
            self.critical_threshold = critical
        if auto_close is not None:
            self.auto_close_threshold = auto_close
        
        logger.info(f"–ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: warning={self.warning_threshold:.1f}, "
                   f"danger={self.danger_threshold:.1f}, critical={self.critical_threshold:.1f}, "
                   f"auto_close={self.auto_close_threshold:.1f}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ guard
    calculator = MarginCalculator()
    guard = LiquidationGuard(calculator)
    
    # –ü—Ä–∏–º–µ—Ä callback —Ñ—É–Ω–∫—Ü–∏–∏
    async def risk_callback(level, symbol, side, margin_ratio, details):
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {level} - {symbol} {side} - –º–∞—Ä–∂–∞: {margin_ratio:.1f}%")
    
    print("LiquidationGuard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")