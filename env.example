"""
Main trading bot engine
"""
import asyncio
import signal
import sys
from datetime import datetime
from typing import List, Optional
from loguru import logger

from src.config import load_config, BotConfig
from src.okx_client import OKXClient
from src.strategies.scalping import ScalpingStrategy
from src.models import RiskMetrics

class TradingBot:
    """Main trading bot orchestrator"""
    
    def __init__(self, config_path: str = "config.yaml"):
        # Load configuration
        self.config = load_config(config_path)
        self.running = False
        
        # Initialize clients
        self.okx_client: Optional[OKXClient] = None
        
        # Initialize strategies
        self.strategies: List = []
        
        # Setup logging
        self._setup_logging()
        
        # Setup signal handlers for graceful shutdown
        self._setup_signal_handlers()
        
        logger.info("Trading bot initialized")
    
    def _setup_logging(self):
        """Setup logging configuration"""
        logger.add(
            "logs/trading_bot_{time:YYYY-MM-DD}.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {message}",
            rotation="1 day",
            retention="30 days",
            compression="zip"
        )
        
        logger.add(
            "logs/errors_{time:YYYY-MM-DD}.log",
            level="ERROR",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {file}:{line} | {message}",
            rotation="1 day",
            retention="30 days"
        )
    
    def _setup_signal_handlers(self):
        """Setup signal handlers for graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"Received signal {signum}, initiating shutdown...")
            asyncio.create_task(self.shutdown())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def initialize(self):
        """Initialize bot components"""
        try:
            logger.info("Initializing trading bot components...")
            
            # Initialize OKX client
            okx_config = self.config.get_okx_config()
            self.okx_client = OKXClient(okx_config)
            await self.okx_client.connect()
            
            # Test connection
            health_check = await self.okx_client.health_check()
            if not health_check:
                raise Exception("OKX API health check failed")
            
            logger.info("OKX client connected successfully")
            
            # Initialize strategies
            await self._initialize_strategies()
            
            logger.info("Bot initialization completed")
            
        except Exception as e:
            logger.error(f"Failed to initialize bot: {e}")
            raise
    
    async def _initialize_strategies(self):
        """Initialize trading strategies"""
        
        # Initialize scalping strategy
        if self.config.scalping.enabled:
            scalping_strategy = ScalpingStrategy(
                client=self.okx_client,
                config=self.config.scalping,
                risk_config=self.config.risk
            )
            self.strategies.append(scalping_strategy)
            logger.info("Scalping strategy initialized")
        
        # Add more strategies here as needed
        # if self.config.trend_following.enabled:
        #     trend_strategy = TrendFollowingStrategy(...)
        #     self.strategies.append(trend_strategy)
    
    async def run(self):
        """Main bot execution loop"""
        if not self.okx_client:
            await self.initialize()
        
        self.running = True
        logger.info("Starting trading bot...")
        
        try:
            # Create tasks for all strategies
            strategy_tasks = []
            for strategy in self.strategies:
                task = asyncio.create_task(strategy.run())
                strategy_tasks.append(task)
            
            # Create monitoring tasks
            monitor_task = asyncio.create_task(self._monitor_system())
            risk_task = asyncio.create_task(self._risk_monitor())
            
            # Run all tasks concurrently
            all_tasks = strategy_tasks + [monitor_task, risk_task]
            await asyncio.gather(*all_tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"Bot execution error: {e}")
            await self.shutdown()
        
        logger.info("Trading bot stopped")
    
    async def _monitor_system(self):
        """System monitoring loop"""
        while self.running:
            try:
                # Log system status
                await self._log_system_status()
                
                # Check API health
                if not await self.okx_client.health_check():
                    logger.warning("API health check failed, attempting reconnect...")
                    await self.okx_client.disconnect()
                    await self.okx_client.connect()
                
                # Sleep for monitoring interval
                await asyncio.sleep(300)  # 5 minutes
                
            except Exception as e:
                logger.error(f"System monitor error: {e}")
                await asyncio.sleep(60)  # Wait on error
    
    async def _risk_monitor(self):
        """Risk monitoring loop"""
        while self.running:
            try:
                # Get account balance
                balances = await self.okx_client.get_account_balance()
                base_balance = next(
                    (b.free for b in balances if b.currency == self.config.trading.base_currency),
                    0.0
                )
                
                # Get positions
                positions = await self.okx_client.get_positions()
                
                # Calculate total exposure
                total_exposure = sum(pos.market_value for pos in positions)
                
                # Calculate daily PnL (simplified)
                daily_pnl = sum(strategy.daily_pnl for strategy in self.strategies)
                
                # Create risk metrics
                risk_metrics = RiskMetrics(
                    account_balance=base_balance,
                    total_exposure=total_exposure,
                    daily_pnl=daily_pnl,
                    max_daily_loss=base_balance * (self.config.risk.max_daily_loss_percent / 100),
                    position_count=len(positions),
                    max_positions=self.config.risk.max_open_positions,
                    risk_per_trade=self.config.risk.risk_per_trade_percent
                )\n                \n                # Check risk limits\n                await self._check_risk_limits(risk_metrics)\n                \n                await asyncio.sleep(60)  # Check every minute\n                \n            except Exception as e:\n                logger.error(f\"Risk monitor error: {e}\")\n                await asyncio.sleep(60)\n    \n    async def _check_risk_limits(self, risk_metrics: RiskMetrics):\n        \"\"\"Check and enforce risk limits\"\"\"\n        \n        # Check daily loss limit\n        if risk_metrics.daily_loss_ratio >= (self.config.risk.max_daily_loss_percent):\n            logger.warning(\n                f\"Daily loss limit reached: {risk_metrics.daily_loss_ratio:.2f}%. \"\n                \"Stopping all strategies.\"\n            )\n            await self._stop_all_strategies()\n            return\n        \n        # Check exposure limit\n        if risk_metrics.exposure_ratio > 50:  # Max 50% exposure\n            logger.warning(\n                f\"High exposure detected: {risk_metrics.exposure_ratio:.2f}%. \"\n                \"Consider reducing positions.\"\n            )\n        \n        # Log risk metrics\n        logger.info(\n            f\"Risk metrics - Balance: ${risk_metrics.account_balance:.2f}, \"\n            f\"Exposure: {risk_metrics.exposure_ratio:.1f}%, \"\n            f\"Positions: {risk_metrics.position_count}/{risk_metrics.max_positions}, \"\n            f\"Daily PnL: ${risk_metrics.daily_pnl:.2f}\"\n        )\n    \n    async def _stop_all_strategies(self):\n        \"\"\"Stop all active strategies\"\"\"\n        logger.info(\"Stopping all strategies\")\n        \n        for strategy in self.strategies:\n            strategy.stop()\n        \n        # Wait a moment for strategies to stop gracefully\n        await asyncio.sleep(5)\n        \n        # Emergency close all positions if needed\n        try:\n            positions = await self.okx_client.get_positions()\n            if positions:\n                logger.warning(f\"Emergency closing {len(positions)} remaining positions\")\n                for position in positions:\n                    await self._emergency_close_position(position)\n        except Exception as e:\n            logger.error(f\"Error during emergency position closure: {e}\")\n    \n    async def _emergency_close_position(self, position):\n        \"\"\"Emergency close a single position\"\"\"\n        try:\n            # Determine order side (opposite of position)\n            order_side = OrderSide.SELL if position.side == PositionSide.LONG else OrderSide.BUY\n            \n            await self.okx_client.place_order(\n                symbol=position.symbol,\n                side=order_side,\n                order_type=OrderType.MARKET,\n                amount=position.size\n            )\n            \n            logger.info(f\"Emergency closed position: {position.symbol}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to emergency close position {position.symbol}: {e}\")\n    \n    async def _log_system_status(self):\n        \"\"\"Log current system status\"\"\"\n        try:\n            # Get account info\n            balances = await self.okx_client.get_account_balance()\n            positions = await self.okx_client.get_positions()\n            \n            base_balance = next(\n                (b.free for b in balances if b.currency == self.config.trading.base_currency),\n                0.0\n            )\n            \n            # Strategy performance\n            strategy_stats = []\n            for strategy in self.strategies:\n                if hasattr(strategy, 'get_performance_stats'):\n                    stats = strategy.get_performance_stats()\n                    strategy_stats.append(stats)\n            \n            logger.info(\n                f\"System Status - Balance: ${base_balance:.2f}, \"\n                f\"Open Positions: {len(positions)}, \"\n                f\"Active Strategies: {len([s for s in self.strategies if hasattr(s, 'active') and s.active])}\"\n            )\n            \n            # Log strategy performance\n            for stats in strategy_stats:\n                logger.info(\n                    f\"Strategy {stats['strategy_id']} - \"\n                    f\"Active: {stats['active']}, \"\n                    f\"Trades: {stats['total_trades']}, \"\n                    f\"Win Rate: {stats['win_rate']:.1f}%, \"\n                    f\"Daily PnL: ${stats['daily_pnl']:.2f}\"\n                )\n            \n        except Exception as e:\n            logger.error(f\"Error logging system status: {e}\")\n    \n    async def shutdown(self):\n        \"\"\"Graceful shutdown of the bot\"\"\"\n        logger.info(\"Initiating bot shutdown...\")\n        \n        self.running = False\n        \n        # Stop all strategies\n        await self._stop_all_strategies()\n        \n        # Disconnect from exchange\n        if self.okx_client:\n            await self.okx_client.disconnect()\n        \n        logger.info(\"Bot shutdown completed\")\n    \n    def get_status(self) -> dict:\n        \"\"\"Get current bot status\"\"\"\n        strategy_status = []\n        \n        for strategy in self.strategies:\n            if hasattr(strategy, 'get_performance_stats'):\n                strategy_status.append(strategy.get_performance_stats())\n        \n        return {\n            \"running\": self.running,\n            \"strategies\": strategy_status,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    # Parse command line arguments if needed\n    config_path = \"config.yaml\"\n    \n    # Create and run bot\n    bot = TradingBot(config_path)\n    \n    try:\n        asyncio.run(bot.run())\n    except KeyboardInterrupt:\n        logger.info(\"Bot interrupted by user\")\n    except Exception as e:\n        logger.error(f\"Bot crashed: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()"]}}"]],"file":{"id":"code_file:11","name":"src/main.py","preview":"\"\"\"\nMain trading bot engine\n\"\"\"\nimport asyncio\nimport signal\nimport sys\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom loguru import logger\n\nfrom src.config import load_config, BotConfig\nfrom src.okx_client import OKXClient\nfrom src.strategies.scalping import ScalpingStrategy\nfrom src.models import RiskMetrics\n\nclass TradingBot:\n    \"\"\"Main trading bot orchestrator\"\"\"\n    \n    def __init__(self, config_path: str = \"config.yaml\"):\n        # Load configuration\n        self.config = load_config(config_path)\n        self.running = False\n        \n        # Initialize clients\n        self.okx_client: Optional[OKXClient] = None\n        \n        # Initialize strategies\n        self.strategies: List = []\n        \n        # Setup logging\n        self._setup_logging()\n        \n        # Setup signal handlers for graceful shutdown\n        self._setup_signal_handlers()\n        \n        logger.info(\"Trading bot initialized\")\n    \n    def _setup_logging(self):\n        \"\"\"Setup logging configuration\"\"\"\n        logger.add(\n            \"logs/trading_bot_{time:YYYY-MM-DD}.log\",\n            level=\"INFO\",\n            format=\"{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {message}\",\n            rotation=\"1 day\",\n            retention=\"30 days\",\n            compression=\"zip\"\n        )\n        \n        logger.add(\n            \"logs/errors_{time:YYYY-MM-DD}.log\",\n            level=\"ERROR\",\n            format=\"{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {file}:{line} | {message}\",\n            rotation=\"1 day\",\n            retention=\"30 days\"\n        )\n    \n    def _setup_signal_handlers(self):\n        \"\"\"Setup signal handlers for graceful shutdown\"\"\"\n        def signal_handler(signum, frame):\n            logger.info(f\"Received signal {signum}, initiating shutdown...\")\n            asyncio.create_task(self.shutdown())\n        \n        signal.signal(signal.SIGINT, signal_handler)\n        signal.signal(signal.SIGTERM, signal_handler)\n    \n    async def initialize(self):\n        \"\"\"Initialize bot components\"\"\"\n        try:\n            logger.info(\"Initializing trading bot components...\")\n            \n            # Initialize OKX client\n            okx_config = self.config.get_okx_config()\n            self.okx_client = OKXClient(okx_config)\n            await self.okx_client.connect()\n            \n            # Test connection\n            health_check = await self.okx_client.health_check()\n            if not health_check:\n                raise Exception(\"OKX API health check failed\")\n            \n            logger.info(\"OKX client connected successfully\")\n            \n            # Initialize strategies\n            await self._initialize_strategies()\n            \n            logger.info(\"Bot initialization completed\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize bot: {e}\")\n            raise\n    \n    async def _initialize_strategies(self):\n        \"\"\"Initialize trading strategies\"\"\"\n        \n        # Initialize scalping strategy\n        if self.config.scalping.enabled:\n            scalping_strategy = ScalpingStrategy(\n                client=self.okx_client,\n                config=self.config.scalping,\n                risk_config=self.config.risk\n            )\n            self.strategies.append(scalping_strategy)\n            logger.info(\"Scalping strategy initialized\")\n        \n        # Add more strategies here as needed\n        # if self.config.trend_following.enabled:\n        #     trend_strategy = TrendFollowingStrategy(...)\n        #     self.strategies.append(trend_strategy)\n    \n    async def run(self):\n        \"\"\"Main bot execution loop\"\"\"\n        if not self.okx_client:\n            await self.initialize()\n        \n        self.running = True\n        logger.info(\"Starting trading bot...\")\n        \n        try:\n            # Create tasks for all strategies\n            strategy_tasks = []\n            for strategy in self.strategies:\n                task = asyncio.create_task(strategy.run())\n                strategy_tasks.append(task)\n            \n            # Create monitoring tasks\n            monitor_task = asyncio.create_task(self._monitor_system())\n            risk_task = asyncio.create_task(self._risk_monitor())\n            \n            # Run all tasks concurrently\n            all_tasks = strategy_tasks + [monitor_task, risk_task]\n            await asyncio.gather(*all_tasks, return_exceptions=True)\n            \n        except Exception as e:\n            logger.error(f\"Bot execution error: {e}\")\n            await self.shutdown()\n        \n        logger.info(\"Trading bot stopped\")\n    \n    async def _monitor_system(self):\n        \"\"\"System monitoring loop\"\"\"\n        while self.running:\n            try:\n                # Log system status\n                await self._log_system_status()\n                \n                # Check API health\n                if not await self.okx_client.health_check():\n                    logger.warning(\"API health check failed, attempting reconnect...\")\n                    await self.okx_client.disconnect()\n                    await self.okx_client.connect()\n                \n                # Sleep for monitoring interval\n                await asyncio.sleep(300)  # 5 minutes\n                \n            except Exception as e:\n                logger.error(f\"System monitor error: {e}\")\n                await asyncio.sleep(60)  # Wait on error\n    \n    async def _risk_monitor(self):\n        \"\"\"Risk monitoring loop\"\"\"\n        while self.running:\n            try:\n                # Get account balance\n                balances = await self.okx_client.get_account_balance()\n                base_balance = next(\n                    (b.free for b in balances if b.currency == self.config.trading.base_currency),\n                    0.0\n                )\n                \n                # Get positions\n                positions = await self.okx_client.get_positions()\n                \n                # Calculate total exposure\n                total_exposure = sum(pos.market_value for pos in positions)\n                \n                # Calculate daily PnL (simplified)\n                daily_pnl = sum(strategy.daily_pnl for strategy in self.strategies)\n                \n                # Create risk metrics\n                risk_metrics = RiskMetrics(\n                    account_balance=base_balance,\n                    total_exposure=total_exposure,\n                    daily_pnl=daily_pnl,\n                    max_daily_loss=base_balance * (self.config.risk.max_daily_loss_percent / 100),\n                    position_count=len(positions),\n                    max_positions=self.config.risk.max_open_positions,\n                    risk_per_trade=self.config.risk.risk_per_trade_percent\n                )\n                \n                # Check risk limits\n                await self._check_risk_limits(risk_metrics)\n                \n                await asyncio.sleep(60)  # Check every minute"}}

## Шаг 9: Скрипт для запуска и переменные окружения

<function_calls>
<invoke name="create_text_file">
<parameter name="content"># Environment variables for OKX Trading Bot
# Copy this file to .env and fill in your actual values

# OKX API Credentials
OKX_API_KEY=your_api_key_here
OKX_API_SECRET=your_api_secret_here
OKX_PASSPHRASE=your_passphrase_here

# Telegram Notifications (optional)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id

# Email Notifications (optional)
EMAIL_USERNAME=your_email@gmail.com
EMAIL_PASSWORD=your_app_password
EMAIL_RECIPIENT=alerts@yourdomain.com

# Database (optional, defaults to SQLite)
DATABASE_URL=sqlite:///trading_bot.db