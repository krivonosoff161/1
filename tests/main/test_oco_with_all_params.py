"""
–¢–ï–°–¢ OCO –° –í–°–ï–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import asyncio
import sys

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def test_oco_with_all_params():
    """–¢–µ—Å—Ç OCO —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üîß –¢–ï–°–¢ OCO –° –í–°–ï–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –¢–ï–°–¢ –° –ü–ê–†–ê–ú–ï–¢–†–û–ú STATE=LIVE
        print(f"\nü§ñ –° –ü–ê–†–ê–ú–ï–¢–†–û–ú STATE=LIVE:")
        print("-" * 50)

        try:
            oco_orders = await bot.client.get_algo_orders(algo_type="oco")
            print(f"üìä OCO —Å state=live: {len(oco_orders)}")
            for order in oco_orders:
                print(f"   {order}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # 2. –¢–ï–°–¢ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê STATE
        print(f"\nü§ñ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê STATE:")
        print("-" * 50)

        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä state
            import json
            from datetime import datetime

            import aiohttp

            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ state
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = "/trade/orders-algo-pending?instType=SPOT&ordType=oco"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message = timestamp + "GET" + request_path + ""
            import base64
            import hashlib
            import hmac

            signature = base64.b64encode(
                hmac.new(
                    bot.client.api_secret.encode("utf-8"),
                    message.encode("utf-8"),
                    hashlib.sha256,
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{bot.client.base_url}/api/v5{request_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    result = await response.json()
                    print(f"üìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å OCO: {len(result.get('data', []))}")
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    for order in result.get("data", []):
                        print(f"   {order}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # 3. –¢–ï–°–¢ –° –ü–ê–†–ê–ú–ï–¢–†–û–ú STATE=ALL
        print(f"\nü§ñ –° –ü–ê–†–ê–ú–ï–¢–†–û–ú STATE=ALL:")
        print("-" * 50)

        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å state=all
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = (
                "/trade/orders-algo-pending?instType=SPOT&ordType=oco&state=all"
            )

            # üîß –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é message!
            message = timestamp + "GET" + request_path + ""

            signature = base64.b64encode(
                hmac.new(
                    bot.client.api_secret.encode("utf-8"),
                    message.encode("utf-8"),
                    hashlib.sha256,
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{bot.client.base_url}/api/v5{request_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    result = await response.json()
                    print(
                        f"üìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å OCO —Å state=all: {len(result.get('data', []))}"
                    )
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    for order in result.get("data", []):
                        print(f"   {order}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å state=all: {e}")

        # 4. –¢–ï–°–¢ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê ORDTYPE
        print(f"\nü§ñ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê ORDTYPE:")
        print("-" * 50)

        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ ordType
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = "/trade/orders-algo-pending?instType=SPOT"

            # üîß –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é message!
            message = timestamp + "GET" + request_path + ""

            signature = base64.b64encode(
                hmac.new(
                    bot.client.api_secret.encode("utf-8"),
                    message.encode("utf-8"),
                    hashlib.sha256,
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{bot.client.base_url}/api/v5{request_path}"

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    result = await response.json()
                    print(f"üìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ ordType: {len(result.get('data', []))}")
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    for order in result.get("data", []):
                        print(f"   {order}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ ordType: {e}")

        await bot.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(test_oco_with_all_params())
