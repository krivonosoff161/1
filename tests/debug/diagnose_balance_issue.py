#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∑–∞–π–º–∞–º–∏
"""
import asyncio
import sys

sys.path.append(".")
from src.config import load_config
from src.okx_client import OKXClient


async def diagnose_balance_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–û–ú")
    print("=" * 60)

    try:
        config = load_config()
        async with OKXClient(config.api["okx"]) as client:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            print("\n1Ô∏è‚É£ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò:")
            print("-" * 30)
            account_config = await client.get_account_config()
            print(f"   Account Level: {account_config.get('acctLv', 'N/A')}")
            print(f"   Trading Mode: {account_config.get('posMode', 'N/A')}")
            print(f"   Auto Loan: {account_config.get('autoLoan', 'N/A')}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            print("\n2Ô∏è‚É£ –ë–ê–õ–ê–ù–°:")
            print("-" * 30)
            balance = await client.get_balance("USDT")
            print(f"   USDT Balance: {balance}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            try:
                balance_all = await client.get_balance_all()
                print(f"   –ü–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance_all}")
            except AttributeError:
                print("   –ü–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å: –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–π–º—ã
            print("\n3Ô∏è‚É£ –ó–ê–ô–ú–´:")
            print("-" * 30)
            btc_borrowed = await client.get_borrowed_balance("BTC")
            usdt_borrowed = await client.get_borrowed_balance("USDT")
            print(f"   BTC –∑–∞–π–º: {btc_borrowed}")
            print(f"   USDT –∑–∞–π–º: {usdt_borrowed}")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            print("\n4Ô∏è‚É£ –ù–ï–î–ê–í–ù–ò–ï –û–†–î–ï–†–ê:")
            print("-" * 30)
            orders = await client.get_order_history_all()
            recent_orders = orders.get("data", [])[:3]
            for order in recent_orders:
                print(
                    f"   {order.get('ordId')}: {order.get('side')} {order.get('sz')} {order.get('instId')} - {order.get('state')}"
                )

            # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("-" * 30)

            if account_config.get("posMode") == "long_short_mode":
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Trading Mode = long_short_mode (MARGIN)")
                print("   –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ SPOT —Ä–µ–∂–∏–º –≤ OKX")
                print("   Settings ‚Üí Trading ‚Üí Position Mode ‚Üí Net")
            else:
                print("‚úÖ Trading Mode: SPOT")

            if account_config.get("autoLoan") == "true":
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Auto Loan = true")
                print("   –†–ï–®–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∏—Ç—å Auto Loan –≤ OKX")
                print("   Settings ‚Üí Auto Loan ‚Üí OFF")
            else:
                print("‚úÖ Auto Loan: OFF")

            if float(btc_borrowed) > 0 or float(usdt_borrowed) > 0:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å –∑–∞–π–º—ã")
                print("   –†–ï–®–ï–ù–ò–ï: –ü–æ–≥–∞—Å–∏—Ç—å –∑–∞–π–º—ã –≤ OKX")
                print("   Portfolio ‚Üí Borrow ‚Üí Repay All")
            else:
                print("‚úÖ –ó–∞–π–º–æ–≤ –Ω–µ—Ç")

            # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ OKX –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("2. Settings ‚Üí Trading ‚Üí Position Mode ‚Üí Net")
            print("3. Settings ‚Üí Auto Loan ‚Üí OFF")
            print("4. Portfolio ‚Üí Borrow ‚Üí Repay All")
            print("5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ borrowed = 0")
            print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(diagnose_balance_issue())
