#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Futures –±–æ—Ç–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API, –±–∞–ª–∞–Ω—Å, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from loguru import logger

from src.clients.futures_client import OKXFuturesClient
from src.config import BotConfig


async def test_futures_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    try:
        logger.info("üß™ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = BotConfig.load_from_file("config/config_futures.yaml")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        logger.info("üß™ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Futures –∫–ª–∏–µ–Ω—Ç–∞...")
        okx_config = config.get_okx_config()

        client = OKXFuturesClient(
            api_key=okx_config.api_key,
            secret_key=okx_config.api_secret,
            passphrase=okx_config.passphrase,
            sandbox=okx_config.sandbox,
            leverage=3,
        )
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        logger.info("üß™ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
        balance = await client.get_balance()
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT")

        if balance == 0:
            logger.warning("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å = 0 (sandbox –∏–ª–∏ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤)")

        logger.info("üß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏...")
        margin_info = await client.get_margin_info("BTC-USDT")
        logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∂–µ: {margin_info}")

        logger.info("üß™ –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...")
        from src.clients.futures_client import round_to_step

        test_size = round_to_step(0.12345, 0.001)
        logger.info(f"‚úÖ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: 0.12345 ‚Üí {test_size}")

        logger.info("üß™ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()
        return False

    finally:
        try:
            await client.close()
        except:
            pass


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    import io
    import sys

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
    if sys.platform == "win32":
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")

    logger.remove()
    logger.add(
        sys.stdout, level="INFO", format="{time:HH:mm:ss} | {level: <8} | {message}"
    )

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    result = asyncio.run(test_futures_connection())

    if result:
        logger.info("üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        sys.exit(0)
    else:
        logger.error("üí• –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        sys.exit(1)
