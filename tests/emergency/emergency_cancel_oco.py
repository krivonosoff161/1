import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

"""
–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–¢–ú–ï–ù–ê OCO –û–†–î–ï–†–û–í
–û—Ç–º–µ–Ω—è–µ–º OCO –æ—Ä–¥–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
"""

import asyncio
import base64
import hashlib
import hmac
import sys
from datetime import datetime

import aiohttp

sys.path.append(".")

from src.config import load_config
from src.main import BotRunner


async def emergency_cancel_oco():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ OCO –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–¢–ú–ï–ù–ê OCO –û–†–î–ï–†–û–í")
    print("=" * 60)

    try:
        config = load_config()
        bot = BotRunner(config, mode="rest")
        await bot.initialize()

        print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ")

        # 1. –ü–û–ü–´–¢–ö–ê –û–¢–ú–ï–ù–´ –í–°–ï–• –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í
        print(f"\nüö® –û–¢–ú–ï–ù–ê –í–°–ï–• –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –û–†–î–ï–†–û–í:")
        print("-" * 50)

        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—Å–µ—Ö algo –æ—Ä–¥–µ—Ä–æ–≤
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = "/trade/cancel-algos"

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö algo –æ—Ä–¥–µ—Ä–æ–≤
            data = {"instType": "SPOT", "instId": "ETH-USDT"}

            body = str(data).replace("'", '"')
            message = timestamp + "POST" + request_path + body

            signature = base64.b64encode(
                hmac.new(
                    bot.client.api_secret.encode("utf-8"),
                    message.encode("utf-8"),
                    hashlib.sha256,
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{bot.client.base_url}/api/v5{request_path}"

            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=body) as response:
                    result = await response.json()
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                    print(f"üìä Code: {result.get('code')}")
                    print(f"üìä Message: {result.get('msg')}")
                    print(f"üìä Data: {result.get('data', [])}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã algo –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 2. –ü–û–ü–´–¢–ö–ê –û–¢–ú–ï–ù–´ –í–°–ï–• –û–ë–´–ß–ù–´–• –û–†–î–ï–†–û–í
        print(f"\nüö® –û–¢–ú–ï–ù–ê –í–°–ï–• –û–ë–´–ß–ù–´–• –û–†–î–ï–†–û–í:")
        print("-" * 50)

        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
            request_path = "/trade/cancel-orders"

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
            data = {"instType": "SPOT", "instId": "ETH-USDT"}

            body = str(data).replace("'", '"')
            message = timestamp + "POST" + request_path + body

            signature = base64.b64encode(
                hmac.new(
                    bot.client.api_secret.encode("utf-8"),
                    message.encode("utf-8"),
                    hashlib.sha256,
                ).digest()
            ).decode("utf-8")

            headers = {
                "OK-ACCESS-KEY": bot.client.api_key,
                "OK-ACCESS-SIGN": signature,
                "OK-ACCESS-TIMESTAMP": timestamp,
                "OK-ACCESS-PASSPHRASE": bot.client.passphrase,
                "Content-Type": "application/json",
            }

            if bot.client.sandbox:
                headers["x-simulated-trading"] = "1"

            url = f"{bot.client.base_url}/api/v5{request_path}"

            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=body) as response:
                    result = await response.json()
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                    print(f"üìä Code: {result.get('code')}")
                    print(f"üìä Message: {result.get('msg')}")
                    print(f"üìä Data: {result.get('data', [])}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 3. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        print("-" * 50)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à –∫–ª–∏–µ–Ω—Ç
            open_orders = await bot.client.get_open_orders()
            algo_orders = await bot.client.get_algo_orders()

            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
            print(f"üìä –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(algo_orders)}")

            if len(open_orders) == 0 and len(algo_orders) == 0:
                print("‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
            else:
                print("‚ùå –û—Ä–¥–µ—Ä–∞ –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç—ã!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

        await bot.shutdown()
        print("\n‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω—ã: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(emergency_cancel_oco())
