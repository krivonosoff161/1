"""
–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""

import asyncio
import sys

from loguru import logger

sys.path.append(".")

from src.config import load_config
from src.websocket_order_executor import WebSocketOrderExecutor


async def test_websocket_stability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    config = load_config()
    okx_config = config.api["okx"]

    logger.info("üîç –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
    logger.info("=" * 60)

    ws_executor = WebSocketOrderExecutor(okx_config)

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("1Ô∏è‚É£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö WEBSOCKET...")
        connected = await ws_executor.connect()
        if not connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket")
            return

        logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # 2. –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - –¥–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        logger.info("\n2Ô∏è‚É£ –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò (30 —Å–µ–∫—É–Ω–¥)...")
        logger.info("   –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...")

        for i in range(6):  # 6 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            is_connected = ws_executor.connected
            is_closed = ws_executor.ws.closed if ws_executor.ws else True

            logger.info(
                f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/6: Connected={is_connected}, Closed={is_closed}"
            )

            if not is_connected or is_closed:
                logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –Ω–∞ {i*5} —Å–µ–∫—É–Ω–¥–µ!")
                break

        # 3. –¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        logger.info("\n3Ô∏è‚É£ –¢–ï–°–¢ –õ–ê–¢–ï–ù–¢–ù–û–°–¢–ò...")
        try:
            latency = await ws_executor.get_latency()
            logger.info(f"   WebSocket –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.2f} –º—Å")
        except Exception as e:
            logger.error(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("\n4Ô∏è‚É£ –¢–ï–°–¢ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø...")
        logger.info("   –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if ws_executor.ws:
            await ws_executor.ws.close()
            ws_executor.connected = False

        logger.info("   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        reconnected = await ws_executor.reconnect()
        if reconnected:
            logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    finally:
        # 5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("\n5Ô∏è‚É£ –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï...")
        await ws_executor.disconnect()
        logger.info("‚úÖ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")

        logger.info("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
        logger.info("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ‚úÖ")
        logger.info("   - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        logger.info("   - –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ò–∑–º–µ—Ä–µ–Ω–∞")
        logger.info("   - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


if __name__ == "__main__":
    asyncio.run(test_websocket_stability())
